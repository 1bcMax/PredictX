{"ast":null,"code":"var _jsxFileName = \"/Users/vickyfu/Documents/AIKOL/prediction-platform/frontend/src/components/PredictionList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport PredictionCard from './PredictionCard';\nimport { predictionApi } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PredictionList = () => {\n  _s();\n  const [predictions, setPredictions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchPredictions = async () => {\n      try {\n        const data = await predictionApi.getAllPredictions();\n        setPredictions(data);\n      } catch (err) {\n        setError('Failed to load predictions');\n        console.error('Error fetching predictions:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPredictions();\n  }, []);\n  const createAIPrediction = async () => {\n    try {\n      const newPrediction = await predictionApi.getAIPrediction('BTC');\n      setPredictions([...predictions, newPrediction]);\n    } catch (err) {\n      console.error('Error creating AI prediction:', err);\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-red-500\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createAIPrediction,\n        className: \"bg-green-500 text-white px-4 py-2 rounded\",\n        children: \"Generate AI Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold mb-4\",\n          children: \"AI Predictions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), predictions.filter(p => p.predictorType === 'AI').map(prediction => /*#__PURE__*/_jsxDEV(PredictionCard, {\n          prediction: prediction,\n          isAI: true\n        }, prediction.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold mb-4\",\n          children: \"KOL Predictions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), predictions.filter(p => p.predictorType === 'KOL').map(prediction => /*#__PURE__*/_jsxDEV(PredictionCard, {\n          prediction: prediction,\n          isAI: false\n        }, prediction.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(PredictionList, \"JJIlf+CNpx+s4G7XQfkA0VXXAmA=\");\n_c = PredictionList;\nexport default PredictionList;\nvar _c;\n$RefreshReg$(_c, \"PredictionList\");","map":{"version":3,"names":["React","useEffect","useState","PredictionCard","predictionApi","jsxDEV","_jsxDEV","PredictionList","_s","predictions","setPredictions","loading","setLoading","error","setError","fetchPredictions","data","getAllPredictions","err","console","createAIPrediction","newPrediction","getAIPrediction","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","filter","p","predictorType","map","prediction","isAI","id","_c","$RefreshReg$"],"sources":["/Users/vickyfu/Documents/AIKOL/prediction-platform/frontend/src/components/PredictionList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PredictionCard from './PredictionCard';\nimport { Prediction } from '../types';\nimport { predictionApi } from '../services/api';\n\nconst PredictionList: React.FC = () => {\n  const [predictions, setPredictions] = useState<Prediction[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchPredictions = async () => {\n      try {\n        const data = await predictionApi.getAllPredictions();\n        setPredictions(data);\n      } catch (err) {\n        setError('Failed to load predictions');\n        console.error('Error fetching predictions:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPredictions();\n  }, []);\n\n  const createAIPrediction = async () => {\n    try {\n      const newPrediction = await predictionApi.getAIPrediction('BTC');\n      setPredictions([...predictions, newPrediction]);\n    } catch (err) {\n      console.error('Error creating AI prediction:', err);\n    }\n  };\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div className=\"text-red-500\">{error}</div>;\n\n  return (\n    <div>\n      <div className=\"mb-4\">\n        <button\n          onClick={createAIPrediction}\n          className=\"bg-green-500 text-white px-4 py-2 rounded\"\n        >\n          Generate AI Prediction\n        </button>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <h2 className=\"text-xl font-bold mb-4\">AI Predictions</h2>\n          {predictions\n            .filter(p => p.predictorType === 'AI')\n            .map(prediction => (\n              <PredictionCard key={prediction.id} prediction={prediction} isAI={true} />\n            ))}\n        </div>\n        <div>\n          <h2 className=\"text-xl font-bold mb-4\">KOL Predictions</h2>\n          {predictions\n            .filter(p => p.predictorType === 'KOL')\n            .map(prediction => (\n              <PredictionCard key={prediction.id} prediction={prediction} isAI={false} />\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PredictionList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}