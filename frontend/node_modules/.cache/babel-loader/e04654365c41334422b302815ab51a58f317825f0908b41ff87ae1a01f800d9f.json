{"ast":null,"code":"import { notImplementedWithMessage as t } from \"../../hooks/index.mjs\";\nimport { WalletConnector as e } from \"../base.mjs\";\nimport { formatConnectorError as n } from \"../errors.mjs\";\nimport { loadConnectionHistory as s } from \"../stored-connection.mjs\";\nimport \"eventemitter3\";\nimport \"@privy-io/js-sdk-core\";\nimport \"../../errors.mjs\";\nimport \"ofetch\";\nimport \"../../constants.mjs\";\nimport \"../../storage.mjs\";\nlet a = [\"phantom\", \"glow\", \"solflare\", \"backpack\", \"okx_wallet\"];\nfunction i(t) {\n  return \"solana\" === t.chainType;\n}\nfunction o(t) {\n  return \"solana\" === t.type;\n}\nfunction r(t) {\n  return t.name.toLowerCase().split(\" \").join(\"_\");\n}\nclass c extends e {\n  get isInstalled() {\n    return \"Installed\" === this.adapter.readyState;\n  }\n  buildConnectedWallet(e, n) {\n    let s, a, i;\n    if (\"Installed\" !== e.readyState || !e.publicKey) throw Error(\"Wallet is not connected.\");\n    return \"signMessage\" in e && (s = async (...t) => {\n      if (!e.connected) throw Error(\"Wallet is not connected.\");\n      return await e.signMessage(t[0]);\n    }), \"sendTransaction\" in e && (a = async (...t) => await e.sendTransaction(t[0], t[1], t[2])), \"signTransaction\" in e && (i = async t => await e.signTransaction(t)), {\n      type: \"solana\",\n      address: e.publicKey.toBase58(),\n      meta: n,\n      imported: !1,\n      connectedAt: Date.now(),\n      walletClientType: this.walletClientType,\n      connectorType: this.connectorType,\n      isConnected: async () => e.connected,\n      disconnect: () => {\n        try {\n          e.disconnect();\n        } catch (t) {\n          console.error(\"Wallet does not support programmatic disconnect\");\n        }\n      },\n      getProvider: t(`${this.walletClientType || \"\"} wallet does not support 'getProvider'`),\n      signMessage: s ?? t(`${this.walletClientType || \"\"} wallet does not support 'signMessage'`),\n      sendTransaction: a ?? t(`${this.walletClientType || \"\"} wallet does not support 'sendTransaction'`),\n      signTransaction: i ?? t(`${this.walletClientType || \"\"} wallet does not support 'signTransaction'`)\n    };\n  }\n  async syncAccounts() {\n    if (\"Installed\" === this.adapter.readyState && this.adapter.publicKey) {\n      let t = {\n        name: this.walletBranding.name,\n        icon: \"string\" == typeof this.walletBranding.icon ? this.walletBranding.icon : void 0,\n        id: this.walletBranding.id\n      };\n      this.wallets.find(t => this.adapter.publicKey && t.address === this.adapter.publicKey.toBase58()) || (this.wallets = [this.buildConnectedWallet(this.adapter, t)], this.emit(\"walletsUpdated\"));\n    } else this.wallets.length > 0 && (this.wallets = [], this.emit(\"walletsUpdated\"));\n  }\n  get walletBranding() {\n    return {\n      id: this.adapter.name,\n      name: this.adapter.name,\n      icon: this.adapter.icon\n    };\n  }\n  async initialize() {\n    this.subscribeListeners(), await this.syncAccounts(), this.shouldAttemptAutoConnect() && (await this.adapter.autoConnect().catch(() => {})), this.initialized = !0, this.emit(\"initialized\");\n  }\n  async connect(t) {\n    return t.showPrompt && (await this.promptConnection()), (await this.isConnected()) ? this.getConnectedWallet() : null;\n  }\n  async getConnectedWallet() {\n    return this.wallets.sort((t, e) => e.connectedAt - t.connectedAt)[0] || null;\n  }\n  async isConnected() {\n    return this.adapter.connected && [\"Installed\"].includes(this.adapter.readyState);\n  }\n  subscribeListeners() {\n    this.adapter.addListener(\"disconnect\", this.onDisconnect), this.adapter.addListener(\"connect\", this.onConnect), this.adapter.addListener(\"error\", this.onError), this.adapter.addListener(\"readyStateChange\", this.onReadyStateChange);\n  }\n  unsubscribeListeners() {\n    this.adapter.removeAllListeners();\n  }\n  shouldAttemptAutoConnect() {\n    return !(!this.autoConnectEnabled || !a.includes(this.walletClientType)) && (\"phantom\" !== this.walletClientType || s().some(({\n      walletClientType: t\n    }) => \"phantom\" === t));\n  }\n  constructor(t, e) {\n    super(r(t)), this.chainType = \"solana\", this.connectorType = \"solana_adapter\", this.disconnect = () => {\n      this.adapter.disconnect().then(() => this.onDisconnect()).catch(t => console.error(\"Error disconnecting\", t));\n    }, this.promptConnection = async () => {\n      try {\n        await this.adapter.connect();\n      } catch (t) {\n        throw n(t);\n      }\n    }, this.onDisconnect = () => {\n      this.syncAccounts();\n    }, this.onConnect = t => {\n      this.syncAccounts();\n    }, this.onError = t => {\n      this.syncAccounts();\n    }, this.onReadyStateChange = t => {\n      \"Installed\" !== t && (this.connected = !1), this.syncAccounts();\n    }, this.adapter = t, this.autoConnectEnabled = e, this.wallets = [];\n  }\n}\nexport { c as SolanaWalletConnector, o as isBaseConnectedSolanaWallet, i as isSolanaWalletConnector, r as toSolanaWalletClientType };","map":{"version":3,"names":["notImplementedWithMessage","t","WalletConnector","e","formatConnectorError","n","loadConnectionHistory","s","a","i","chainType","o","type","r","name","toLowerCase","split","join","c","isInstalled","adapter","readyState","buildConnectedWallet","publicKey","Error","connected","signMessage","sendTransaction","signTransaction","address","toBase58","meta","imported","connectedAt","Date","now","walletClientType","connectorType","isConnected","disconnect","console","error","getProvider","syncAccounts","walletBranding","icon","id","wallets","find","emit","length","initialize","subscribeListeners","shouldAttemptAutoConnect","autoConnect","catch","initialized","connect","showPrompt","promptConnection","getConnectedWallet","sort","includes","addListener","onDisconnect","onConnect","onError","onReadyStateChange","unsubscribeListeners","removeAllListeners","autoConnectEnabled","some","constructor","then","SolanaWalletConnector","isBaseConnectedSolanaWallet","isSolanaWalletConnector","toSolanaWalletClientType"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/react-auth/dist/esm/connectors/solana/index.mjs"],"sourcesContent":["import{notImplementedWithMessage as t}from\"../../hooks/index.mjs\";import{WalletConnector as e}from\"../base.mjs\";import{formatConnectorError as n}from\"../errors.mjs\";import{loadConnectionHistory as s}from\"../stored-connection.mjs\";import\"eventemitter3\";import\"@privy-io/js-sdk-core\";import\"../../errors.mjs\";import\"ofetch\";import\"../../constants.mjs\";import\"../../storage.mjs\";let a=[\"phantom\",\"glow\",\"solflare\",\"backpack\",\"okx_wallet\"];function i(t){return\"solana\"===t.chainType}function o(t){return\"solana\"===t.type}function r(t){return t.name.toLowerCase().split(\" \").join(\"_\")}class c extends e{get isInstalled(){return\"Installed\"===this.adapter.readyState}buildConnectedWallet(e,n){let s,a,i;if(\"Installed\"!==e.readyState||!e.publicKey)throw Error(\"Wallet is not connected.\");return\"signMessage\"in e&&(s=async(...t)=>{if(!e.connected)throw Error(\"Wallet is not connected.\");return await e.signMessage(t[0])}),\"sendTransaction\"in e&&(a=async(...t)=>await e.sendTransaction(t[0],t[1],t[2])),\"signTransaction\"in e&&(i=async t=>await e.signTransaction(t)),{type:\"solana\",address:e.publicKey.toBase58(),meta:n,imported:!1,connectedAt:Date.now(),walletClientType:this.walletClientType,connectorType:this.connectorType,isConnected:async()=>e.connected,disconnect:()=>{try{e.disconnect()}catch(t){console.error(\"Wallet does not support programmatic disconnect\")}},getProvider:t(`${this.walletClientType||\"\"} wallet does not support 'getProvider'`),signMessage:s??t(`${this.walletClientType||\"\"} wallet does not support 'signMessage'`),sendTransaction:a??t(`${this.walletClientType||\"\"} wallet does not support 'sendTransaction'`),signTransaction:i??t(`${this.walletClientType||\"\"} wallet does not support 'signTransaction'`)}}async syncAccounts(){if(\"Installed\"===this.adapter.readyState&&this.adapter.publicKey){let t={name:this.walletBranding.name,icon:\"string\"==typeof this.walletBranding.icon?this.walletBranding.icon:void 0,id:this.walletBranding.id};this.wallets.find((t=>this.adapter.publicKey&&t.address===this.adapter.publicKey.toBase58()))||(this.wallets=[this.buildConnectedWallet(this.adapter,t)],this.emit(\"walletsUpdated\"))}else this.wallets.length>0&&(this.wallets=[],this.emit(\"walletsUpdated\"))}get walletBranding(){return{id:this.adapter.name,name:this.adapter.name,icon:this.adapter.icon}}async initialize(){this.subscribeListeners(),await this.syncAccounts(),this.shouldAttemptAutoConnect()&&await this.adapter.autoConnect().catch((()=>{})),this.initialized=!0,this.emit(\"initialized\")}async connect(t){return t.showPrompt&&await this.promptConnection(),await this.isConnected()?this.getConnectedWallet():null}async getConnectedWallet(){return this.wallets.sort(((t,e)=>e.connectedAt-t.connectedAt))[0]||null}async isConnected(){return this.adapter.connected&&[\"Installed\"].includes(this.adapter.readyState)}subscribeListeners(){this.adapter.addListener(\"disconnect\",this.onDisconnect),this.adapter.addListener(\"connect\",this.onConnect),this.adapter.addListener(\"error\",this.onError),this.adapter.addListener(\"readyStateChange\",this.onReadyStateChange)}unsubscribeListeners(){this.adapter.removeAllListeners()}shouldAttemptAutoConnect(){return!(!this.autoConnectEnabled||!a.includes(this.walletClientType))&&(\"phantom\"!==this.walletClientType||s().some((({walletClientType:t})=>\"phantom\"===t)))}constructor(t,e){super(r(t)),this.chainType=\"solana\",this.connectorType=\"solana_adapter\",this.disconnect=()=>{this.adapter.disconnect().then((()=>this.onDisconnect())).catch((t=>console.error(\"Error disconnecting\",t)))},this.promptConnection=async()=>{try{await this.adapter.connect()}catch(t){throw n(t)}},this.onDisconnect=()=>{this.syncAccounts()},this.onConnect=t=>{this.syncAccounts()},this.onError=t=>{this.syncAccounts()},this.onReadyStateChange=t=>{\"Installed\"!==t&&(this.connected=!1),this.syncAccounts()},this.adapter=t,this.autoConnectEnabled=e,this.wallets=[]}}export{c as SolanaWalletConnector,o as isBaseConnectedSolanaWallet,i as isSolanaWalletConnector,r as toSolanaWalletClientType};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}