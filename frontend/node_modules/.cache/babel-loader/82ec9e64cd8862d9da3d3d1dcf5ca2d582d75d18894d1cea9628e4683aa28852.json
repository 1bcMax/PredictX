{"ast":null,"code":"import { PrivyClientError as e } from \"../../Error.mjs\";\nimport t from \"./MfaPasskeyApi.mjs\";\nimport i from \"./MfaSmsApi.mjs\";\nimport \"@privy-io/public-api\";\nclass r {\n  setProxy(e) {\n    this.proxy = e;\n  }\n  async getAccessToken() {\n    let t = await this.privyInternal.getAccessToken();\n    if (!t) throw new e({\n      error: \"Missing access token\",\n      code: \"attempted_rpc_call_before_logged_in\"\n    });\n    return t;\n  }\n  async verifyMfa() {\n    if (!this.proxy) throw new e({\n      error: \"Embedded wallet proxy not initialized\",\n      code: \"embedded_wallet_webview_not_loaded\"\n    });\n    return await this.proxy.verifyMfa({\n      accessToken: await this.getAccessToken()\n    });\n  }\n  async initEnrollMfa(t) {\n    if (!this.proxy) throw new e({\n      error: \"Embedded wallet proxy not initialized\",\n      code: \"embedded_wallet_webview_not_loaded\"\n    });\n    return await this.proxy.initEnrollMfa({\n      ...t,\n      accessToken: await this.getAccessToken()\n    });\n  }\n  async submitEnrollMfa(t) {\n    if (!this.proxy) throw new e({\n      error: \"Embedded wallet proxy not initialized\",\n      code: \"embedded_wallet_webview_not_loaded\"\n    });\n    let i = await this.proxy.submitEnrollMfa({\n      ...t,\n      accessToken: await this.getAccessToken()\n    });\n    return await this.privyInternal.refreshSession(), i;\n  }\n  async unenrollMfa(t) {\n    if (!this.proxy) throw new e({\n      error: \"Embedded wallet proxy not initialized\",\n      code: \"embedded_wallet_webview_not_loaded\"\n    });\n    let i = await this.proxy.unenrollMfa({\n      method: t,\n      accessToken: await this.getAccessToken()\n    });\n    return await this.privyInternal.refreshSession(), i;\n  }\n  async clearMfa(t) {\n    if (!this.proxy) throw new e({\n      error: \"Embedded wallet proxy not initialized\",\n      code: \"embedded_wallet_webview_not_loaded\"\n    });\n    return await this.proxy.clearMfa(t);\n  }\n  constructor(e, r) {\n    this.proxy = r, this.privyInternal = e, this.sms = new i(e), this.passkey = new t(e);\n  }\n}\nexport { r as default };","map":{"version":3,"names":["PrivyClientError","e","t","i","r","setProxy","proxy","getAccessToken","privyInternal","error","code","verifyMfa","accessToken","initEnrollMfa","submitEnrollMfa","refreshSession","unenrollMfa","method","clearMfa","constructor","sms","passkey","default"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/react-auth/node_modules/@privy-io/js-sdk-core/dist/esm/client/mfa/MfaApi.mjs"],"sourcesContent":["import{PrivyClientError as e}from\"../../Error.mjs\";import t from\"./MfaPasskeyApi.mjs\";import i from\"./MfaSmsApi.mjs\";import\"@privy-io/public-api\";class r{setProxy(e){this.proxy=e}async getAccessToken(){let t=await this.privyInternal.getAccessToken();if(!t)throw new e({error:\"Missing access token\",code:\"attempted_rpc_call_before_logged_in\"});return t}async verifyMfa(){if(!this.proxy)throw new e({error:\"Embedded wallet proxy not initialized\",code:\"embedded_wallet_webview_not_loaded\"});return await this.proxy.verifyMfa({accessToken:await this.getAccessToken()})}async initEnrollMfa(t){if(!this.proxy)throw new e({error:\"Embedded wallet proxy not initialized\",code:\"embedded_wallet_webview_not_loaded\"});return await this.proxy.initEnrollMfa({...t,accessToken:await this.getAccessToken()})}async submitEnrollMfa(t){if(!this.proxy)throw new e({error:\"Embedded wallet proxy not initialized\",code:\"embedded_wallet_webview_not_loaded\"});let i=await this.proxy.submitEnrollMfa({...t,accessToken:await this.getAccessToken()});return await this.privyInternal.refreshSession(),i}async unenrollMfa(t){if(!this.proxy)throw new e({error:\"Embedded wallet proxy not initialized\",code:\"embedded_wallet_webview_not_loaded\"});let i=await this.proxy.unenrollMfa({method:t,accessToken:await this.getAccessToken()});return await this.privyInternal.refreshSession(),i}async clearMfa(t){if(!this.proxy)throw new e({error:\"Embedded wallet proxy not initialized\",code:\"embedded_wallet_webview_not_loaded\"});return await this.proxy.clearMfa(t)}constructor(e,r){this.proxy=r,this.privyInternal=e,this.sms=new i(e),this.passkey=new t(e)}}export{r as default};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}