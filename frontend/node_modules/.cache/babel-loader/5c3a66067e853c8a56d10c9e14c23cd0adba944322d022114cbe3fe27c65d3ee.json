{"ast":null,"code":"import r from \"bs58\";\nimport { ethers as e } from \"ethers\";\nimport { parsePhoneNumber as i } from \"libphonenumber-js/max\";\nimport { z as t } from \"zod\";\nconst d = t.string({\n    required_error: \"Privy DID must be included\",\n    invalid_type_error: \"Privy DID is not a valid string\"\n  }).min(1).transform(r => r.replace(\"did:privy:\", \"\")),\n  o = t.string({\n    required_error: \"Email address must be provided\",\n    invalid_type_error: \"Email address must be a valid string\"\n  }).email(\"Invalid email address\").transform(r => r.toLowerCase()),\n  s = t.string({\n    required_error: \"Verification code must be provided\",\n    invalid_type_error: \"Invalid verification code\"\n  }).length(6, \"Verification code must have 6 digits.\"),\n  n = t.string({\n    required_error: \"Ethereum address must be provided\",\n    invalid_type_error: \"Invalid Ethereum address\"\n  }).transform((r, e) => c(r) || (e.addIssue({\n    code: t.ZodIssueCode.custom,\n    message: \"Invalid Ethereum address\"\n  }), t.NEVER)),\n  a = t.string({\n    required_error: \"Solana address must be provided\",\n    invalid_type_error: \"Invalid Solana address\"\n  }).trim().transform((e, i) => {\n    try {\n      r.decode(e);\n    } catch (r) {\n      return i.addIssue({\n        code: t.ZodIssueCode.custom,\n        message: \"Invalid Solana address\"\n      }), t.NEVER;\n    }\n    return e;\n  }),\n  m = t.string({\n    required_error: \"Phone number must be included\",\n    invalid_type_error: \"Phone number is not a valid string\"\n  }).refine(r => {\n    try {\n      return void 0 !== u(r);\n    } catch (r) {\n      return !1;\n    }\n  }, {\n    message: \"Phone number is not valid\"\n  }).transform(r => u(r) || \"\");\nfunction u(r) {\n  let e = i(r, \"US\");\n  if (e?.isPossible()) return e.formatInternational();\n}\nfunction l(r) {\n  return !!c(r);\n}\nfunction c(r) {\n  if (\"string\" == typeof r) try {\n    return e.utils.getAddress(r.trim());\n  } catch (r) {}\n}\nconst v = t.object({\n  mode: t.enum([\"no-signup\", \"login-or-sign-up\"]).optional()\n});\nexport { v as AuthenticateMode, o as Email, s as PasswordlessCode, m as PhoneNumber, a as SolanaWalletAddress, d as UserId, n as WalletAddress, l as isValidAddress, c as normalizeEthereumAddress, u as normalizePhoneNumber };","map":{"version":3,"names":["r","ethers","e","parsePhoneNumber","i","z","t","d","string","required_error","invalid_type_error","min","transform","replace","o","email","toLowerCase","s","length","n","c","addIssue","code","ZodIssueCode","custom","message","NEVER","a","trim","decode","m","refine","u","isPossible","formatInternational","l","utils","getAddress","v","object","mode","enum","optional","AuthenticateMode","Email","PasswordlessCode","PhoneNumber","SolanaWalletAddress","UserId","WalletAddress","isValidAddress","normalizeEthereumAddress","normalizePhoneNumber"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/public-api/dist/esm/schemas/core.mjs"],"sourcesContent":["import r from\"bs58\";import{ethers as e}from\"ethers\";import{parsePhoneNumber as i}from\"libphonenumber-js/max\";import{z as t}from\"zod\";const d=t.string({required_error:\"Privy DID must be included\",invalid_type_error:\"Privy DID is not a valid string\"}).min(1).transform((r=>r.replace(\"did:privy:\",\"\"))),o=t.string({required_error:\"Email address must be provided\",invalid_type_error:\"Email address must be a valid string\"}).email(\"Invalid email address\").transform((r=>r.toLowerCase())),s=t.string({required_error:\"Verification code must be provided\",invalid_type_error:\"Invalid verification code\"}).length(6,\"Verification code must have 6 digits.\"),n=t.string({required_error:\"Ethereum address must be provided\",invalid_type_error:\"Invalid Ethereum address\"}).transform(((r,e)=>c(r)||(e.addIssue({code:t.ZodIssueCode.custom,message:\"Invalid Ethereum address\"}),t.NEVER))),a=t.string({required_error:\"Solana address must be provided\",invalid_type_error:\"Invalid Solana address\"}).trim().transform(((e,i)=>{try{r.decode(e)}catch(r){return i.addIssue({code:t.ZodIssueCode.custom,message:\"Invalid Solana address\"}),t.NEVER}return e})),m=t.string({required_error:\"Phone number must be included\",invalid_type_error:\"Phone number is not a valid string\"}).refine((r=>{try{return void 0!==u(r)}catch(r){return!1}}),{message:\"Phone number is not valid\"}).transform((r=>u(r)||\"\"));function u(r){let e=i(r,\"US\");if(e?.isPossible())return e.formatInternational()}function l(r){return!!c(r)}function c(r){if(\"string\"==typeof r)try{return e.utils.getAddress(r.trim())}catch(r){}}const v=t.object({mode:t.enum([\"no-signup\",\"login-or-sign-up\"]).optional()});export{v as AuthenticateMode,o as Email,s as PasswordlessCode,m as PhoneNumber,a as SolanaWalletAddress,d as UserId,n as WalletAddress,l as isValidAddress,c as normalizeEthereumAddress,u as normalizePhoneNumber};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}