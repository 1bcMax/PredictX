{"ast":null,"code":"import { getRandomValues, getRandomNumbersInRange, randomizeCharacters } from 'secure-password-utilities/random';\nimport { DIGIT_CHARSET, LOWERCASE_CHARSET, UPPERCASE_CHARSET, SYMBOL_CHARSET } from 'secure-password-utilities/constants';\n/**\n * Generate a random password.\n *\n * Examples:\n *\n *     generatePassword(12); // l[Nz8UfU.o4g\n *     generatePassword(8, { symbols: false, digits: 2 }); // k9WTkaP6\n *     generatePassword(8, { digits: {min: 2} }); // 0(c67+.f\n *\n * @param length The length of the resulting password.\n * @param options\n * @param options.digits Include or exclude digits.\n * @param options.symbols Include or exclude symbols.\n * @param options.lowercase Include or exclude lowercase.\n * @param options.uppercase Include or exclude uppercase.\n * @param options.charset\n * @param options.charset.digits Override the character set for digits.\n * @param options.charset.symbols Override the character set for symbols.\n * @param options.charset.lowercase Override the character set for lowercase.\n * @param options.charset.uppercase Override the character set for uppercase.\n * @returns A random password.\n */\nexport function generatePassword(length, options) {\n  options = options || {};\n  return createPassword(length, {\n    digits: options.digits ?? true,\n    symbols: options.symbols ?? true,\n    lowercase: options.lowercase ?? true,\n    uppercase: options.uppercase ?? true\n  }, {\n    digits: options.charset?.digits ?? DIGIT_CHARSET,\n    symbols: options.charset?.symbols ?? SYMBOL_CHARSET,\n    lowercase: options.charset?.lowercase ?? LOWERCASE_CHARSET,\n    uppercase: options.charset?.uppercase ?? UPPERCASE_CHARSET\n  });\n}\nfunction createPassword(passwordLength, options, charset) {\n  validatePasswordOptions(passwordLength, options);\n  validateCharsetOptions(charset);\n  const [initDigitLength, moreDigits] = getInitialLengthForOption(options.digits);\n  const [initSymbolLength, moreSymbols] = getInitialLengthForOption(options.symbols);\n  const [initLowercaseLength, moreLowercase] = getInitialLengthForOption(options.lowercase);\n  const [initUppercaseLength, moreUppercase] = getInitialLengthForOption(options.uppercase);\n  // Construct the initial response based on the exact or minimum characters\n  // specified for digits, symbols, lowercase and uppercase character sets.\n  let result = generateCharacters(initDigitLength, charset.digits) + generateCharacters(initSymbolLength, charset.symbols) + generateCharacters(initLowercaseLength, charset.lowercase) + generateCharacters(initUppercaseLength, charset.uppercase);\n  let remainingCharset = '';\n  if (moreDigits) {\n    remainingCharset += charset.digits;\n  }\n  if (moreSymbols) {\n    remainingCharset += charset.symbols;\n  }\n  if (moreLowercase) {\n    remainingCharset += charset.lowercase;\n  }\n  if (moreUppercase) {\n    remainingCharset += charset.uppercase;\n  }\n  result += generateCharacters(passwordLength - result.length, remainingCharset);\n  return randomizeCharacters(result);\n}\nfunction validatePasswordOptions(length, options) {\n  if (typeof length !== 'number' || length < 1) {\n    throw new Error('Invalid option: length option must be a number greater than or equal to 1');\n  }\n  validatePasswordOption('digits', options.digits);\n  validatePasswordOption('symbols', options.symbols);\n  validatePasswordOption('lowercase', options.lowercase);\n  validatePasswordOption('uppercase', options.uppercase);\n  const [initDigitLength, moreDigits] = getInitialLengthForOption(options.digits);\n  const [initSymbolLength, moreSymbols] = getInitialLengthForOption(options.symbols);\n  const [initLowercaseLength, moreLowercase] = getInitialLengthForOption(options.lowercase);\n  const [initUppercaseLength, moreUppercase] = getInitialLengthForOption(options.uppercase);\n  const sum = initDigitLength + initSymbolLength + initLowercaseLength + initUppercaseLength;\n  const allExact = !moreDigits && !moreSymbols && !moreLowercase && !moreUppercase;\n  if (sum > length) {\n    throw new Error('Invalid option: Requested characters exceeds expected length');\n  }\n  if (allExact && sum !== length) {\n    throw new Error('Invalid option: Requested less characters than expected length');\n  }\n}\n// This assumes that any missing options were filled in with a default, i.e., no `undefined` options.\nfunction validatePasswordOption(name, option) {\n  if (typeof option === 'boolean') {\n    return;\n  }\n  if (typeof option === 'number') {\n    if (option < 0) {\n      throw new Error(`Invalid option: ${name} option cannot be a negative number`);\n    }\n    return;\n  }\n  if (option !== null && typeof option === 'object') {\n    if (typeof option.min !== 'number' || option.min < 0) {\n      throw new Error(`Invalid option: ${name} option 'min' property must be a non-negative integer`);\n    }\n    return;\n  }\n  throw new Error(`Invalid option: ${name} option must be a boolean, number, or object`);\n}\n// Assumes option has already been validated, populated with defaults, and is thus well-formed.\nfunction getInitialLengthForOption(option) {\n  switch (typeof option) {\n    case 'boolean':\n      return [0, option];\n    case 'number':\n      return [option, false];\n    default:\n      return [option.min, true];\n  }\n}\nfunction validateCharsetOptions(charsets) {\n  validateCharsetOption('digits', charsets.digits);\n  validateCharsetOption('symbols', charsets.symbols);\n  validateCharsetOption('lowercase', charsets.lowercase);\n  validateCharsetOption('uppercase', charsets.uppercase);\n}\nfunction validateCharsetOption(name, charset) {\n  if (typeof charset !== 'string') {\n    throw new Error(`Invalid charset option: ${name} charset must be a string`);\n  }\n  if (charset.length !== new Set(charset).size) {\n    throw new Error(`Invalid charset option: ${name} charset contains duplicate characters`);\n  }\n}\n/**\n * Generate a random digit pin.\n *\n * Examples:\n *\n *     generatePin(6); // 036919\n *     generatePin(8); // 45958396\n *\n * @param length The length of the resulting pin.\n * @returns A random digit pin.\n */\nexport function generatePin(length) {\n  if (typeof length !== 'number' || length < 1) {\n    throw new Error('Invalid argument: length argument must be a number greater than or equal to 1');\n  }\n  return generateCharacters(length, DIGIT_CHARSET);\n}\n/**\n * Generate a string of `length` characters chosen randomly from the given `charset`.\n *\n * Examples:\n *\n *     generateCharacters(4, '$%^&');                          // &$&^\n *     generateCharacters(6, '0123456789');                    // 947682\n *     generateCharacters(6, 'abcdefghijklmnopqrstuvwxyz');    // ihdrnn\n *\n * @param length The number of random characters to generate.\n * @param charset The set of characters to randomly sample from.\n * @returns A random string of `length` characters from `charset`.\n */\nexport function generateCharacters(length, charset) {\n  if (typeof length !== 'number' || length < 0) {\n    throw new Error('Invalid argument: length argument must be a number greater than or equal to 0');\n  }\n  if (typeof charset !== 'string' || charset.length < 2) {\n    throw new Error('Invalid argument: charset argument must be a string with length greater than or equal to 2');\n  }\n  return getRandomValues(length, charset.length).reduce((characters, i) => {\n    return characters + charset[i];\n  }, '');\n}\n/**\n * Generate a memorable passphrase comprised of words chosen randomly from the given `wordlist`.\n *\n * There are wordlists available in the wordlists module, or you can provide your own.\n *\n * The word separator defaults to a dash (`-`), but you can customize this behavior using the third argument. \"-\"\n *\n * Examples:\n *\n *     generatePassphrase(6, DEFAULT_WORDLIST); // canopener-uncanny-hatchet-murky-agony-traitor\n *     generatePassphrase(6, DEFAULT_WORDLIST); // backpack-craftwork-sweat-postcard-imaging-litter\n *     generatePassphrase(6, DEFAULT_WORDLIST, '_'); // goldfish_scorpion_antiviral_pursuit_demanding_motto\n *\n * @param length The number of words selected at random.\n * @param wordlist The list of words to sample from.\n * @param sep The separator to use when joining the words in the passphrase. Defaults to '-'.\n * @returns A memorable passphrase.\n */\nexport function generatePassphrase(length, wordlist, sep = '-') {\n  if (typeof length !== 'number' || length < 1) {\n    throw new Error('Invalid argument: length argument must be a number greater than or equal to 1');\n  }\n  if (!Array.isArray(wordlist) || wordlist.length < 2) {\n    throw new Error('Invalid argument: wordlist argument must be an array with length greater than or equal to 2');\n  }\n  if (typeof sep !== 'string') {\n    throw new Error('Invalid argument: sep argument must be a string');\n  }\n  return getRandomNumbersInRange(length, 0, wordlist.length).reduce((passphrase, value, i) => {\n    const word = wordlist[value];\n    return passphrase + (i === 0 ? word : sep + word);\n  }, '');\n}","map":{"version":3,"names":["getRandomValues","getRandomNumbersInRange","randomizeCharacters","DIGIT_CHARSET","LOWERCASE_CHARSET","UPPERCASE_CHARSET","SYMBOL_CHARSET","generatePassword","length","options","createPassword","digits","symbols","lowercase","uppercase","charset","passwordLength","validatePasswordOptions","validateCharsetOptions","initDigitLength","moreDigits","getInitialLengthForOption","initSymbolLength","moreSymbols","initLowercaseLength","moreLowercase","initUppercaseLength","moreUppercase","result","generateCharacters","remainingCharset","Error","validatePasswordOption","sum","allExact","name","option","min","charsets","validateCharsetOption","Set","size","generatePin","reduce","characters","i","generatePassphrase","wordlist","sep","Array","isArray","passphrase","value","word"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/secure-password-utilities/src/index.ts"],"sourcesContent":["import {\n  getRandomValues,\n  getRandomNumbersInRange,\n  randomizeCharacters,\n} from 'secure-password-utilities/random';\nimport {\n  DIGIT_CHARSET,\n  LOWERCASE_CHARSET,\n  UPPERCASE_CHARSET,\n  SYMBOL_CHARSET,\n} from 'secure-password-utilities/constants';\n\nexport type PasswordOptionType =\n  // `true` means include [character type], `false` means exclude [character type]\n  | boolean\n  // <number> means include exactly <number> [character type]s\n  | number\n  // { min: <number> } means include at least <number> [character type]s\n  | { min: number };\n\nexport type PasswordOptionsType = {\n  digits?: PasswordOptionType;\n  symbols?: PasswordOptionType;\n  lowercase?: PasswordOptionType;\n  uppercase?: PasswordOptionType;\n  charset?: {\n    digits?: string;\n    symbols?: string;\n    lowercase?: string;\n    uppercase?: string;\n  };\n};\n\n/**\n * Generate a random password.\n *\n * Examples:\n *\n *     generatePassword(12); // l[Nz8UfU.o4g\n *     generatePassword(8, { symbols: false, digits: 2 }); // k9WTkaP6\n *     generatePassword(8, { digits: {min: 2} }); // 0(c67+.f\n *\n * @param length The length of the resulting password.\n * @param options\n * @param options.digits Include or exclude digits.\n * @param options.symbols Include or exclude symbols.\n * @param options.lowercase Include or exclude lowercase.\n * @param options.uppercase Include or exclude uppercase.\n * @param options.charset\n * @param options.charset.digits Override the character set for digits.\n * @param options.charset.symbols Override the character set for symbols.\n * @param options.charset.lowercase Override the character set for lowercase.\n * @param options.charset.uppercase Override the character set for uppercase.\n * @returns A random password.\n */\nexport function generatePassword(length: number, options?: PasswordOptionsType): string {\n  options = options || {};\n\n  return createPassword(\n    length,\n    {\n      digits: options.digits ?? true,\n      symbols: options.symbols ?? true,\n      lowercase: options.lowercase ?? true,\n      uppercase: options.uppercase ?? true,\n    },\n    {\n      digits: options.charset?.digits ?? DIGIT_CHARSET,\n      symbols: options.charset?.symbols ?? SYMBOL_CHARSET,\n      lowercase: options.charset?.lowercase ?? LOWERCASE_CHARSET,\n      uppercase: options.charset?.uppercase ?? UPPERCASE_CHARSET,\n    }\n  );\n}\n\ntype PasswordOptionsTypeRequired = {\n  digits: PasswordOptionType;\n  symbols: PasswordOptionType;\n  lowercase: PasswordOptionType;\n  uppercase: PasswordOptionType;\n};\n\ntype CharsetType = {\n  digits: string;\n  symbols: string;\n  lowercase: string;\n  uppercase: string;\n};\n\nfunction createPassword(\n  passwordLength: number,\n  options: PasswordOptionsTypeRequired,\n  charset: CharsetType\n) {\n  validatePasswordOptions(passwordLength, options);\n  validateCharsetOptions(charset);\n\n  const [initDigitLength, moreDigits] = getInitialLengthForOption(options.digits);\n  const [initSymbolLength, moreSymbols] = getInitialLengthForOption(options.symbols);\n  const [initLowercaseLength, moreLowercase] = getInitialLengthForOption(options.lowercase);\n  const [initUppercaseLength, moreUppercase] = getInitialLengthForOption(options.uppercase);\n\n  // Construct the initial response based on the exact or minimum characters\n  // specified for digits, symbols, lowercase and uppercase character sets.\n  let result =\n    generateCharacters(initDigitLength, charset.digits) +\n    generateCharacters(initSymbolLength, charset.symbols) +\n    generateCharacters(initLowercaseLength, charset.lowercase) +\n    generateCharacters(initUppercaseLength, charset.uppercase);\n\n  let remainingCharset = '';\n\n  if (moreDigits) {\n    remainingCharset += charset.digits;\n  }\n\n  if (moreSymbols) {\n    remainingCharset += charset.symbols;\n  }\n\n  if (moreLowercase) {\n    remainingCharset += charset.lowercase;\n  }\n\n  if (moreUppercase) {\n    remainingCharset += charset.uppercase;\n  }\n\n  result += generateCharacters(passwordLength - result.length, remainingCharset);\n\n  return randomizeCharacters(result);\n}\n\nfunction validatePasswordOptions(length: number, options: PasswordOptionsTypeRequired) {\n  if (typeof length !== 'number' || length < 1) {\n    throw new Error('Invalid option: length option must be a number greater than or equal to 1');\n  }\n\n  validatePasswordOption('digits', options.digits);\n  validatePasswordOption('symbols', options.symbols);\n  validatePasswordOption('lowercase', options.lowercase);\n  validatePasswordOption('uppercase', options.uppercase);\n\n  const [initDigitLength, moreDigits] = getInitialLengthForOption(options.digits);\n  const [initSymbolLength, moreSymbols] = getInitialLengthForOption(options.symbols);\n  const [initLowercaseLength, moreLowercase] = getInitialLengthForOption(options.lowercase);\n  const [initUppercaseLength, moreUppercase] = getInitialLengthForOption(options.uppercase);\n\n  const sum = initDigitLength + initSymbolLength + initLowercaseLength + initUppercaseLength;\n\n  const allExact = !moreDigits && !moreSymbols && !moreLowercase && !moreUppercase;\n\n  if (sum > length) {\n    throw new Error('Invalid option: Requested characters exceeds expected length');\n  }\n\n  if (allExact && sum !== length) {\n    throw new Error('Invalid option: Requested less characters than expected length');\n  }\n}\n\n// This assumes that any missing options were filled in with a default, i.e., no `undefined` options.\nfunction validatePasswordOption(name: string, option: PasswordOptionType) {\n  if (typeof option === 'boolean') {\n    return;\n  }\n\n  if (typeof option === 'number') {\n    if (option < 0) {\n      throw new Error(`Invalid option: ${name} option cannot be a negative number`);\n    }\n    return;\n  }\n\n  if (option !== null && typeof option === 'object') {\n    if (typeof option.min !== 'number' || option.min < 0) {\n      throw new Error(\n        `Invalid option: ${name} option 'min' property must be a non-negative integer`\n      );\n    }\n    return;\n  }\n\n  throw new Error(`Invalid option: ${name} option must be a boolean, number, or object`);\n}\n\n// Assumes option has already been validated, populated with defaults, and is thus well-formed.\nfunction getInitialLengthForOption(option: PasswordOptionType): [number, boolean] {\n  switch (typeof option) {\n    case 'boolean':\n      return [0, option];\n    case 'number':\n      return [option, false];\n    default:\n      return [option.min, true];\n  }\n}\n\nfunction validateCharsetOptions(charsets: CharsetType) {\n  validateCharsetOption('digits', charsets.digits);\n  validateCharsetOption('symbols', charsets.symbols);\n  validateCharsetOption('lowercase', charsets.lowercase);\n  validateCharsetOption('uppercase', charsets.uppercase);\n}\n\nfunction validateCharsetOption(name: string, charset: string) {\n  if (typeof charset !== 'string') {\n    throw new Error(`Invalid charset option: ${name} charset must be a string`);\n  }\n\n  if (charset.length !== new Set(charset).size) {\n    throw new Error(`Invalid charset option: ${name} charset contains duplicate characters`);\n  }\n}\n\n/**\n * Generate a random digit pin.\n *\n * Examples:\n *\n *     generatePin(6); // 036919\n *     generatePin(8); // 45958396\n *\n * @param length The length of the resulting pin.\n * @returns A random digit pin.\n */\nexport function generatePin(length: number) {\n  if (typeof length !== 'number' || length < 1) {\n    throw new Error(\n      'Invalid argument: length argument must be a number greater than or equal to 1'\n    );\n  }\n\n  return generateCharacters(length, DIGIT_CHARSET);\n}\n\n/**\n * Generate a string of `length` characters chosen randomly from the given `charset`.\n *\n * Examples:\n *\n *     generateCharacters(4, '$%^&');                          // &$&^\n *     generateCharacters(6, '0123456789');                    // 947682\n *     generateCharacters(6, 'abcdefghijklmnopqrstuvwxyz');    // ihdrnn\n *\n * @param length The number of random characters to generate.\n * @param charset The set of characters to randomly sample from.\n * @returns A random string of `length` characters from `charset`.\n */\nexport function generateCharacters(length: number, charset: string) {\n  if (typeof length !== 'number' || length < 0) {\n    throw new Error(\n      'Invalid argument: length argument must be a number greater than or equal to 0'\n    );\n  }\n\n  if (typeof charset !== 'string' || charset.length < 2) {\n    throw new Error(\n      'Invalid argument: charset argument must be a string with length greater than or equal to 2'\n    );\n  }\n\n  return getRandomValues(length, charset.length).reduce((characters, i) => {\n    return characters + charset[i];\n  }, '');\n}\n\n/**\n * Generate a memorable passphrase comprised of words chosen randomly from the given `wordlist`.\n *\n * There are wordlists available in the wordlists module, or you can provide your own.\n *\n * The word separator defaults to a dash (`-`), but you can customize this behavior using the third argument. \"-\"\n *\n * Examples:\n *\n *     generatePassphrase(6, DEFAULT_WORDLIST); // canopener-uncanny-hatchet-murky-agony-traitor\n *     generatePassphrase(6, DEFAULT_WORDLIST); // backpack-craftwork-sweat-postcard-imaging-litter\n *     generatePassphrase(6, DEFAULT_WORDLIST, '_'); // goldfish_scorpion_antiviral_pursuit_demanding_motto\n *\n * @param length The number of words selected at random.\n * @param wordlist The list of words to sample from.\n * @param sep The separator to use when joining the words in the passphrase. Defaults to '-'.\n * @returns A memorable passphrase.\n */\nexport function generatePassphrase(length: number, wordlist: readonly string[], sep = '-') {\n  if (typeof length !== 'number' || length < 1) {\n    throw new Error(\n      'Invalid argument: length argument must be a number greater than or equal to 1'\n    );\n  }\n\n  if (!Array.isArray(wordlist) || wordlist.length < 2) {\n    throw new Error(\n      'Invalid argument: wordlist argument must be an array with length greater than or equal to 2'\n    );\n  }\n\n  if (typeof sep !== 'string') {\n    throw new Error('Invalid argument: sep argument must be a string');\n  }\n\n  return getRandomNumbersInRange(length, 0, wordlist.length).reduce((passphrase, value, i) => {\n    const word = wordlist[value];\n    return passphrase + (i === 0 ? word : sep + word);\n  }, '');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}