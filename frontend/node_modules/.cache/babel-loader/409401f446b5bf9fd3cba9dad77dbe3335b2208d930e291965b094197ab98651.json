{"ast":null,"code":"var _jsxFileName = \"/Users/vickyfu/Documents/PredictX/frontend/src/components/PredictionCard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport PredictionCard from './PredictionCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Sample data for testing\nconst samplePredictions = [{\n  id: '1',\n  asset: 'BTC',\n  currentPrice: 45000,\n  predictedPrice: 47000,\n  confidence: 0.8,\n  reasoning: \"Strong market momentum and increasing institutional interest suggest continued upward trend.\",\n  yesPrice: 0.8,\n  noPrice: 0.2,\n  volume: 1000000,\n  liquidity: 500000,\n  marketData: {\n    volume_24h: 30000000000,\n    market_cap: 850000000000,\n    percent_change_24h: 2.5,\n    percent_change_7d: 5.2\n  }\n}];\nconst PredictionList = () => {\n  _s();\n  const [predictions, setPredictions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchPredictions = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('http://localhost:8000/api/predictions');\n        const data = await response.json();\n        setPredictions(Array.isArray(data) ? data : samplePredictions);\n      } catch (error) {\n        console.error('Error fetching predictions:', error);\n        setPredictions(samplePredictions); // Use sample data on error\n        setError('Failed to fetch predictions. Showing sample data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPredictions();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto p-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: \"Loading predictions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-yellow-600 mb-4\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid gap-4 md:grid-cols-2 lg:grid-cols-3\",\n        children: predictions.map(prediction => /*#__PURE__*/_jsxDEV(PredictionCard, {\n          prediction: prediction\n        }, prediction.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"AI Price Predictions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid gap-4 md:grid-cols-2 lg:grid-cols-3\",\n      children: predictions.map(prediction => /*#__PURE__*/_jsxDEV(PredictionCard, {\n        prediction: prediction\n      }, prediction.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(PredictionList, \"JJIlf+CNpx+s4G7XQfkA0VXXAmA=\");\n_c = PredictionList;\nexport default PredictionList;\nvar _c;\n$RefreshReg$(_c, \"PredictionList\");","map":{"version":3,"names":["React","useEffect","useState","PredictionCard","jsxDEV","_jsxDEV","samplePredictions","id","asset","currentPrice","predictedPrice","confidence","reasoning","yesPrice","noPrice","volume","liquidity","marketData","volume_24h","market_cap","percent_change_24h","percent_change_7d","PredictionList","_s","predictions","setPredictions","loading","setLoading","error","setError","fetchPredictions","response","fetch","data","json","Array","isArray","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","prediction","_c","$RefreshReg$"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/src/components/PredictionCard.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PredictionCard from './PredictionCard';\nimport { Prediction } from '../types';\n\n// Sample data for testing\nconst samplePredictions: Prediction[] = [\n  {\n    id: '1',\n    asset: 'BTC',\n    currentPrice: 45000,\n    predictedPrice: 47000,\n    confidence: 0.8,\n    reasoning: \"Strong market momentum and increasing institutional interest suggest continued upward trend.\",\n    yesPrice: 0.8,\n    noPrice: 0.2,\n    volume: 1000000,\n    liquidity: 500000,\n    marketData: {\n      volume_24h: 30000000000,\n      market_cap: 850000000000,\n      percent_change_24h: 2.5,\n      percent_change_7d: 5.2\n    }\n  }\n];\n\nconst PredictionList: React.FC = () => {\n  const [predictions, setPredictions] = useState<Prediction[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchPredictions = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('http://localhost:8000/api/predictions');\n        const data = await response.json();\n        setPredictions(Array.isArray(data) ? data : samplePredictions);\n      } catch (error) {\n        console.error('Error fetching predictions:', error);\n        setPredictions(samplePredictions); // Use sample data on error\n        setError('Failed to fetch predictions. Showing sample data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPredictions();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto p-4\">\n        <div className=\"text-center\">Loading predictions...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto p-4\">\n        <div className=\"text-yellow-600 mb-4\">{error}</div>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {predictions.map(prediction => (\n            <PredictionCard \n              key={prediction.id} \n              prediction={prediction}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h2 className=\"text-2xl font-bold mb-4\">AI Price Predictions</h2>\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {predictions.map(prediction => (\n          <PredictionCard \n            key={prediction.id} \n            prediction={prediction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PredictionList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}