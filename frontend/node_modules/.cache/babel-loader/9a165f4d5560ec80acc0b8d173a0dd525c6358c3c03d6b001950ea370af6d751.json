{"ast":null,"code":"'use strict';\n\n/**\n * Calculate the entropy of a string based on the size of the charset used and\n * the length of the string.\n *\n * Based on:\n * http://resources.infosecinstitute.com/password-security-complexity-vs-length/\n *\n * @param   {number} charset is the size of the string charset.\n * @param   {number} length  is the length of the string.\n * @returns {number}         the calculated entropy.\n */\nvar calcEntropy = function calcEntropy(charset, length) {\n  return Math.round(length * Math.log(charset) / Math.LN2);\n};\n\n/**\n * Standard character sets list.\n *\n * It assumes the `uppercase` and `lowercase` charsets to have 26 chars as in\n * the English alphabet. Numbers are 10 characters long. Symbols are the rest\n * of the 33 remaining chars in the 7-bit ASCII table.\n *\n * @type {Array}\n */\nvar stdCharsets = [{\n  name: 'lowercase',\n  re: /[a-z]/,\n  // abcdefghijklmnopqrstuvwxyz\n  length: 26\n}, {\n  name: 'uppercase',\n  re: /[A-Z]/,\n  // ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  length: 26\n}, {\n  name: 'numbers',\n  re: /[0-9]/,\n  // 1234567890\n  length: 10\n}, {\n  name: 'symbols',\n  re: /[^a-zA-Z0-9]/,\n  //  !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ (and any other)\n  length: 33\n}];\n\n/**\n * Creates a function to calculate the total charset length of a string based on\n * the given charsets.\n *\n * @param  {Object[]} charsets are description of each charset. Shall contain a\n *                             regular expression `re` to identify each\n *                             character and a `length` with the total possible\n *                             characters in the set.\n * @returns {Function}         a function that will receive a string and return\n *                             the total charset length.\n */\nvar calcCharsetLengthWith = function calcCharsetLengthWith(charsets) {\n  return function (string) {\n    return charsets.reduce(function (length, charset) {\n      return length + (charset.re.test(string) ? charset.length : 0);\n    }, 0);\n  };\n};\n\n/**\n * Helper function to calculate the total charset lengths of a given string\n * using the standard character sets.\n *\n * @type {Function}\n */\nvar calcCharsetLength = calcCharsetLengthWith(stdCharsets);\n\n/**\n * Calculate the given password entropy.\n *\n * @param   {string} string is the password string.\n * @returns {number}        [the calculated entropy.\n */\nvar passwordEntropy = function passwordEntropy(string) {\n  return string ? calcEntropy(calcCharsetLength(string), string.length) : 0;\n};\nmodule.exports = passwordEntropy;","map":{"version":3,"names":["calcEntropy","charset","length","Math","round","log","LN2","stdCharsets","name","re","calcCharsetLengthWith","charsets","string","reduce","test","calcCharsetLength","passwordEntropy","module","exports"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/fast-password-entropy/es5/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Calculate the entropy of a string based on the size of the charset used and\n * the length of the string.\n *\n * Based on:\n * http://resources.infosecinstitute.com/password-security-complexity-vs-length/\n *\n * @param   {number} charset is the size of the string charset.\n * @param   {number} length  is the length of the string.\n * @returns {number}         the calculated entropy.\n */\n\nvar calcEntropy = function calcEntropy(charset, length) {\n  return Math.round(length * Math.log(charset) / Math.LN2);\n};\n\n/**\n * Standard character sets list.\n *\n * It assumes the `uppercase` and `lowercase` charsets to have 26 chars as in\n * the English alphabet. Numbers are 10 characters long. Symbols are the rest\n * of the 33 remaining chars in the 7-bit ASCII table.\n *\n * @type {Array}\n */\nvar stdCharsets = [{\n  name: 'lowercase',\n  re: /[a-z]/, // abcdefghijklmnopqrstuvwxyz\n  length: 26\n}, {\n  name: 'uppercase',\n  re: /[A-Z]/, // ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  length: 26\n}, {\n  name: 'numbers',\n  re: /[0-9]/, // 1234567890\n  length: 10\n}, {\n  name: 'symbols',\n  re: /[^a-zA-Z0-9]/, //  !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ (and any other)\n  length: 33\n}];\n\n/**\n * Creates a function to calculate the total charset length of a string based on\n * the given charsets.\n *\n * @param  {Object[]} charsets are description of each charset. Shall contain a\n *                             regular expression `re` to identify each\n *                             character and a `length` with the total possible\n *                             characters in the set.\n * @returns {Function}         a function that will receive a string and return\n *                             the total charset length.\n */\nvar calcCharsetLengthWith = function calcCharsetLengthWith(charsets) {\n  return function (string) {\n    return charsets.reduce(function (length, charset) {\n      return length + (charset.re.test(string) ? charset.length : 0);\n    }, 0);\n  };\n};\n\n/**\n * Helper function to calculate the total charset lengths of a given string\n * using the standard character sets.\n *\n * @type {Function}\n */\nvar calcCharsetLength = calcCharsetLengthWith(stdCharsets);\n\n/**\n * Calculate the given password entropy.\n *\n * @param   {string} string is the password string.\n * @returns {number}        [the calculated entropy.\n */\nvar passwordEntropy = function passwordEntropy(string) {\n  return string ? calcEntropy(calcCharsetLength(string), string.length) : 0;\n};\n\nmodule.exports = passwordEntropy;"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,WAAW,GAAG,SAASA,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAE;EACtD,OAAOC,IAAI,CAACC,KAAK,CAACF,MAAM,GAAGC,IAAI,CAACE,GAAG,CAACJ,OAAO,CAAC,GAAGE,IAAI,CAACG,GAAG,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAG,CAAC;EACjBC,IAAI,EAAE,WAAW;EACjBC,EAAE,EAAE,OAAO;EAAE;EACbP,MAAM,EAAE;AACV,CAAC,EAAE;EACDM,IAAI,EAAE,WAAW;EACjBC,EAAE,EAAE,OAAO;EAAE;EACbP,MAAM,EAAE;AACV,CAAC,EAAE;EACDM,IAAI,EAAE,SAAS;EACfC,EAAE,EAAE,OAAO;EAAE;EACbP,MAAM,EAAE;AACV,CAAC,EAAE;EACDM,IAAI,EAAE,SAAS;EACfC,EAAE,EAAE,cAAc;EAAE;EACpBP,MAAM,EAAE;AACV,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIQ,qBAAqB,GAAG,SAASA,qBAAqBA,CAACC,QAAQ,EAAE;EACnE,OAAO,UAAUC,MAAM,EAAE;IACvB,OAAOD,QAAQ,CAACE,MAAM,CAAC,UAAUX,MAAM,EAAED,OAAO,EAAE;MAChD,OAAOC,MAAM,IAAID,OAAO,CAACQ,EAAE,CAACK,IAAI,CAACF,MAAM,CAAC,GAAGX,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC;IAChE,CAAC,EAAE,CAAC,CAAC;EACP,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,IAAIa,iBAAiB,GAAGL,qBAAqB,CAACH,WAAW,CAAC;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,IAAIS,eAAe,GAAG,SAASA,eAAeA,CAACJ,MAAM,EAAE;EACrD,OAAOA,MAAM,GAAGZ,WAAW,CAACe,iBAAiB,CAACH,MAAM,CAAC,EAAEA,MAAM,CAACV,MAAM,CAAC,GAAG,CAAC;AAC3E,CAAC;AAEDe,MAAM,CAACC,OAAO,GAAGF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}