{"ast":null,"code":"import t from \"fetch-retry\";\nimport { MoonpayOnRampSign as r } from \"@privy-io/public-api\";\nimport { MoonpayApiError as a } from \"../../Error.mjs\";\nimport { MoonpayEnvironments as i } from \"../../funding/moonpay.mjs\";\nimport \"../../chains/arbitrum.mjs\";\nimport \"../../chains/avalanche.mjs\";\nimport \"../../chains/base.mjs\";\nimport \"../../chains/celo.mjs\";\nimport \"../../chains/mainnet.mjs\";\nimport \"../../chains/optimism.mjs\";\nimport \"../../chains/polygon.mjs\";\nlet o = class {\n  async sign(t) {\n    return await this._privyInternal.fetch(r, {\n      body: t\n    });\n  }\n  async getTransactionStatus({\n    transactionId: r,\n    useSandbox: o\n  }) {\n    let {\n        url: s,\n        key: n\n      } = i[o ? \"sandbox\" : \"prod\"],\n      e = await t(fetch, {\n        retries: 3,\n        retryDelay: 500\n      })(`${s}/transactions/ext/${r}?apiKey=${n}`);\n    if (!e.ok) throw new a({\n      error: `Failed to fetch transaction status for Transaction ${r}`,\n      code: \"failed_to_fetch_moonpay_transaction_status\",\n      response: e\n    });\n    let m = await e.json();\n    return Array.isArray(m) ? m.at(0) : void 0;\n  }\n  constructor(t) {\n    this._privyInternal = t;\n  }\n};\nexport { o as default };","map":{"version":3,"names":["t","MoonpayOnRampSign","r","MoonpayApiError","a","MoonpayEnvironments","i","o","sign","_privyInternal","fetch","body","getTransactionStatus","transactionId","useSandbox","url","s","key","n","e","retries","retryDelay","ok","error","code","response","m","json","Array","isArray","at","constructor","default"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/react-auth/node_modules/@privy-io/js-sdk-core/dist/esm/client/funding/MoonpayOnRampApi.mjs"],"sourcesContent":["import t from\"fetch-retry\";import{MoonpayOnRampSign as r}from\"@privy-io/public-api\";import{MoonpayApiError as a}from\"../../Error.mjs\";import{MoonpayEnvironments as i}from\"../../funding/moonpay.mjs\";import\"../../chains/arbitrum.mjs\";import\"../../chains/avalanche.mjs\";import\"../../chains/base.mjs\";import\"../../chains/celo.mjs\";import\"../../chains/mainnet.mjs\";import\"../../chains/optimism.mjs\";import\"../../chains/polygon.mjs\";let o=class{async sign(t){return await this._privyInternal.fetch(r,{body:t})}async getTransactionStatus({transactionId:r,useSandbox:o}){let{url:s,key:n}=i[o?\"sandbox\":\"prod\"],e=await t(fetch,{retries:3,retryDelay:500})(`${s}/transactions/ext/${r}?apiKey=${n}`);if(!e.ok)throw new a({error:`Failed to fetch transaction status for Transaction ${r}`,code:\"failed_to_fetch_moonpay_transaction_status\",response:e});let m=await e.json();return Array.isArray(m)?m.at(0):void 0}constructor(t){this._privyInternal=t}};export{o as default};\n"],"mappings":"AAAA,OAAOA,CAAC,MAAK,aAAa;AAAC,SAAOC,iBAAiB,IAAIC,CAAC,QAAK,sBAAsB;AAAC,SAAOC,eAAe,IAAIC,CAAC,QAAK,iBAAiB;AAAC,SAAOC,mBAAmB,IAAIC,CAAC,QAAK,2BAA2B;AAAC,OAAM,2BAA2B;AAAC,OAAM,4BAA4B;AAAC,OAAM,uBAAuB;AAAC,OAAM,uBAAuB;AAAC,OAAM,0BAA0B;AAAC,OAAM,2BAA2B;AAAC,OAAM,0BAA0B;AAAC,IAAIC,CAAC,GAAC,MAAK;EAAC,MAAMC,IAAIA,CAACR,CAAC,EAAC;IAAC,OAAO,MAAM,IAAI,CAACS,cAAc,CAACC,KAAK,CAACR,CAAC,EAAC;MAACS,IAAI,EAACX;IAAC,CAAC,CAAC;EAAA;EAAC,MAAMY,oBAAoBA,CAAC;IAACC,aAAa,EAACX,CAAC;IAACY,UAAU,EAACP;EAAC,CAAC,EAAC;IAAC,IAAG;QAACQ,GAAG,EAACC,CAAC;QAACC,GAAG,EAACC;MAAC,CAAC,GAACZ,CAAC,CAACC,CAAC,GAAC,SAAS,GAAC,MAAM,CAAC;MAACY,CAAC,GAAC,MAAMnB,CAAC,CAACU,KAAK,EAAC;QAACU,OAAO,EAAC,CAAC;QAACC,UAAU,EAAC;MAAG,CAAC,CAAC,CAAC,GAAGL,CAAC,qBAAqBd,CAAC,WAAWgB,CAAC,EAAE,CAAC;IAAC,IAAG,CAACC,CAAC,CAACG,EAAE,EAAC,MAAM,IAAIlB,CAAC,CAAC;MAACmB,KAAK,EAAC,sDAAsDrB,CAAC,EAAE;MAACsB,IAAI,EAAC,4CAA4C;MAACC,QAAQ,EAACN;IAAC,CAAC,CAAC;IAAC,IAAIO,CAAC,GAAC,MAAMP,CAAC,CAACQ,IAAI,CAAC,CAAC;IAAC,OAAOC,KAAK,CAACC,OAAO,CAACH,CAAC,CAAC,GAACA,CAAC,CAACI,EAAE,CAAC,CAAC,CAAC,GAAC,KAAK,CAAC;EAAA;EAACC,WAAWA,CAAC/B,CAAC,EAAC;IAAC,IAAI,CAACS,cAAc,GAACT,CAAC;EAAA;AAAC,CAAC;AAAC,SAAOO,CAAC,IAAIyB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}