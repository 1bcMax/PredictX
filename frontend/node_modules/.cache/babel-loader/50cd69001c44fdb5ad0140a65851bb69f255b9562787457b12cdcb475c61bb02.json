{"ast":null,"code":"import st, { PROPOSAL_EXPIRY_MESSAGE as it } from \"@walletconnect/sign-client\";\nimport { isValidObject as nt, isCaipNamespace as te, parseNamespaceKey as A, mergeArrays as G, parseChainId as re, getSdkError as se, isValidArray as ie } from \"@walletconnect/utils\";\nimport { pino as at, getDefaultLoggerOptions as ot } from \"@walletconnect/logger\";\nimport P, { HttpConnection as ct } from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider as m } from \"@walletconnect/jsonrpc-provider\";\nimport { formatJsonRpcRequest as ht, formatJsonRpcResult as pt } from \"@walletconnect/jsonrpc-utils\";\nimport ut from \"events\";\nconst ne = \"error\",\n  dt = \"wss://relay.walletconnect.org\",\n  lt = \"wc\",\n  vt = \"universal_provider\",\n  ae = `${lt}@2:${vt}:`,\n  oe = \"https://rpc.walletconnect.org/v1/\",\n  w = \"generic\",\n  ft = `${oe}bundler`,\n  f = {\n    DEFAULT_CHAIN_CHANGED: \"default_chain_changed\"\n  };\nvar j = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction mt() {\n  this.__data__ = [], this.size = 0;\n}\nvar gt = mt;\nfunction Pt(r, e) {\n  return r === e || r !== r && e !== e;\n}\nvar S = Pt,\n  $t = S;\nfunction bt(r, e) {\n  for (var t = r.length; t--;) if ($t(r[t][0], e)) return t;\n  return -1;\n}\nvar N = bt,\n  wt = N,\n  _t = Array.prototype,\n  Ct = _t.splice;\nfunction yt(r) {\n  var e = this.__data__,\n    t = wt(e, r);\n  if (t < 0) return !1;\n  var s = e.length - 1;\n  return t == s ? e.pop() : Ct.call(e, t, 1), --this.size, !0;\n}\nvar It = yt,\n  Ot = N;\nfunction At(r) {\n  var e = this.__data__,\n    t = Ot(e, r);\n  return t < 0 ? void 0 : e[t][1];\n}\nvar Ht = At,\n  Et = N;\nfunction jt(r) {\n  return Et(this.__data__, r) > -1;\n}\nvar St = jt,\n  Nt = N;\nfunction Tt(r, e) {\n  var t = this.__data__,\n    s = Nt(t, r);\n  return s < 0 ? (++this.size, t.push([r, e])) : t[s][1] = e, this;\n}\nvar Dt = Tt,\n  qt = gt,\n  Rt = It,\n  xt = Ht,\n  Lt = St,\n  Ut = Dt;\nfunction _(r) {\n  var e = -1,\n    t = r == null ? 0 : r.length;\n  for (this.clear(); ++e < t;) {\n    var s = r[e];\n    this.set(s[0], s[1]);\n  }\n}\n_.prototype.clear = qt, _.prototype.delete = Rt, _.prototype.get = xt, _.prototype.has = Lt, _.prototype.set = Ut;\nvar T = _,\n  Mt = T;\nfunction Ft() {\n  this.__data__ = new Mt(), this.size = 0;\n}\nvar Gt = Ft;\nfunction zt(r) {\n  var e = this.__data__,\n    t = e.delete(r);\n  return this.size = e.size, t;\n}\nvar kt = zt;\nfunction Bt(r) {\n  return this.__data__.get(r);\n}\nvar Vt = Bt;\nfunction Jt(r) {\n  return this.__data__.has(r);\n}\nvar Kt = Jt,\n  Xt = typeof j == \"object\" && j && j.Object === Object && j,\n  ce = Xt,\n  Wt = ce,\n  Yt = typeof self == \"object\" && self && self.Object === Object && self,\n  Zt = Wt || Yt || Function(\"return this\")(),\n  C = Zt,\n  Qt = C,\n  er = Qt.Symbol,\n  he = er,\n  pe = he,\n  ue = Object.prototype,\n  tr = ue.hasOwnProperty,\n  rr = ue.toString,\n  H = pe ? pe.toStringTag : void 0;\nfunction sr(r) {\n  var e = tr.call(r, H),\n    t = r[H];\n  try {\n    r[H] = void 0;\n    var s = !0;\n  } catch {}\n  var i = rr.call(r);\n  return s && (e ? r[H] = t : delete r[H]), i;\n}\nvar ir = sr,\n  nr = Object.prototype,\n  ar = nr.toString;\nfunction or(r) {\n  return ar.call(r);\n}\nvar cr = or,\n  de = he,\n  hr = ir,\n  pr = cr,\n  ur = \"[object Null]\",\n  dr = \"[object Undefined]\",\n  le = de ? de.toStringTag : void 0;\nfunction lr(r) {\n  return r == null ? r === void 0 ? dr : ur : le && le in Object(r) ? hr(r) : pr(r);\n}\nvar D = lr;\nfunction vr(r) {\n  var e = typeof r;\n  return r != null && (e == \"object\" || e == \"function\");\n}\nvar $ = vr,\n  fr = D,\n  mr = $,\n  gr = \"[object AsyncFunction]\",\n  Pr = \"[object Function]\",\n  $r = \"[object GeneratorFunction]\",\n  br = \"[object Proxy]\";\nfunction wr(r) {\n  if (!mr(r)) return !1;\n  var e = fr(r);\n  return e == Pr || e == $r || e == gr || e == br;\n}\nvar z = wr,\n  _r = C,\n  Cr = _r[\"__core-js_shared__\"],\n  yr = Cr,\n  k = yr,\n  ve = function () {\n    var r = /[^.]+$/.exec(k && k.keys && k.keys.IE_PROTO || \"\");\n    return r ? \"Symbol(src)_1.\" + r : \"\";\n  }();\nfunction Ir(r) {\n  return !!ve && ve in r;\n}\nvar Or = Ir,\n  Ar = Function.prototype,\n  Hr = Ar.toString;\nfunction Er(r) {\n  if (r != null) {\n    try {\n      return Hr.call(r);\n    } catch {}\n    try {\n      return r + \"\";\n    } catch {}\n  }\n  return \"\";\n}\nvar jr = Er,\n  Sr = z,\n  Nr = Or,\n  Tr = $,\n  Dr = jr,\n  qr = /[\\\\^$.*+?()[\\]{}|]/g,\n  Rr = /^\\[object .+?Constructor\\]$/,\n  xr = Function.prototype,\n  Lr = Object.prototype,\n  Ur = xr.toString,\n  Mr = Lr.hasOwnProperty,\n  Fr = RegExp(\"^\" + Ur.call(Mr).replace(qr, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\nfunction Gr(r) {\n  if (!Tr(r) || Nr(r)) return !1;\n  var e = Sr(r) ? Fr : Rr;\n  return e.test(Dr(r));\n}\nvar zr = Gr;\nfunction kr(r, e) {\n  return r?.[e];\n}\nvar Br = kr,\n  Vr = zr,\n  Jr = Br;\nfunction Kr(r, e) {\n  var t = Jr(r, e);\n  return Vr(t) ? t : void 0;\n}\nvar B = Kr,\n  Xr = B,\n  Wr = C,\n  Yr = Xr(Wr, \"Map\"),\n  fe = Yr,\n  Zr = B,\n  Qr = Zr(Object, \"create\"),\n  q = Qr,\n  me = q;\nfunction es() {\n  this.__data__ = me ? me(null) : {}, this.size = 0;\n}\nvar ts = es;\nfunction rs(r) {\n  var e = this.has(r) && delete this.__data__[r];\n  return this.size -= e ? 1 : 0, e;\n}\nvar ss = rs,\n  is = q,\n  ns = \"__lodash_hash_undefined__\",\n  as = Object.prototype,\n  os = as.hasOwnProperty;\nfunction cs(r) {\n  var e = this.__data__;\n  if (is) {\n    var t = e[r];\n    return t === ns ? void 0 : t;\n  }\n  return os.call(e, r) ? e[r] : void 0;\n}\nvar hs = cs,\n  ps = q,\n  us = Object.prototype,\n  ds = us.hasOwnProperty;\nfunction ls(r) {\n  var e = this.__data__;\n  return ps ? e[r] !== void 0 : ds.call(e, r);\n}\nvar vs = ls,\n  fs = q,\n  ms = \"__lodash_hash_undefined__\";\nfunction gs(r, e) {\n  var t = this.__data__;\n  return this.size += this.has(r) ? 0 : 1, t[r] = fs && e === void 0 ? ms : e, this;\n}\nvar Ps = gs,\n  $s = ts,\n  bs = ss,\n  ws = hs,\n  _s = vs,\n  Cs = Ps;\nfunction y(r) {\n  var e = -1,\n    t = r == null ? 0 : r.length;\n  for (this.clear(); ++e < t;) {\n    var s = r[e];\n    this.set(s[0], s[1]);\n  }\n}\ny.prototype.clear = $s, y.prototype.delete = bs, y.prototype.get = ws, y.prototype.has = _s, y.prototype.set = Cs;\nvar ys = y,\n  ge = ys,\n  Is = T,\n  Os = fe;\nfunction As() {\n  this.size = 0, this.__data__ = {\n    hash: new ge(),\n    map: new (Os || Is)(),\n    string: new ge()\n  };\n}\nvar Hs = As;\nfunction Es(r) {\n  var e = typeof r;\n  return e == \"string\" || e == \"number\" || e == \"symbol\" || e == \"boolean\" ? r !== \"__proto__\" : r === null;\n}\nvar js = Es,\n  Ss = js;\nfunction Ns(r, e) {\n  var t = r.__data__;\n  return Ss(e) ? t[typeof e == \"string\" ? \"string\" : \"hash\"] : t.map;\n}\nvar R = Ns,\n  Ts = R;\nfunction Ds(r) {\n  var e = Ts(this, r).delete(r);\n  return this.size -= e ? 1 : 0, e;\n}\nvar qs = Ds,\n  Rs = R;\nfunction xs(r) {\n  return Rs(this, r).get(r);\n}\nvar Ls = xs,\n  Us = R;\nfunction Ms(r) {\n  return Us(this, r).has(r);\n}\nvar Fs = Ms,\n  Gs = R;\nfunction zs(r, e) {\n  var t = Gs(this, r),\n    s = t.size;\n  return t.set(r, e), this.size += t.size == s ? 0 : 1, this;\n}\nvar ks = zs,\n  Bs = Hs,\n  Vs = qs,\n  Js = Ls,\n  Ks = Fs,\n  Xs = ks;\nfunction I(r) {\n  var e = -1,\n    t = r == null ? 0 : r.length;\n  for (this.clear(); ++e < t;) {\n    var s = r[e];\n    this.set(s[0], s[1]);\n  }\n}\nI.prototype.clear = Bs, I.prototype.delete = Vs, I.prototype.get = Js, I.prototype.has = Ks, I.prototype.set = Xs;\nvar Ws = I,\n  Ys = T,\n  Zs = fe,\n  Qs = Ws,\n  ei = 200;\nfunction ti(r, e) {\n  var t = this.__data__;\n  if (t instanceof Ys) {\n    var s = t.__data__;\n    if (!Zs || s.length < ei - 1) return s.push([r, e]), this.size = ++t.size, this;\n    t = this.__data__ = new Qs(s);\n  }\n  return t.set(r, e), this.size = t.size, this;\n}\nvar ri = ti,\n  si = T,\n  ii = Gt,\n  ni = kt,\n  ai = Vt,\n  oi = Kt,\n  ci = ri;\nfunction O(r) {\n  var e = this.__data__ = new si(r);\n  this.size = e.size;\n}\nO.prototype.clear = ii, O.prototype.delete = ni, O.prototype.get = ai, O.prototype.has = oi, O.prototype.set = ci;\nvar hi = O,\n  pi = B,\n  ui = function () {\n    try {\n      var r = pi(Object, \"defineProperty\");\n      return r({}, \"\", {}), r;\n    } catch {}\n  }(),\n  Pe = ui,\n  $e = Pe;\nfunction di(r, e, t) {\n  e == \"__proto__\" && $e ? $e(r, e, {\n    configurable: !0,\n    enumerable: !0,\n    value: t,\n    writable: !0\n  }) : r[e] = t;\n}\nvar V = di,\n  li = V,\n  vi = S;\nfunction fi(r, e, t) {\n  (t !== void 0 && !vi(r[e], t) || t === void 0 && !(e in r)) && li(r, e, t);\n}\nvar be = fi;\nfunction mi(r) {\n  return function (e, t, s) {\n    for (var i = -1, n = Object(e), a = s(e), o = a.length; o--;) {\n      var c = a[r ? o : ++i];\n      if (t(n[c], c, n) === !1) break;\n    }\n    return e;\n  };\n}\nvar gi = mi,\n  Pi = gi,\n  $i = Pi(),\n  bi = $i,\n  J = {\n    exports: {}\n  };\n(function (r, e) {\n  var t = C,\n    s = e && !e.nodeType && e,\n    i = s && !0 && r && !r.nodeType && r,\n    n = i && i.exports === s,\n    a = n ? t.Buffer : void 0,\n    o = a ? a.allocUnsafe : void 0;\n  function c(u, d) {\n    if (d) return u.slice();\n    var g = u.length,\n      l = o ? o(g) : new u.constructor(g);\n    return u.copy(l), l;\n  }\n  r.exports = c;\n})(J, J.exports);\nvar wi = C,\n  _i = wi.Uint8Array,\n  Ci = _i,\n  we = Ci;\nfunction yi(r) {\n  var e = new r.constructor(r.byteLength);\n  return new we(e).set(new we(r)), e;\n}\nvar Ii = yi,\n  Oi = Ii;\nfunction Ai(r, e) {\n  var t = e ? Oi(r.buffer) : r.buffer;\n  return new r.constructor(t, r.byteOffset, r.length);\n}\nvar Hi = Ai;\nfunction Ei(r, e) {\n  var t = -1,\n    s = r.length;\n  for (e || (e = Array(s)); ++t < s;) e[t] = r[t];\n  return e;\n}\nvar ji = Ei,\n  Si = $,\n  _e = Object.create,\n  Ni = function () {\n    function r() {}\n    return function (e) {\n      if (!Si(e)) return {};\n      if (_e) return _e(e);\n      r.prototype = e;\n      var t = new r();\n      return r.prototype = void 0, t;\n    };\n  }(),\n  Ti = Ni;\nfunction Di(r, e) {\n  return function (t) {\n    return r(e(t));\n  };\n}\nvar qi = Di,\n  Ri = qi,\n  xi = Ri(Object.getPrototypeOf, Object),\n  Ce = xi,\n  Li = Object.prototype;\nfunction Ui(r) {\n  var e = r && r.constructor,\n    t = typeof e == \"function\" && e.prototype || Li;\n  return r === t;\n}\nvar ye = Ui,\n  Mi = Ti,\n  Fi = Ce,\n  Gi = ye;\nfunction zi(r) {\n  return typeof r.constructor == \"function\" && !Gi(r) ? Mi(Fi(r)) : {};\n}\nvar ki = zi;\nfunction Bi(r) {\n  return r != null && typeof r == \"object\";\n}\nvar E = Bi,\n  Vi = D,\n  Ji = E,\n  Ki = \"[object Arguments]\";\nfunction Xi(r) {\n  return Ji(r) && Vi(r) == Ki;\n}\nvar Wi = Xi,\n  Ie = Wi,\n  Yi = E,\n  Oe = Object.prototype,\n  Zi = Oe.hasOwnProperty,\n  Qi = Oe.propertyIsEnumerable,\n  en = Ie(function () {\n    return arguments;\n  }()) ? Ie : function (r) {\n    return Yi(r) && Zi.call(r, \"callee\") && !Qi.call(r, \"callee\");\n  },\n  Ae = en,\n  tn = Array.isArray,\n  He = tn,\n  rn = 9007199254740991;\nfunction sn(r) {\n  return typeof r == \"number\" && r > -1 && r % 1 == 0 && r <= rn;\n}\nvar Ee = sn,\n  nn = z,\n  an = Ee;\nfunction on(r) {\n  return r != null && an(r.length) && !nn(r);\n}\nvar K = on,\n  cn = K,\n  hn = E;\nfunction pn(r) {\n  return hn(r) && cn(r);\n}\nvar un = pn,\n  x = {\n    exports: {}\n  };\nfunction dn() {\n  return !1;\n}\nvar ln = dn;\n(function (r, e) {\n  var t = C,\n    s = ln,\n    i = e && !e.nodeType && e,\n    n = i && !0 && r && !r.nodeType && r,\n    a = n && n.exports === i,\n    o = a ? t.Buffer : void 0,\n    c = o ? o.isBuffer : void 0,\n    u = c || s;\n  r.exports = u;\n})(x, x.exports);\nvar vn = D,\n  fn = Ce,\n  mn = E,\n  gn = \"[object Object]\",\n  Pn = Function.prototype,\n  $n = Object.prototype,\n  je = Pn.toString,\n  bn = $n.hasOwnProperty,\n  wn = je.call(Object);\nfunction _n(r) {\n  if (!mn(r) || vn(r) != gn) return !1;\n  var e = fn(r);\n  if (e === null) return !0;\n  var t = bn.call(e, \"constructor\") && e.constructor;\n  return typeof t == \"function\" && t instanceof t && je.call(t) == wn;\n}\nvar Cn = _n,\n  yn = D,\n  In = Ee,\n  On = E,\n  An = \"[object Arguments]\",\n  Hn = \"[object Array]\",\n  En = \"[object Boolean]\",\n  jn = \"[object Date]\",\n  Sn = \"[object Error]\",\n  Nn = \"[object Function]\",\n  Tn = \"[object Map]\",\n  Dn = \"[object Number]\",\n  qn = \"[object Object]\",\n  Rn = \"[object RegExp]\",\n  xn = \"[object Set]\",\n  Ln = \"[object String]\",\n  Un = \"[object WeakMap]\",\n  Mn = \"[object ArrayBuffer]\",\n  Fn = \"[object DataView]\",\n  Gn = \"[object Float32Array]\",\n  zn = \"[object Float64Array]\",\n  kn = \"[object Int8Array]\",\n  Bn = \"[object Int16Array]\",\n  Vn = \"[object Int32Array]\",\n  Jn = \"[object Uint8Array]\",\n  Kn = \"[object Uint8ClampedArray]\",\n  Xn = \"[object Uint16Array]\",\n  Wn = \"[object Uint32Array]\",\n  p = {};\np[Gn] = p[zn] = p[kn] = p[Bn] = p[Vn] = p[Jn] = p[Kn] = p[Xn] = p[Wn] = !0, p[An] = p[Hn] = p[Mn] = p[En] = p[Fn] = p[jn] = p[Sn] = p[Nn] = p[Tn] = p[Dn] = p[qn] = p[Rn] = p[xn] = p[Ln] = p[Un] = !1;\nfunction Yn(r) {\n  return On(r) && In(r.length) && !!p[yn(r)];\n}\nvar Zn = Yn;\nfunction Qn(r) {\n  return function (e) {\n    return r(e);\n  };\n}\nvar ea = Qn,\n  X = {\n    exports: {}\n  };\n(function (r, e) {\n  var t = ce,\n    s = e && !e.nodeType && e,\n    i = s && !0 && r && !r.nodeType && r,\n    n = i && i.exports === s,\n    a = n && t.process,\n    o = function () {\n      try {\n        var c = i && i.require && i.require(\"util\").types;\n        return c || a && a.binding && a.binding(\"util\");\n      } catch {}\n    }();\n  r.exports = o;\n})(X, X.exports);\nvar ta = Zn,\n  ra = ea,\n  Se = X.exports,\n  Ne = Se && Se.isTypedArray,\n  sa = Ne ? ra(Ne) : ta,\n  Te = sa;\nfunction ia(r, e) {\n  if (!(e === \"constructor\" && typeof r[e] == \"function\") && e != \"__proto__\") return r[e];\n}\nvar De = ia,\n  na = V,\n  aa = S,\n  oa = Object.prototype,\n  ca = oa.hasOwnProperty;\nfunction ha(r, e, t) {\n  var s = r[e];\n  (!(ca.call(r, e) && aa(s, t)) || t === void 0 && !(e in r)) && na(r, e, t);\n}\nvar pa = ha,\n  ua = pa,\n  da = V;\nfunction la(r, e, t, s) {\n  var i = !t;\n  t || (t = {});\n  for (var n = -1, a = e.length; ++n < a;) {\n    var o = e[n],\n      c = s ? s(t[o], r[o], o, t, r) : void 0;\n    c === void 0 && (c = r[o]), i ? da(t, o, c) : ua(t, o, c);\n  }\n  return t;\n}\nvar va = la;\nfunction fa(r, e) {\n  for (var t = -1, s = Array(r); ++t < r;) s[t] = e(t);\n  return s;\n}\nvar ma = fa,\n  ga = 9007199254740991,\n  Pa = /^(?:0|[1-9]\\d*)$/;\nfunction $a(r, e) {\n  var t = typeof r;\n  return e = e ?? ga, !!e && (t == \"number\" || t != \"symbol\" && Pa.test(r)) && r > -1 && r % 1 == 0 && r < e;\n}\nvar qe = $a,\n  ba = ma,\n  wa = Ae,\n  _a = He,\n  Ca = x.exports,\n  ya = qe,\n  Ia = Te,\n  Oa = Object.prototype,\n  Aa = Oa.hasOwnProperty;\nfunction Ha(r, e) {\n  var t = _a(r),\n    s = !t && wa(r),\n    i = !t && !s && Ca(r),\n    n = !t && !s && !i && Ia(r),\n    a = t || s || i || n,\n    o = a ? ba(r.length, String) : [],\n    c = o.length;\n  for (var u in r) (e || Aa.call(r, u)) && !(a && (u == \"length\" || i && (u == \"offset\" || u == \"parent\") || n && (u == \"buffer\" || u == \"byteLength\" || u == \"byteOffset\") || ya(u, c))) && o.push(u);\n  return o;\n}\nvar Ea = Ha;\nfunction ja(r) {\n  var e = [];\n  if (r != null) for (var t in Object(r)) e.push(t);\n  return e;\n}\nvar Sa = ja,\n  Na = $,\n  Ta = ye,\n  Da = Sa,\n  qa = Object.prototype,\n  Ra = qa.hasOwnProperty;\nfunction xa(r) {\n  if (!Na(r)) return Da(r);\n  var e = Ta(r),\n    t = [];\n  for (var s in r) s == \"constructor\" && (e || !Ra.call(r, s)) || t.push(s);\n  return t;\n}\nvar La = xa,\n  Ua = Ea,\n  Ma = La,\n  Fa = K;\nfunction Ga(r) {\n  return Fa(r) ? Ua(r, !0) : Ma(r);\n}\nvar Re = Ga,\n  za = va,\n  ka = Re;\nfunction Ba(r) {\n  return za(r, ka(r));\n}\nvar Va = Ba,\n  xe = be,\n  Ja = J.exports,\n  Ka = Hi,\n  Xa = ji,\n  Wa = ki,\n  Le = Ae,\n  Ue = He,\n  Ya = un,\n  Za = x.exports,\n  Qa = z,\n  eo = $,\n  to = Cn,\n  ro = Te,\n  Me = De,\n  so = Va;\nfunction io(r, e, t, s, i, n, a) {\n  var o = Me(r, t),\n    c = Me(e, t),\n    u = a.get(c);\n  if (u) {\n    xe(r, t, u);\n    return;\n  }\n  var d = n ? n(o, c, t + \"\", r, e, a) : void 0,\n    g = d === void 0;\n  if (g) {\n    var l = Ue(c),\n      F = !l && Za(c),\n      ee = !l && !F && ro(c);\n    d = c, l || F || ee ? Ue(o) ? d = o : Ya(o) ? d = Xa(o) : F ? (g = !1, d = Ja(c, !0)) : ee ? (g = !1, d = Ka(c, !0)) : d = [] : to(c) || Le(c) ? (d = o, Le(o) ? d = so(o) : (!eo(o) || Qa(o)) && (d = Wa(c))) : g = !1;\n  }\n  g && (a.set(c, d), i(d, c, s, n, a), a.delete(c)), xe(r, t, d);\n}\nvar no = io,\n  ao = hi,\n  oo = be,\n  co = bi,\n  ho = no,\n  po = $,\n  uo = Re,\n  lo = De;\nfunction Fe(r, e, t, s, i) {\n  r !== e && co(e, function (n, a) {\n    if (i || (i = new ao()), po(n)) ho(r, e, a, t, Fe, s, i);else {\n      var o = s ? s(lo(r, a), n, a + \"\", r, e, i) : void 0;\n      o === void 0 && (o = n), oo(r, a, o);\n    }\n  }, uo);\n}\nvar vo = Fe;\nfunction fo(r) {\n  return r;\n}\nvar Ge = fo;\nfunction mo(r, e, t) {\n  switch (t.length) {\n    case 0:\n      return r.call(e);\n    case 1:\n      return r.call(e, t[0]);\n    case 2:\n      return r.call(e, t[0], t[1]);\n    case 3:\n      return r.call(e, t[0], t[1], t[2]);\n  }\n  return r.apply(e, t);\n}\nvar go = mo,\n  Po = go,\n  ze = Math.max;\nfunction $o(r, e, t) {\n  return e = ze(e === void 0 ? r.length - 1 : e, 0), function () {\n    for (var s = arguments, i = -1, n = ze(s.length - e, 0), a = Array(n); ++i < n;) a[i] = s[e + i];\n    i = -1;\n    for (var o = Array(e + 1); ++i < e;) o[i] = s[i];\n    return o[e] = t(a), Po(r, this, o);\n  };\n}\nvar bo = $o;\nfunction wo(r) {\n  return function () {\n    return r;\n  };\n}\nvar _o = wo,\n  Co = _o,\n  ke = Pe,\n  yo = Ge,\n  Io = ke ? function (r, e) {\n    return ke(r, \"toString\", {\n      configurable: !0,\n      enumerable: !1,\n      value: Co(e),\n      writable: !0\n    });\n  } : yo,\n  Oo = Io,\n  Ao = 800,\n  Ho = 16,\n  Eo = Date.now;\nfunction jo(r) {\n  var e = 0,\n    t = 0;\n  return function () {\n    var s = Eo(),\n      i = Ho - (s - t);\n    if (t = s, i > 0) {\n      if (++e >= Ao) return arguments[0];\n    } else e = 0;\n    return r.apply(void 0, arguments);\n  };\n}\nvar So = jo,\n  No = Oo,\n  To = So,\n  Do = To(No),\n  qo = Do,\n  Ro = Ge,\n  xo = bo,\n  Lo = qo;\nfunction Uo(r, e) {\n  return Lo(xo(r, e, Ro), r + \"\");\n}\nvar Mo = Uo,\n  Fo = S,\n  Go = K,\n  zo = qe,\n  ko = $;\nfunction Bo(r, e, t) {\n  if (!ko(t)) return !1;\n  var s = typeof e;\n  return (s == \"number\" ? Go(t) && zo(e, t.length) : s == \"string\" && e in t) ? Fo(t[e], r) : !1;\n}\nvar Vo = Bo,\n  Jo = Mo,\n  Ko = Vo;\nfunction Xo(r) {\n  return Jo(function (e, t) {\n    var s = -1,\n      i = t.length,\n      n = i > 1 ? t[i - 1] : void 0,\n      a = i > 2 ? t[2] : void 0;\n    for (n = r.length > 3 && typeof n == \"function\" ? (i--, n) : void 0, a && Ko(t[0], t[1], a) && (n = i < 3 ? void 0 : n, i = 1), e = Object(e); ++s < i;) {\n      var o = t[s];\n      o && r(e, o, s, n);\n    }\n    return e;\n  });\n}\nvar Wo = Xo,\n  Yo = vo,\n  Zo = Wo,\n  Qo = Zo(function (r, e, t) {\n    Yo(r, e, t);\n  }),\n  ec = Qo,\n  tc = Object.defineProperty,\n  rc = Object.defineProperties,\n  sc = Object.getOwnPropertyDescriptors,\n  Be = Object.getOwnPropertySymbols,\n  ic = Object.prototype.hasOwnProperty,\n  nc = Object.prototype.propertyIsEnumerable,\n  Ve = (r, e, t) => e in r ? tc(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  L = (r, e) => {\n    for (var t in e || (e = {})) ic.call(e, t) && Ve(r, t, e[t]);\n    if (Be) for (var t of Be(e)) nc.call(e, t) && Ve(r, t, e[t]);\n    return r;\n  },\n  ac = (r, e) => rc(r, sc(e));\nfunction v(r, e, t) {\n  var s;\n  const i = re(r);\n  return ((s = e.rpcMap) == null ? void 0 : s[i.reference]) || `${oe}?chainId=${i.namespace}:${i.reference}&projectId=${t}`;\n}\nfunction b(r) {\n  return r.includes(\":\") ? r.split(\":\")[1] : r;\n}\nfunction Je(r) {\n  return r.map(e => `${e.split(\":\")[0]}:${e.split(\":\")[1]}`);\n}\nfunction oc(r, e) {\n  const t = Object.keys(e.namespaces).filter(i => i.includes(r));\n  if (!t.length) return [];\n  const s = [];\n  return t.forEach(i => {\n    const n = e.namespaces[i].accounts;\n    s.push(...n);\n  }), s;\n}\nfunction W(r = {}, e = {}) {\n  const t = Ke(r),\n    s = Ke(e);\n  return ec(t, s);\n}\nfunction Ke(r) {\n  var e, t, s, i;\n  const n = {};\n  if (!nt(r)) return n;\n  for (const [a, o] of Object.entries(r)) {\n    const c = te(a) ? [a] : o.chains,\n      u = o.methods || [],\n      d = o.events || [],\n      g = o.rpcMap || {},\n      l = A(a);\n    n[l] = ac(L(L({}, n[l]), o), {\n      chains: G(c, (e = n[l]) == null ? void 0 : e.chains),\n      methods: G(u, (t = n[l]) == null ? void 0 : t.methods),\n      events: G(d, (s = n[l]) == null ? void 0 : s.events),\n      rpcMap: L(L({}, g), (i = n[l]) == null ? void 0 : i.rpcMap)\n    });\n  }\n  return n;\n}\nfunction cc(r) {\n  return r.includes(\":\") ? r.split(\":\")[2] : r;\n}\nfunction Xe(r) {\n  const e = {};\n  for (const [t, s] of Object.entries(r)) {\n    const i = s.methods || [],\n      n = s.events || [],\n      a = s.accounts || [],\n      o = te(t) ? [t] : s.chains ? s.chains : Je(s.accounts);\n    e[t] = {\n      chains: o,\n      methods: i,\n      events: n,\n      accounts: a\n    };\n  }\n  return e;\n}\nfunction Y(r) {\n  return typeof r == \"number\" ? r : r.includes(\"0x\") ? parseInt(r, 16) : (r = r.includes(\":\") ? r.split(\":\")[1] : r, isNaN(Number(r)) ? r : Number(r));\n}\nconst We = {},\n  h = r => We[r],\n  Z = (r, e) => {\n    We[r] = e;\n  };\nclass hc {\n  constructor(e) {\n    this.name = \"polkadot\", this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(e) {\n    this.namespace = Object.assign(this.namespace, e);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const e = this.namespace.chains[0];\n    if (!e) throw new Error(\"ChainId not found\");\n    return e.split(\":\")[1];\n  }\n  request(e) {\n    return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n  }\n  setDefaultChain(e, t) {\n    this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${e}`);\n  }\n  getAccounts() {\n    const e = this.namespace.accounts;\n    return e ? e.filter(t => t.split(\":\")[1] === this.chainId.toString()).map(t => t.split(\":\")[2]) || [] : [];\n  }\n  createHttpProviders() {\n    const e = {};\n    return this.namespace.chains.forEach(t => {\n      var s;\n      const i = b(t);\n      e[i] = this.createHttpProvider(i, (s = this.namespace.rpcMap) == null ? void 0 : s[t]);\n    }), e;\n  }\n  getHttpProvider() {\n    const e = `${this.name}:${this.chainId}`,\n      t = this.httpProviders[e];\n    if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n    return t;\n  }\n  setHttpProvider(e, t) {\n    const s = this.createHttpProvider(e, t);\n    s && (this.httpProviders[e] = s);\n  }\n  createHttpProvider(e, t) {\n    const s = t || v(e, this.namespace, this.client.core.projectId);\n    if (!s) throw new Error(`No RPC url provided for chainId: ${e}`);\n    return new m(new P(s, h(\"disableProviderPing\")));\n  }\n}\nvar pc = Object.defineProperty,\n  uc = Object.defineProperties,\n  dc = Object.getOwnPropertyDescriptors,\n  Ye = Object.getOwnPropertySymbols,\n  lc = Object.prototype.hasOwnProperty,\n  vc = Object.prototype.propertyIsEnumerable,\n  Ze = (r, e, t) => e in r ? pc(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  Qe = (r, e) => {\n    for (var t in e || (e = {})) lc.call(e, t) && Ze(r, t, e[t]);\n    if (Ye) for (var t of Ye(e)) vc.call(e, t) && Ze(r, t, e[t]);\n    return r;\n  },\n  et = (r, e) => uc(r, dc(e));\nclass fc {\n  constructor(e) {\n    this.name = \"eip155\", this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());\n  }\n  async request(e) {\n    switch (e.request.method) {\n      case \"eth_requestAccounts\":\n        return this.getAccounts();\n      case \"eth_accounts\":\n        return this.getAccounts();\n      case \"wallet_switchEthereumChain\":\n        return await this.handleSwitchChain(e);\n      case \"eth_chainId\":\n        return parseInt(this.getDefaultChain());\n      case \"wallet_getCapabilities\":\n        return await this.getCapabilities(e);\n      case \"wallet_getCallsStatus\":\n        return await this.getCallStatus(e);\n    }\n    return this.namespace.methods.includes(e.request.method) ? await this.client.request(e) : this.getHttpProvider().request(e.request);\n  }\n  updateNamespace(e) {\n    this.namespace = Object.assign(this.namespace, e);\n  }\n  setDefaultChain(e, t) {\n    this.httpProviders[e] || this.setHttpProvider(parseInt(e), t), this.chainId = parseInt(e), this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${e}`);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId.toString();\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const e = this.namespace.chains[0];\n    if (!e) throw new Error(\"ChainId not found\");\n    return e.split(\":\")[1];\n  }\n  createHttpProvider(e, t) {\n    const s = t || v(`${this.name}:${e}`, this.namespace, this.client.core.projectId);\n    if (!s) throw new Error(`No RPC url provided for chainId: ${e}`);\n    return new m(new ct(s, h(\"disableProviderPing\")));\n  }\n  setHttpProvider(e, t) {\n    const s = this.createHttpProvider(e, t);\n    s && (this.httpProviders[e] = s);\n  }\n  createHttpProviders() {\n    const e = {};\n    return this.namespace.chains.forEach(t => {\n      var s;\n      const i = parseInt(b(t));\n      e[i] = this.createHttpProvider(i, (s = this.namespace.rpcMap) == null ? void 0 : s[t]);\n    }), e;\n  }\n  getAccounts() {\n    const e = this.namespace.accounts;\n    return e ? [...new Set(e.filter(t => t.split(\":\")[1] === this.chainId.toString()).map(t => t.split(\":\")[2]))] : [];\n  }\n  getHttpProvider() {\n    const e = this.chainId,\n      t = this.httpProviders[e];\n    if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n    return t;\n  }\n  async handleSwitchChain(e) {\n    var t, s;\n    let i = e.request.params ? (t = e.request.params[0]) == null ? void 0 : t.chainId : \"0x0\";\n    i = i.startsWith(\"0x\") ? i : `0x${i}`;\n    const n = parseInt(i, 16);\n    if (this.isChainApproved(n)) this.setDefaultChain(`${n}`);else if (this.namespace.methods.includes(\"wallet_switchEthereumChain\")) await this.client.request({\n      topic: e.topic,\n      request: {\n        method: e.request.method,\n        params: [{\n          chainId: i\n        }]\n      },\n      chainId: (s = this.namespace.chains) == null ? void 0 : s[0]\n    }), this.setDefaultChain(`${n}`);else throw new Error(`Failed to switch to chain 'eip155:${n}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);\n    return null;\n  }\n  isChainApproved(e) {\n    return this.namespace.chains.includes(`${this.name}:${e}`);\n  }\n  async getCapabilities(e) {\n    var t, s, i;\n    const n = (s = (t = e.request) == null ? void 0 : t.params) == null ? void 0 : s[0];\n    if (!n) throw new Error(\"Missing address parameter in `wallet_getCapabilities` request\");\n    const a = this.client.session.get(e.topic),\n      o = ((i = a?.sessionProperties) == null ? void 0 : i.capabilities) || {};\n    if (o != null && o[n]) return o?.[n];\n    const c = await this.client.request(e);\n    try {\n      await this.client.session.update(e.topic, {\n        sessionProperties: et(Qe({}, a.sessionProperties || {}), {\n          capabilities: et(Qe({}, o || {}), {\n            [n]: c\n          })\n        })\n      });\n    } catch (u) {\n      console.warn(\"Failed to update session with capabilities\", u);\n    }\n    return c;\n  }\n  async getCallStatus(e) {\n    var t, s;\n    const i = this.client.session.get(e.topic),\n      n = (t = i.sessionProperties) == null ? void 0 : t.bundler_name;\n    if (n) {\n      const o = this.getBundlerUrl(e.chainId, n);\n      try {\n        return await this.getUserOperationReceipt(o, e);\n      } catch (c) {\n        console.warn(\"Failed to fetch call status from bundler\", c, o);\n      }\n    }\n    const a = (s = i.sessionProperties) == null ? void 0 : s.bundler_url;\n    if (a) try {\n      return await this.getUserOperationReceipt(a, e);\n    } catch (o) {\n      console.warn(\"Failed to fetch call status from custom bundler\", o, a);\n    }\n    if (this.namespace.methods.includes(e.request.method)) return await this.client.request(e);\n    throw new Error(\"Fetching call status not approved by the wallet.\");\n  }\n  async getUserOperationReceipt(e, t) {\n    var s;\n    const i = new URL(e),\n      n = await fetch(i, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(ht(\"eth_getUserOperationReceipt\", [(s = t.request.params) == null ? void 0 : s[0]]))\n      });\n    if (!n.ok) throw new Error(`Failed to fetch user operation receipt - ${n.status}`);\n    return await n.json();\n  }\n  getBundlerUrl(e, t) {\n    return `${ft}?projectId=${this.client.core.projectId}&chainId=${e}&bundler=${t}`;\n  }\n}\nclass mc {\n  constructor(e) {\n    this.name = \"solana\", this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(e) {\n    this.namespace = Object.assign(this.namespace, e);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  request(e) {\n    return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n  }\n  setDefaultChain(e, t) {\n    this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${e}`);\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const e = this.namespace.chains[0];\n    if (!e) throw new Error(\"ChainId not found\");\n    return e.split(\":\")[1];\n  }\n  getAccounts() {\n    const e = this.namespace.accounts;\n    return e ? [...new Set(e.filter(t => t.split(\":\")[1] === this.chainId.toString()).map(t => t.split(\":\")[2]))] : [];\n  }\n  createHttpProviders() {\n    const e = {};\n    return this.namespace.chains.forEach(t => {\n      var s;\n      const i = b(t);\n      e[i] = this.createHttpProvider(i, (s = this.namespace.rpcMap) == null ? void 0 : s[t]);\n    }), e;\n  }\n  getHttpProvider() {\n    const e = `${this.name}:${this.chainId}`,\n      t = this.httpProviders[e];\n    if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n    return t;\n  }\n  setHttpProvider(e, t) {\n    const s = this.createHttpProvider(e, t);\n    s && (this.httpProviders[e] = s);\n  }\n  createHttpProvider(e, t) {\n    const s = t || v(e, this.namespace, this.client.core.projectId);\n    if (!s) throw new Error(`No RPC url provided for chainId: ${e}`);\n    return new m(new P(s, h(\"disableProviderPing\")));\n  }\n}\nclass gc {\n  constructor(e) {\n    this.name = \"cosmos\", this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(e) {\n    this.namespace = Object.assign(this.namespace, e);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const e = this.namespace.chains[0];\n    if (!e) throw new Error(\"ChainId not found\");\n    return e.split(\":\")[1];\n  }\n  request(e) {\n    return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n  }\n  setDefaultChain(e, t) {\n    this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n  getAccounts() {\n    const e = this.namespace.accounts;\n    return e ? [...new Set(e.filter(t => t.split(\":\")[1] === this.chainId.toString()).map(t => t.split(\":\")[2]))] : [];\n  }\n  createHttpProviders() {\n    const e = {};\n    return this.namespace.chains.forEach(t => {\n      var s;\n      const i = b(t);\n      e[i] = this.createHttpProvider(i, (s = this.namespace.rpcMap) == null ? void 0 : s[t]);\n    }), e;\n  }\n  getHttpProvider() {\n    const e = `${this.name}:${this.chainId}`,\n      t = this.httpProviders[e];\n    if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n    return t;\n  }\n  setHttpProvider(e, t) {\n    const s = this.createHttpProvider(e, t);\n    s && (this.httpProviders[e] = s);\n  }\n  createHttpProvider(e, t) {\n    const s = t || v(e, this.namespace, this.client.core.projectId);\n    if (!s) throw new Error(`No RPC url provided for chainId: ${e}`);\n    return new m(new P(s, h(\"disableProviderPing\")));\n  }\n}\nclass Pc {\n  constructor(e) {\n    this.name = \"algorand\", this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(e) {\n    this.namespace = Object.assign(this.namespace, e);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  request(e) {\n    return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n  }\n  setDefaultChain(e, t) {\n    if (!this.httpProviders[e]) {\n      const s = t || v(`${this.name}:${e}`, this.namespace, this.client.core.projectId);\n      if (!s) throw new Error(`No RPC url provided for chainId: ${e}`);\n      this.setHttpProvider(e, s);\n    }\n    this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const e = this.namespace.chains[0];\n    if (!e) throw new Error(\"ChainId not found\");\n    return e.split(\":\")[1];\n  }\n  getAccounts() {\n    const e = this.namespace.accounts;\n    return e ? [...new Set(e.filter(t => t.split(\":\")[1] === this.chainId.toString()).map(t => t.split(\":\")[2]))] : [];\n  }\n  createHttpProviders() {\n    const e = {};\n    return this.namespace.chains.forEach(t => {\n      var s;\n      e[t] = this.createHttpProvider(t, (s = this.namespace.rpcMap) == null ? void 0 : s[t]);\n    }), e;\n  }\n  getHttpProvider() {\n    const e = `${this.name}:${this.chainId}`,\n      t = this.httpProviders[e];\n    if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n    return t;\n  }\n  setHttpProvider(e, t) {\n    const s = this.createHttpProvider(e, t);\n    s && (this.httpProviders[e] = s);\n  }\n  createHttpProvider(e, t) {\n    const s = t || v(e, this.namespace, this.client.core.projectId);\n    return typeof s > \"u\" ? void 0 : new m(new P(s, h(\"disableProviderPing\")));\n  }\n}\nclass $c {\n  constructor(e) {\n    this.name = \"cip34\", this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(e) {\n    this.namespace = Object.assign(this.namespace, e);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const e = this.namespace.chains[0];\n    if (!e) throw new Error(\"ChainId not found\");\n    return e.split(\":\")[1];\n  }\n  request(e) {\n    return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n  }\n  setDefaultChain(e, t) {\n    this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n  getAccounts() {\n    const e = this.namespace.accounts;\n    return e ? [...new Set(e.filter(t => t.split(\":\")[1] === this.chainId.toString()).map(t => t.split(\":\")[2]))] : [];\n  }\n  createHttpProviders() {\n    const e = {};\n    return this.namespace.chains.forEach(t => {\n      const s = this.getCardanoRPCUrl(t),\n        i = b(t);\n      e[i] = this.createHttpProvider(i, s);\n    }), e;\n  }\n  getHttpProvider() {\n    const e = `${this.name}:${this.chainId}`,\n      t = this.httpProviders[e];\n    if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n    return t;\n  }\n  getCardanoRPCUrl(e) {\n    const t = this.namespace.rpcMap;\n    if (t) return t[e];\n  }\n  setHttpProvider(e, t) {\n    const s = this.createHttpProvider(e, t);\n    s && (this.httpProviders[e] = s);\n  }\n  createHttpProvider(e, t) {\n    const s = t || this.getCardanoRPCUrl(e);\n    if (!s) throw new Error(`No RPC url provided for chainId: ${e}`);\n    return new m(new P(s, h(\"disableProviderPing\")));\n  }\n}\nclass bc {\n  constructor(e) {\n    this.name = \"elrond\", this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(e) {\n    this.namespace = Object.assign(this.namespace, e);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  request(e) {\n    return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n  }\n  setDefaultChain(e, t) {\n    this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${e}`);\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const e = this.namespace.chains[0];\n    if (!e) throw new Error(\"ChainId not found\");\n    return e.split(\":\")[1];\n  }\n  getAccounts() {\n    const e = this.namespace.accounts;\n    return e ? [...new Set(e.filter(t => t.split(\":\")[1] === this.chainId.toString()).map(t => t.split(\":\")[2]))] : [];\n  }\n  createHttpProviders() {\n    const e = {};\n    return this.namespace.chains.forEach(t => {\n      var s;\n      const i = b(t);\n      e[i] = this.createHttpProvider(i, (s = this.namespace.rpcMap) == null ? void 0 : s[t]);\n    }), e;\n  }\n  getHttpProvider() {\n    const e = `${this.name}:${this.chainId}`,\n      t = this.httpProviders[e];\n    if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n    return t;\n  }\n  setHttpProvider(e, t) {\n    const s = this.createHttpProvider(e, t);\n    s && (this.httpProviders[e] = s);\n  }\n  createHttpProvider(e, t) {\n    const s = t || v(e, this.namespace, this.client.core.projectId);\n    if (!s) throw new Error(`No RPC url provided for chainId: ${e}`);\n    return new m(new P(s, h(\"disableProviderPing\")));\n  }\n}\nclass wc {\n  constructor(e) {\n    this.name = \"multiversx\", this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(e) {\n    this.namespace = Object.assign(this.namespace, e);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  request(e) {\n    return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n  }\n  setDefaultChain(e, t) {\n    this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${e}`);\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const e = this.namespace.chains[0];\n    if (!e) throw new Error(\"ChainId not found\");\n    return e.split(\":\")[1];\n  }\n  getAccounts() {\n    const e = this.namespace.accounts;\n    return e ? [...new Set(e.filter(t => t.split(\":\")[1] === this.chainId.toString()).map(t => t.split(\":\")[2]))] : [];\n  }\n  createHttpProviders() {\n    const e = {};\n    return this.namespace.chains.forEach(t => {\n      var s;\n      const i = b(t);\n      e[i] = this.createHttpProvider(i, (s = this.namespace.rpcMap) == null ? void 0 : s[t]);\n    }), e;\n  }\n  getHttpProvider() {\n    const e = `${this.name}:${this.chainId}`,\n      t = this.httpProviders[e];\n    if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n    return t;\n  }\n  setHttpProvider(e, t) {\n    const s = this.createHttpProvider(e, t);\n    s && (this.httpProviders[e] = s);\n  }\n  createHttpProvider(e, t) {\n    const s = t || v(e, this.namespace, this.client.core.projectId);\n    if (!s) throw new Error(`No RPC url provided for chainId: ${e}`);\n    return new m(new P(s, h(\"disableProviderPing\")));\n  }\n}\nclass _c {\n  constructor(e) {\n    this.name = \"near\", this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(e) {\n    this.namespace = Object.assign(this.namespace, e);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const e = this.namespace.chains[0];\n    if (!e) throw new Error(\"ChainId not found\");\n    return e.split(\":\")[1];\n  }\n  request(e) {\n    return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n  }\n  setDefaultChain(e, t) {\n    if (this.chainId = e, !this.httpProviders[e]) {\n      const s = t || v(`${this.name}:${e}`, this.namespace);\n      if (!s) throw new Error(`No RPC url provided for chainId: ${e}`);\n      this.setHttpProvider(e, s);\n    }\n    this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n  getAccounts() {\n    const e = this.namespace.accounts;\n    return e ? e.filter(t => t.split(\":\")[1] === this.chainId.toString()).map(t => t.split(\":\")[2]) || [] : [];\n  }\n  createHttpProviders() {\n    const e = {};\n    return this.namespace.chains.forEach(t => {\n      var s;\n      e[t] = this.createHttpProvider(t, (s = this.namespace.rpcMap) == null ? void 0 : s[t]);\n    }), e;\n  }\n  getHttpProvider() {\n    const e = `${this.name}:${this.chainId}`,\n      t = this.httpProviders[e];\n    if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n    return t;\n  }\n  setHttpProvider(e, t) {\n    const s = this.createHttpProvider(e, t);\n    s && (this.httpProviders[e] = s);\n  }\n  createHttpProvider(e, t) {\n    const s = t || v(e, this.namespace);\n    return typeof s > \"u\" ? void 0 : new m(new P(s, h(\"disableProviderPing\")));\n  }\n}\nclass Cc {\n  constructor(e) {\n    this.name = \"tezos\", this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(e) {\n    this.namespace = Object.assign(this.namespace, e);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const e = this.namespace.chains[0];\n    if (!e) throw new Error(\"ChainId not found\");\n    return e.split(\":\")[1];\n  }\n  request(e) {\n    return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider().request(e.request);\n  }\n  setDefaultChain(e, t) {\n    if (this.chainId = e, !this.httpProviders[e]) {\n      const s = t || v(`${this.name}:${e}`, this.namespace);\n      if (!s) throw new Error(`No RPC url provided for chainId: ${e}`);\n      this.setHttpProvider(e, s);\n    }\n    this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n  getAccounts() {\n    const e = this.namespace.accounts;\n    return e ? e.filter(t => t.split(\":\")[1] === this.chainId.toString()).map(t => t.split(\":\")[2]) || [] : [];\n  }\n  createHttpProviders() {\n    const e = {};\n    return this.namespace.chains.forEach(t => {\n      e[t] = this.createHttpProvider(t);\n    }), e;\n  }\n  getHttpProvider() {\n    const e = `${this.name}:${this.chainId}`,\n      t = this.httpProviders[e];\n    if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n    return t;\n  }\n  setHttpProvider(e, t) {\n    const s = this.createHttpProvider(e, t);\n    s && (this.httpProviders[e] = s);\n  }\n  createHttpProvider(e, t) {\n    const s = t || v(e, this.namespace);\n    return typeof s > \"u\" ? void 0 : new m(new P(s));\n  }\n}\nclass yc {\n  constructor(e) {\n    this.name = w, this.namespace = e.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(e) {\n    this.namespace.chains = [...new Set((this.namespace.chains || []).concat(e.chains || []))], this.namespace.accounts = [...new Set((this.namespace.accounts || []).concat(e.accounts || []))], this.namespace.methods = [...new Set((this.namespace.methods || []).concat(e.methods || []))], this.namespace.events = [...new Set((this.namespace.events || []).concat(e.events || []))], this.httpProviders = this.createHttpProviders();\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  request(e) {\n    return this.namespace.methods.includes(e.request.method) ? this.client.request(e) : this.getHttpProvider(e.chainId).request(e.request);\n  }\n  setDefaultChain(e, t) {\n    this.httpProviders[e] || this.setHttpProvider(e, t), this.chainId = e, this.events.emit(f.DEFAULT_CHAIN_CHANGED, `${this.name}:${e}`);\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const e = this.namespace.chains[0];\n    if (!e) throw new Error(\"ChainId not found\");\n    return e.split(\":\")[1];\n  }\n  getAccounts() {\n    const e = this.namespace.accounts;\n    return e ? [...new Set(e.filter(t => t.split(\":\")[1] === this.chainId.toString()).map(t => t.split(\":\")[2]))] : [];\n  }\n  createHttpProviders() {\n    var e, t;\n    const s = {};\n    return (t = (e = this.namespace) == null ? void 0 : e.accounts) == null || t.forEach(i => {\n      const n = re(i);\n      s[`${n.namespace}:${n.reference}`] = this.createHttpProvider(i);\n    }), s;\n  }\n  getHttpProvider(e) {\n    const t = this.httpProviders[e];\n    if (typeof t > \"u\") throw new Error(`JSON-RPC provider for ${e} not found`);\n    return t;\n  }\n  setHttpProvider(e, t) {\n    const s = this.createHttpProvider(e, t);\n    s && (this.httpProviders[e] = s);\n  }\n  createHttpProvider(e, t) {\n    const s = t || v(e, this.namespace, this.client.core.projectId);\n    if (!s) throw new Error(`No RPC url provided for chainId: ${e}`);\n    return new m(new P(s, h(\"disableProviderPing\")));\n  }\n}\nvar Ic = Object.defineProperty,\n  Oc = Object.defineProperties,\n  Ac = Object.getOwnPropertyDescriptors,\n  tt = Object.getOwnPropertySymbols,\n  Hc = Object.prototype.hasOwnProperty,\n  Ec = Object.prototype.propertyIsEnumerable,\n  rt = (r, e, t) => e in r ? Ic(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  U = (r, e) => {\n    for (var t in e || (e = {})) Hc.call(e, t) && rt(r, t, e[t]);\n    if (tt) for (var t of tt(e)) Ec.call(e, t) && rt(r, t, e[t]);\n    return r;\n  },\n  Q = (r, e) => Oc(r, Ac(e));\nclass M {\n  constructor(e) {\n    this.events = new ut(), this.rpcProviders = {}, this.shouldAbortPairingAttempt = !1, this.maxPairingAttempts = 10, this.disableProviderPing = !1, this.providerOpts = e, this.logger = typeof e?.logger < \"u\" && typeof e?.logger != \"string\" ? e.logger : at(ot({\n      level: e?.logger || ne\n    })), this.disableProviderPing = e?.disableProviderPing || !1;\n  }\n  static async init(e) {\n    const t = new M(e);\n    return await t.initialize(), t;\n  }\n  async request(e, t, s) {\n    const [i, n] = this.validateChain(t);\n    if (!this.session) throw new Error(\"Please call connect() before request()\");\n    return await this.getProvider(i).request({\n      request: U({}, e),\n      chainId: `${i}:${n}`,\n      topic: this.session.topic,\n      expiry: s\n    });\n  }\n  sendAsync(e, t, s, i) {\n    const n = new Date().getTime();\n    this.request(e, s, i).then(a => t(null, pt(n, a))).catch(a => t(a, void 0));\n  }\n  async enable() {\n    if (!this.client) throw new Error(\"Sign Client not initialized\");\n    return this.session || (await this.connect({\n      namespaces: this.namespaces,\n      optionalNamespaces: this.optionalNamespaces,\n      sessionProperties: this.sessionProperties\n    })), await this.requestAccounts();\n  }\n  async disconnect() {\n    var e;\n    if (!this.session) throw new Error(\"Please call connect() before enable()\");\n    await this.client.disconnect({\n      topic: (e = this.session) == null ? void 0 : e.topic,\n      reason: se(\"USER_DISCONNECTED\")\n    }), await this.cleanup();\n  }\n  async connect(e) {\n    if (!this.client) throw new Error(\"Sign Client not initialized\");\n    if (this.setNamespaces(e), await this.cleanupPendingPairings(), !e.skipPairing) return await this.pair(e.pairingTopic);\n  }\n  async authenticate(e, t) {\n    if (!this.client) throw new Error(\"Sign Client not initialized\");\n    this.setNamespaces(e), await this.cleanupPendingPairings();\n    const {\n      uri: s,\n      response: i\n    } = await this.client.authenticate(e, t);\n    s && (this.uri = s, this.events.emit(\"display_uri\", s));\n    const n = await i();\n    if (this.session = n.session, this.session) {\n      const a = Xe(this.session.namespaces);\n      this.namespaces = W(this.namespaces, a), this.persist(\"namespaces\", this.namespaces), this.onConnect();\n    }\n    return n;\n  }\n  on(e, t) {\n    this.events.on(e, t);\n  }\n  once(e, t) {\n    this.events.once(e, t);\n  }\n  removeListener(e, t) {\n    this.events.removeListener(e, t);\n  }\n  off(e, t) {\n    this.events.off(e, t);\n  }\n  get isWalletConnect() {\n    return !0;\n  }\n  async pair(e) {\n    this.shouldAbortPairingAttempt = !1;\n    let t = 0;\n    do {\n      if (this.shouldAbortPairingAttempt) throw new Error(\"Pairing aborted\");\n      if (t >= this.maxPairingAttempts) throw new Error(\"Max auto pairing attempts reached\");\n      const {\n        uri: s,\n        approval: i\n      } = await this.client.connect({\n        pairingTopic: e,\n        requiredNamespaces: this.namespaces,\n        optionalNamespaces: this.optionalNamespaces,\n        sessionProperties: this.sessionProperties\n      });\n      s && (this.uri = s, this.events.emit(\"display_uri\", s)), await i().then(n => {\n        this.session = n;\n        const a = Xe(n.namespaces);\n        this.namespaces = W(this.namespaces, a), this.persist(\"namespaces\", this.namespaces);\n      }).catch(n => {\n        if (n.message !== it) throw n;\n        t++;\n      });\n    } while (!this.session);\n    return this.onConnect(), this.session;\n  }\n  setDefaultChain(e, t) {\n    try {\n      if (!this.session) return;\n      const [s, i] = this.validateChain(e),\n        n = this.getProvider(s);\n      n.name === w ? n.setDefaultChain(`${s}:${i}`, t) : n.setDefaultChain(i, t);\n    } catch (s) {\n      if (!/Please call connect/.test(s.message)) throw s;\n    }\n  }\n  async cleanupPendingPairings(e = {}) {\n    this.logger.info(\"Cleaning up inactive pairings...\");\n    const t = this.client.pairing.getAll();\n    if (ie(t)) {\n      for (const s of t) e.deletePairings ? this.client.core.expirer.set(s.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(s.topic);\n      this.logger.info(`Inactive pairings cleared: ${t.length}`);\n    }\n  }\n  abortPairingAttempt() {\n    this.shouldAbortPairingAttempt = !0;\n  }\n  async checkStorage() {\n    if (this.namespaces = await this.getFromStore(\"namespaces\"), this.optionalNamespaces = (await this.getFromStore(\"optionalNamespaces\")) || {}, this.client.session.length) {\n      const e = this.client.session.keys.length - 1;\n      this.session = this.client.session.get(this.client.session.keys[e]), this.createProviders();\n    }\n  }\n  async initialize() {\n    this.logger.trace(\"Initialized\"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();\n  }\n  async createClient() {\n    this.client = this.providerOpts.client || (await st.init({\n      core: this.providerOpts.core,\n      logger: this.providerOpts.logger || ne,\n      relayUrl: this.providerOpts.relayUrl || dt,\n      projectId: this.providerOpts.projectId,\n      metadata: this.providerOpts.metadata,\n      storageOptions: this.providerOpts.storageOptions,\n      storage: this.providerOpts.storage,\n      name: this.providerOpts.name,\n      customStoragePrefix: this.providerOpts.customStoragePrefix,\n      telemetryEnabled: this.providerOpts.telemetryEnabled\n    })), this.logger.trace(\"SignClient Initialized\");\n  }\n  createProviders() {\n    if (!this.client) throw new Error(\"Sign Client not initialized\");\n    if (!this.session) throw new Error(\"Session not initialized. Please call connect() before enable()\");\n    const e = [...new Set(Object.keys(this.session.namespaces).map(t => A(t)))];\n    Z(\"client\", this.client), Z(\"events\", this.events), Z(\"disableProviderPing\", this.disableProviderPing), e.forEach(t => {\n      if (!this.session) return;\n      const s = oc(t, this.session),\n        i = Je(s),\n        n = W(this.namespaces, this.optionalNamespaces),\n        a = Q(U({}, n[t]), {\n          accounts: s,\n          chains: i\n        });\n      switch (t) {\n        case \"eip155\":\n          this.rpcProviders[t] = new fc({\n            namespace: a\n          });\n          break;\n        case \"algorand\":\n          this.rpcProviders[t] = new Pc({\n            namespace: a\n          });\n          break;\n        case \"solana\":\n          this.rpcProviders[t] = new mc({\n            namespace: a\n          });\n          break;\n        case \"cosmos\":\n          this.rpcProviders[t] = new gc({\n            namespace: a\n          });\n          break;\n        case \"polkadot\":\n          this.rpcProviders[t] = new hc({\n            namespace: a\n          });\n          break;\n        case \"cip34\":\n          this.rpcProviders[t] = new $c({\n            namespace: a\n          });\n          break;\n        case \"elrond\":\n          this.rpcProviders[t] = new bc({\n            namespace: a\n          });\n          break;\n        case \"multiversx\":\n          this.rpcProviders[t] = new wc({\n            namespace: a\n          });\n          break;\n        case \"near\":\n          this.rpcProviders[t] = new _c({\n            namespace: a\n          });\n          break;\n        case \"tezos\":\n          this.rpcProviders[t] = new Cc({\n            namespace: a\n          });\n          break;\n        default:\n          this.rpcProviders[w] ? this.rpcProviders[w].updateNamespace(a) : this.rpcProviders[w] = new yc({\n            namespace: a\n          });\n      }\n    });\n  }\n  registerEventListeners() {\n    if (typeof this.client > \"u\") throw new Error(\"Sign Client is not initialized\");\n    this.client.on(\"session_ping\", e => {\n      this.events.emit(\"session_ping\", e);\n    }), this.client.on(\"session_event\", e => {\n      const {\n          params: t\n        } = e,\n        {\n          event: s\n        } = t;\n      if (s.name === \"accountsChanged\") {\n        const i = s.data;\n        i && ie(i) && this.events.emit(\"accountsChanged\", i.map(cc));\n      } else if (s.name === \"chainChanged\") {\n        const i = t.chainId,\n          n = t.event.data,\n          a = A(i),\n          o = Y(i) !== Y(n) ? `${a}:${Y(n)}` : i;\n        this.onChainChanged(o);\n      } else this.events.emit(s.name, s.data);\n      this.events.emit(\"session_event\", e);\n    }), this.client.on(\"session_update\", ({\n      topic: e,\n      params: t\n    }) => {\n      var s;\n      const {\n          namespaces: i\n        } = t,\n        n = (s = this.client) == null ? void 0 : s.session.get(e);\n      this.session = Q(U({}, n), {\n        namespaces: i\n      }), this.onSessionUpdate(), this.events.emit(\"session_update\", {\n        topic: e,\n        params: t\n      });\n    }), this.client.on(\"session_delete\", async e => {\n      await this.cleanup(), this.events.emit(\"session_delete\", e), this.events.emit(\"disconnect\", Q(U({}, se(\"USER_DISCONNECTED\")), {\n        data: e.topic\n      }));\n    }), this.on(f.DEFAULT_CHAIN_CHANGED, e => {\n      this.onChainChanged(e, !0);\n    });\n  }\n  getProvider(e) {\n    return this.rpcProviders[e] || this.rpcProviders[w];\n  }\n  onSessionUpdate() {\n    Object.keys(this.rpcProviders).forEach(e => {\n      var t;\n      this.getProvider(e).updateNamespace((t = this.session) == null ? void 0 : t.namespaces[e]);\n    });\n  }\n  setNamespaces(e) {\n    const {\n      namespaces: t,\n      optionalNamespaces: s,\n      sessionProperties: i\n    } = e;\n    t && Object.keys(t).length && (this.namespaces = t), s && Object.keys(s).length && (this.optionalNamespaces = s), this.sessionProperties = i, this.persist(\"namespaces\", t), this.persist(\"optionalNamespaces\", s);\n  }\n  validateChain(e) {\n    const [t, s] = e?.split(\":\") || [\"\", \"\"];\n    if (!this.namespaces || !Object.keys(this.namespaces).length) return [t, s];\n    if (t && !Object.keys(this.namespaces || {}).map(a => A(a)).includes(t)) throw new Error(`Namespace '${t}' is not configured. Please call connect() first with namespace config.`);\n    if (t && s) return [t, s];\n    const i = A(Object.keys(this.namespaces)[0]),\n      n = this.rpcProviders[i].getDefaultChain();\n    return [i, n];\n  }\n  async requestAccounts() {\n    const [e] = this.validateChain();\n    return await this.getProvider(e).requestAccounts();\n  }\n  onChainChanged(e, t = !1) {\n    if (!this.namespaces) return;\n    const [s, i] = this.validateChain(e);\n    i && (t || this.getProvider(s).setDefaultChain(i), this.namespaces[s] ? this.namespaces[s].defaultChain = i : this.namespaces[`${s}:${i}`] ? this.namespaces[`${s}:${i}`].defaultChain = i : this.namespaces[`${s}:${i}`] = {\n      defaultChain: i\n    }, this.persist(\"namespaces\", this.namespaces), this.events.emit(\"chainChanged\", i));\n  }\n  onConnect() {\n    this.createProviders(), this.events.emit(\"connect\", {\n      session: this.session\n    });\n  }\n  async cleanup() {\n    this.session = void 0, this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, this.persist(\"namespaces\", void 0), this.persist(\"optionalNamespaces\", void 0), this.persist(\"sessionProperties\", void 0), await this.cleanupPendingPairings({\n      deletePairings: !0\n    });\n  }\n  persist(e, t) {\n    this.client.core.storage.setItem(`${ae}/${e}`, t);\n  }\n  async getFromStore(e) {\n    return await this.client.core.storage.getItem(`${ae}/${e}`);\n  }\n}\nconst jc = M;\nexport { jc as UniversalProvider, M as default };","map":{"version":3,"names":[],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/constants/values.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/constants/events.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_listCacheClear.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/eq.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_assocIndexOf.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_listCacheDelete.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_listCacheGet.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_listCacheHas.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_listCacheSet.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_ListCache.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_stackClear.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_stackDelete.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_stackGet.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_stackHas.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_freeGlobal.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_root.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_Symbol.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_getRawTag.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_objectToString.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseGetTag.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/isObject.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/isFunction.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_coreJsData.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_isMasked.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_toSource.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseIsNative.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_getValue.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_getNative.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_Map.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_nativeCreate.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_hashClear.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_hashDelete.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_hashGet.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_hashHas.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_hashSet.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_Hash.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_mapCacheClear.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_isKeyable.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_getMapData.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_mapCacheDelete.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_mapCacheGet.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_mapCacheHas.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_mapCacheSet.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_MapCache.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_stackSet.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_Stack.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_defineProperty.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseAssignValue.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_assignMergeValue.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_createBaseFor.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseFor.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_cloneBuffer.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_Uint8Array.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_cloneArrayBuffer.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_cloneTypedArray.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_copyArray.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseCreate.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_overArg.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_getPrototype.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_isPrototype.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_initCloneObject.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/isObjectLike.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseIsArguments.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/isArguments.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/isArray.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/isLength.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/isArrayLike.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/isArrayLikeObject.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/stubFalse.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/isBuffer.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/isPlainObject.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseIsTypedArray.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseUnary.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_nodeUtil.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/isTypedArray.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_safeGet.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_assignValue.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_copyObject.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseTimes.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_isIndex.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_arrayLikeKeys.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_nativeKeysIn.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseKeysIn.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/keysIn.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/toPlainObject.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseMergeDeep.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseMerge.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/identity.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_apply.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_overRest.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/constant.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseSetToString.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_shortOut.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_setToString.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_baseRest.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_isIterateeCall.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/_createAssigner.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/node_modules/lodash/merge.js","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/utils/misc.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/utils/globals.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/providers/polkadot.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/providers/eip155.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/providers/solana.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/providers/cosmos.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/providers/algorand.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/providers/cardano.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/providers/elrond.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/providers/multiversx.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/providers/near.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/providers/tezos.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/providers/generic.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/UniversalProvider.ts","/Users/vickyfu/Documents/PredictX/frontend/node_modules/@walletconnect/universal-provider/src/index.ts"],"sourcesContent":["export const LOGGER = \"error\";\n\nexport const RELAY_URL = \"wss://relay.walletconnect.org\";\n\nexport const PROTOCOL = \"wc\";\nexport const WC_VERSION = 2;\nexport const CONTEXT = \"universal_provider\";\n\nexport const STORAGE = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\n\nexport const RPC_URL = \"https://rpc.walletconnect.org/v1/\";\n\nexport const GENERIC_SUBPROVIDER_NAME = \"generic\";\n\nexport const BUNDLER_URL = `${RPC_URL}bundler`;\n","export const PROVIDER_EVENTS = {\n  DEFAULT_CHAIN_CHANGED: \"default_chain_changed\",\n};\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","var ListCache = require('./_ListCache');\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n","var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n","var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n","var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n","var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n","var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n","var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n","var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n","var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n","var ListCache = require('./_ListCache'),\n    Map = require('./_Map'),\n    MapCache = require('./_MapCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n","var ListCache = require('./_ListCache'),\n    stackClear = require('./_stackClear'),\n    stackDelete = require('./_stackDelete'),\n    stackGet = require('./_stackGet'),\n    stackHas = require('./_stackHas'),\n    stackSet = require('./_stackSet');\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n","var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n","var defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignMergeValue;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n","var createBaseFor = require('./_createBaseFor');\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n","var root = require('./_root');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n","var Uint8Array = require('./_Uint8Array');\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n","var isObject = require('./isObject');\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","var overArg = require('./_overArg');\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n","var baseCreate = require('./_baseCreate'),\n    getPrototype = require('./_getPrototype'),\n    isPrototype = require('./_isPrototype');\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nmodule.exports = initCloneObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n","var isArrayLike = require('./isArrayLike'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nmodule.exports = isArrayLikeObject;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n","var baseGetTag = require('./_baseGetTag'),\n    getPrototype = require('./_getPrototype'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nmodule.exports = isPlainObject;\n","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n","/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\nmodule.exports = safeGet;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n","var assignValue = require('./_assignValue'),\n    baseAssignValue = require('./_baseAssignValue');\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n","var isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeysIn = require('./_baseKeysIn'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n","var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\nmodule.exports = toPlainObject;\n","var assignMergeValue = require('./_assignMergeValue'),\n    cloneBuffer = require('./_cloneBuffer'),\n    cloneTypedArray = require('./_cloneTypedArray'),\n    copyArray = require('./_copyArray'),\n    initCloneObject = require('./_initCloneObject'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isPlainObject = require('./isPlainObject'),\n    isTypedArray = require('./isTypedArray'),\n    safeGet = require('./_safeGet'),\n    toPlainObject = require('./toPlainObject');\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n","var Stack = require('./_Stack'),\n    assignMergeValue = require('./_assignMergeValue'),\n    baseFor = require('./_baseFor'),\n    baseMergeDeep = require('./_baseMergeDeep'),\n    isObject = require('./isObject'),\n    keysIn = require('./keysIn'),\n    safeGet = require('./_safeGet');\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\nmodule.exports = baseMerge;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n","var constant = require('./constant'),\n    defineProperty = require('./_defineProperty'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n","var baseSetToString = require('./_baseSetToString'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n","var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n","var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n","var baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n","var baseMerge = require('./_baseMerge'),\n    createAssigner = require('./_createAssigner');\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\nmodule.exports = merge;\n","import { SessionTypes } from \"@walletconnect/types\";\nimport {\n  isCaipNamespace,\n  isValidObject,\n  mergeArrays,\n  parseChainId,\n  parseNamespaceKey,\n} from \"@walletconnect/utils\";\nimport { RPC_URL } from \"../constants\";\nimport { Namespace, NamespaceConfig } from \"../types\";\nimport merge from \"lodash/merge\";\n\nexport function getRpcUrl(chainId: string, rpc: Namespace, projectId?: string): string | undefined {\n  const chain = parseChainId(chainId);\n  return (\n    rpc.rpcMap?.[chain.reference] ||\n    `${RPC_URL}?chainId=${chain.namespace}:${chain.reference}&projectId=${projectId}`\n  );\n}\n\nexport function getChainId(chain: string): string {\n  return chain.includes(\":\") ? chain.split(\":\")[1] : chain;\n}\n\nexport function validateChainApproval(chain: string, chains: string[]): void {\n  if (!chains.includes(chain)) {\n    throw new Error(\n      `Chain '${chain}' not approved. Please use one of the following: ${chains.toString()}`,\n    );\n  }\n}\n\nexport function getChainsFromApprovedSession(accounts: string[]): string[] {\n  return accounts.map((address) => `${address.split(\":\")[0]}:${address.split(\":\")[1]}`);\n}\n\nexport function getAccountsFromSession(namespace: string, session: SessionTypes.Struct): string[] {\n  // match namespaces e.g. eip155 with eip155:1\n  const matchedNamespaceKeys = Object.keys(session.namespaces).filter((key) =>\n    key.includes(namespace),\n  );\n  if (!matchedNamespaceKeys.length) return [];\n  const accounts: string[] = [];\n  matchedNamespaceKeys.forEach((key) => {\n    const accountsForNamespace = session.namespaces[key].accounts;\n    accounts.push(...accountsForNamespace);\n  });\n  return accounts;\n}\n\nexport function mergeRequiredOptionalNamespaces(\n  required: NamespaceConfig = {},\n  optional: NamespaceConfig = {},\n) {\n  const requiredNamespaces = normalizeNamespaces(required);\n  const optionalNamespaces = normalizeNamespaces(optional);\n  return merge(requiredNamespaces, optionalNamespaces);\n}\n\n/**\n * Converts\n * {\n *  \"eip155:1\": {...},\n *  \"eip155:2\": {...},\n * }\n * into\n * {\n *  \"eip155\": {\n *      chains: [\"eip155:1\", \"eip155:2\"],\n *      ...\n *    }\n * }\n *\n */\nexport function normalizeNamespaces(namespaces: NamespaceConfig): NamespaceConfig {\n  const normalizedNamespaces: NamespaceConfig = {};\n  if (!isValidObject(namespaces)) return normalizedNamespaces;\n\n  for (const [key, values] of Object.entries(namespaces)) {\n    const chains = isCaipNamespace(key) ? [key] : values.chains;\n    const methods = values.methods || [];\n    const events = values.events || [];\n    const rpcMap = values.rpcMap || {};\n    const normalizedKey = parseNamespaceKey(key);\n    normalizedNamespaces[normalizedKey] = {\n      ...normalizedNamespaces[normalizedKey],\n      ...values,\n      chains: mergeArrays(chains, normalizedNamespaces[normalizedKey]?.chains),\n      methods: mergeArrays(methods, normalizedNamespaces[normalizedKey]?.methods),\n      events: mergeArrays(events, normalizedNamespaces[normalizedKey]?.events),\n      rpcMap: { ...rpcMap, ...normalizedNamespaces[normalizedKey]?.rpcMap },\n    };\n  }\n  return normalizedNamespaces;\n}\n\nexport function parseCaip10Account(caip10Account: string): string {\n  return caip10Account.includes(\":\") ? caip10Account.split(\":\")[2] : caip10Account;\n}\n\n/**\n * Populates the chains array for each namespace with the chains extracted from the accounts if are otherwise missing\n */\nexport function populateNamespacesChains(\n  namespaces: SessionTypes.Namespaces,\n): Record<string, SessionTypes.Namespace> {\n  const parsedNamespaces: Record<string, SessionTypes.Namespace> = {};\n  for (const [key, values] of Object.entries(namespaces)) {\n    const methods = values.methods || [];\n    const events = values.events || [];\n    const accounts = values.accounts || [];\n    // If the key includes a CAIP separator `:` we know it's a namespace + chainId (e.g. `eip155:1`)\n    const chains = isCaipNamespace(key)\n      ? [key]\n      : values.chains\n      ? values.chains\n      : getChainsFromApprovedSession(values.accounts);\n    parsedNamespaces[key] = {\n      chains,\n      methods,\n      events,\n      accounts,\n    };\n  }\n  return parsedNamespaces;\n}\n\nexport function convertChainIdToNumber(chainId: string | number): number | string {\n  if (typeof chainId === \"number\") return chainId;\n  if (chainId.includes(\"0x\")) {\n    return parseInt(chainId, 16);\n  }\n\n  chainId = chainId.includes(\":\") ? chainId.split(\":\")[1] : chainId;\n  return isNaN(Number(chainId)) ? chainId : Number(chainId);\n}\n","const globals = {};\nexport const getGlobal = (key: string) => {\n  return globals[key];\n};\n\nexport const setGlobal = (key: string, value: unknown) => {\n  globals[key] = value;\n};\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\n\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\nclass PolkadotProvider implements IProvider {\n  public name = \"polkadot\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  // ---------------- PRIVATE ---------------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default PolkadotProvider;\n","import Client from \"@walletconnect/sign-client\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport { HttpConnection } from \"@walletconnect/jsonrpc-http-connection\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\n\nimport {\n  IProvider,\n  RpcProvidersMap,\n  SubProviderOpts,\n  RequestParams,\n  SessionNamespace,\n} from \"../types\";\n\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\nimport EventEmitter from \"events\";\nimport { BUNDLER_URL, PROVIDER_EVENTS } from \"../constants\";\nimport { formatJsonRpcRequest } from \"@walletconnect/jsonrpc-utils\";\n\nclass Eip155Provider implements IProvider {\n  public name = \"eip155\";\n  public client: Client;\n  // the active chainId on the dapp\n  public chainId: number;\n  public namespace: SessionNamespace;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.httpProviders = this.createHttpProviders();\n    this.chainId = parseInt(this.getDefaultChain());\n  }\n\n  public async request<T = unknown>(args: RequestParams): Promise<T> {\n    switch (args.request.method) {\n      case \"eth_requestAccounts\":\n        return this.getAccounts() as unknown as T;\n      case \"eth_accounts\":\n        return this.getAccounts() as unknown as T;\n      case \"wallet_switchEthereumChain\": {\n        return (await this.handleSwitchChain(args)) as unknown as T;\n      }\n      case \"eth_chainId\":\n        return parseInt(this.getDefaultChain()) as unknown as T;\n      case \"wallet_getCapabilities\":\n        return (await this.getCapabilities(args)) as unknown as T;\n      case \"wallet_getCallsStatus\":\n        return (await this.getCallStatus(args)) as unknown as T;\n      default:\n        break;\n    }\n    if (this.namespace.methods.includes(args.request.method)) {\n      return await this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(parseInt(chainId), rpcUrl);\n    }\n    this.chainId = parseInt(chainId);\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId.toString();\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private createHttpProvider(\n    chainId: number,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc =\n      rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n\n  private setHttpProvider(chainId: number, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChain = parseInt(getChainId(chain));\n      http[parsedChain] = this.createHttpProvider(parsedChain, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = this.chainId;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private async handleSwitchChain(args: RequestParams): Promise<any> {\n    let hexChainId = args.request.params ? args.request.params[0]?.chainId : \"0x0\";\n    hexChainId = hexChainId.startsWith(\"0x\") ? hexChainId : `0x${hexChainId}`;\n    const parsedChainId = parseInt(hexChainId, 16);\n    // if chainId is already approved, switch locally\n    if (this.isChainApproved(parsedChainId)) {\n      this.setDefaultChain(`${parsedChainId}`);\n    } else if (this.namespace.methods.includes(\"wallet_switchEthereumChain\")) {\n      // try to switch chain within the wallet\n      await this.client.request({\n        topic: args.topic,\n        request: {\n          method: args.request.method,\n          params: [\n            {\n              chainId: hexChainId,\n            },\n          ],\n        },\n        chainId: this.namespace.chains?.[0], // Sending a previously unapproved chainId will cause namespace validation failure so we must set request chainId to the first chainId in the namespace to avoid it\n      } as EngineTypes.RequestParams);\n      this.setDefaultChain(`${parsedChainId}`);\n    } else {\n      throw new Error(\n        `Failed to switch to chain 'eip155:${parsedChainId}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`,\n      );\n    }\n    return null;\n  }\n\n  private isChainApproved(chainId: number): boolean {\n    return this.namespace.chains.includes(`${this.name}:${chainId}`);\n  }\n\n  private async getCapabilities(args: RequestParams) {\n    // if capabilities are stored in the session, return them, else send the request to the wallet\n    const address = args.request?.params?.[0];\n    if (!address) throw new Error(\"Missing address parameter in `wallet_getCapabilities` request\");\n    const session = this.client.session.get(args.topic);\n    const sessionCapabilities = session?.sessionProperties?.capabilities || {};\n    if (sessionCapabilities?.[address]) {\n      return sessionCapabilities?.[address];\n    }\n    // intentionally omit catching errors/rejection during `request` to allow the error to bubble up\n    const capabilities = await this.client.request(args as EngineTypes.RequestParams);\n    try {\n      // update the session with the capabilities so they can be retrieved later\n      await this.client.session.update(args.topic, {\n        sessionProperties: {\n          ...(session.sessionProperties || {}),\n          capabilities: {\n            ...(sessionCapabilities || {}),\n            [address]: capabilities,\n          } as any, // by spec sessionProperties should be <string, string> but here are used as objects?\n        },\n      });\n    } catch (error) {\n      console.warn(\"Failed to update session with capabilities\", error);\n    }\n    return capabilities;\n  }\n\n  private async getCallStatus(args: RequestParams) {\n    const session = this.client.session.get(args.topic);\n    const bundlerName = session.sessionProperties?.bundler_name;\n    if (bundlerName) {\n      const bundlerUrl = this.getBundlerUrl(args.chainId, bundlerName);\n      try {\n        return await this.getUserOperationReceipt(bundlerUrl, args);\n      } catch (error) {\n        console.warn(\"Failed to fetch call status from bundler\", error, bundlerUrl);\n      }\n    }\n    const customUrl = session.sessionProperties?.bundler_url;\n    if (customUrl) {\n      try {\n        return await this.getUserOperationReceipt(customUrl, args);\n      } catch (error) {\n        console.warn(\"Failed to fetch call status from custom bundler\", error, customUrl);\n      }\n    }\n\n    if (this.namespace.methods.includes(args.request.method)) {\n      return await this.client.request(args as EngineTypes.RequestParams);\n    }\n\n    throw new Error(\"Fetching call status not approved by the wallet.\");\n  }\n\n  private async getUserOperationReceipt(bundlerUrl: string, args: RequestParams) {\n    const url = new URL(bundlerUrl);\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(\n        formatJsonRpcRequest(\"eth_getUserOperationReceipt\", [args.request.params?.[0]]),\n      ),\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch user operation receipt - ${response.status}`);\n    }\n    return await response.json();\n  }\n\n  private getBundlerUrl(cap2ChainId: string, bundlerName: string) {\n    return `${BUNDLER_URL}?projectId=${this.client.core.projectId}&chainId=${cap2ChainId}&bundler=${bundlerName}`;\n  }\n}\n\nexport default Eip155Provider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\nclass SolanaProvider implements IProvider {\n  public name = \"solana\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default SolanaProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\nclass CosmosProvider implements IProvider {\n  public name = \"cosmos\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ---------------- PRIVATE ---------------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default CosmosProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getGlobal, getRpcUrl } from \"../utils\";\n\nclass AlgorandProvider implements IProvider {\n  public name = \"algorand\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc =\n        rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace, this.client.core.projectId);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default AlgorandProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal } from \"../utils\";\n\nclass CardanoProvider implements IProvider {\n  public name = \"cip34\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ------------- PRIVATE -------------- /\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const rpcURL = this.getCardanoRPCUrl(chain);\n      const parsedChain = getChainId(chain);\n      http[parsedChain] = this.createHttpProvider(parsedChain, rpcURL);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private getCardanoRPCUrl(chainId: string): string | undefined {\n    const rpcMap = this.namespace.rpcMap;\n    if (!rpcMap) return undefined;\n    return rpcMap[chainId];\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || this.getCardanoRPCUrl(chainId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default CardanoProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\n// Old wallet connect provider for Elrond\nclass ElrondProvider implements IProvider {\n  public name = \"elrond\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default ElrondProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\nclass MultiversXProvider implements IProvider {\n  public name = \"multiversx\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default MultiversXProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getGlobal, getRpcUrl } from \"../utils\";\n\nclass NearProvider implements IProvider {\n  public name = \"near\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    this.chainId = chainId;\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ---------------- PRIVATE ---------------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default NearProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\n\nimport { getRpcUrl, getGlobal } from \"../utils\";\n\nclass TezosProvider implements IProvider {\n  public name = \"tezos\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    this.chainId = chainId;\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ---------------- PRIVATE ---------------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http: any = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n}\n\nexport default TezosProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { GENERIC_SUBPROVIDER_NAME, PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getGlobal, getRpcUrl } from \"../utils\";\nimport { parseChainId } from \"@walletconnect/utils\";\n\nclass GenericProvider implements IProvider {\n  public name = GENERIC_SUBPROVIDER_NAME;\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace.chains = [\n      ...new Set((this.namespace.chains || []).concat(namespace.chains || [])),\n    ];\n    this.namespace.accounts = [\n      ...new Set((this.namespace.accounts || []).concat(namespace.accounts || [])),\n    ];\n    this.namespace.methods = [\n      ...new Set((this.namespace.methods || []).concat(namespace.methods || [])),\n    ];\n    this.namespace.events = [\n      ...new Set((this.namespace.events || []).concat(namespace.events || [])),\n    ];\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider(args.chainId).request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace?.accounts?.forEach((account) => {\n      const chain = parseChainId(account);\n      http[`${chain.namespace}:${chain.reference}`] = this.createHttpProvider(account);\n    });\n    return http;\n  }\n\n  private getHttpProvider(chain: string): JsonRpcProvider {\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(chainId: string, rpcUrl?: string): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default GenericProvider;\n","import SignClient, { PROPOSAL_EXPIRY_MESSAGE } from \"@walletconnect/sign-client\";\nimport { SessionTypes } from \"@walletconnect/types\";\nimport { JsonRpcResult } from \"@walletconnect/jsonrpc-types\";\nimport { getSdkError, isValidArray, parseNamespaceKey } from \"@walletconnect/utils\";\nimport { getDefaultLoggerOptions, Logger, pino } from \"@walletconnect/logger\";\nimport {\n  convertChainIdToNumber,\n  getAccountsFromSession,\n  getChainsFromApprovedSession,\n  mergeRequiredOptionalNamespaces,\n  parseCaip10Account,\n  populateNamespacesChains,\n  setGlobal,\n} from \"./utils\";\nimport PolkadotProvider from \"./providers/polkadot\";\nimport Eip155Provider from \"./providers/eip155\";\nimport SolanaProvider from \"./providers/solana\";\nimport CosmosProvider from \"./providers/cosmos\";\nimport AlgorandProvider from \"./providers/algorand\";\nimport CardanoProvider from \"./providers/cardano\";\nimport ElrondProvider from \"./providers/elrond\";\nimport MultiversXProvider from \"./providers/multiversx\";\nimport NearProvider from \"./providers/near\";\nimport TezosProvider from \"./providers/tezos\";\nimport GenericProvider from \"./providers/generic\";\n\nimport {\n  IUniversalProvider,\n  IProvider,\n  RpcProviderMap,\n  ConnectParams,\n  RequestArguments,\n  UniversalProviderOpts,\n  NamespaceConfig,\n  PairingsCleanupOpts,\n  ProviderAccounts,\n  AuthenticateParams,\n} from \"./types\";\n\nimport { RELAY_URL, LOGGER, STORAGE, PROVIDER_EVENTS, GENERIC_SUBPROVIDER_NAME } from \"./constants\";\nimport EventEmitter from \"events\";\nimport { formatJsonRpcResult } from \"@walletconnect/jsonrpc-utils\";\n\nexport class UniversalProvider implements IUniversalProvider {\n  public client!: SignClient;\n  public namespaces?: NamespaceConfig;\n  public optionalNamespaces?: NamespaceConfig;\n  public sessionProperties?: Record<string, string>;\n  public events: EventEmitter = new EventEmitter();\n  public rpcProviders: RpcProviderMap = {};\n  public session?: SessionTypes.Struct;\n  public providerOpts: UniversalProviderOpts;\n  public logger: Logger;\n  public uri: string | undefined;\n\n  private shouldAbortPairingAttempt = false;\n  private maxPairingAttempts = 10;\n  private disableProviderPing = false;\n\n  static async init(opts: UniversalProviderOpts) {\n    const provider = new UniversalProvider(opts);\n    await provider.initialize();\n    return provider;\n  }\n\n  constructor(opts: UniversalProviderOpts) {\n    this.providerOpts = opts;\n    this.logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || LOGGER }));\n    this.disableProviderPing = opts?.disableProviderPing || false;\n  }\n\n  public async request<T = unknown>(\n    args: RequestArguments,\n    chain?: string | undefined,\n    expiry?: number | undefined,\n  ): Promise<T> {\n    const [namespace, chainId] = this.validateChain(chain);\n\n    if (!this.session) {\n      throw new Error(\"Please call connect() before request()\");\n    }\n\n    return await this.getProvider(namespace).request({\n      request: {\n        ...args,\n      },\n      chainId: `${namespace}:${chainId}`,\n      topic: this.session.topic,\n      expiry,\n    });\n  }\n\n  public sendAsync(\n    args: RequestArguments,\n    callback: (error: Error | null, response: JsonRpcResult) => void,\n    chain?: string | undefined,\n    expiry?: number | undefined,\n  ): void {\n    const id = new Date().getTime();\n    this.request(args, chain, expiry)\n      .then((response) => callback(null, formatJsonRpcResult(id, response)))\n      .catch((error) => callback(error, undefined as any));\n  }\n\n  public async enable(): Promise<ProviderAccounts> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    if (!this.session) {\n      await this.connect({\n        namespaces: this.namespaces,\n        optionalNamespaces: this.optionalNamespaces,\n        sessionProperties: this.sessionProperties,\n      });\n    }\n    const accounts = await this.requestAccounts();\n    return accounts as ProviderAccounts;\n  }\n\n  public async disconnect(): Promise<void> {\n    if (!this.session) {\n      throw new Error(\"Please call connect() before enable()\");\n    }\n    await this.client.disconnect({\n      topic: this.session?.topic,\n      reason: getSdkError(\"USER_DISCONNECTED\"),\n    });\n    await this.cleanup();\n  }\n\n  public async connect(opts: ConnectParams): Promise<SessionTypes.Struct | undefined> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    this.setNamespaces(opts);\n    await this.cleanupPendingPairings();\n    if (opts.skipPairing) return;\n\n    return await this.pair(opts.pairingTopic);\n  }\n\n  public async authenticate(opts: AuthenticateParams, walletUniversalLink?: string) {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    this.setNamespaces(opts);\n    await this.cleanupPendingPairings();\n\n    const { uri, response } = await this.client.authenticate(opts, walletUniversalLink);\n    if (uri) {\n      this.uri = uri;\n      this.events.emit(\"display_uri\", uri);\n    }\n    const result = await response();\n    this.session = result.session;\n    if (this.session) {\n      // assign namespaces from session if not already defined\n      const approved = populateNamespacesChains(this.session.namespaces) as NamespaceConfig;\n      this.namespaces = mergeRequiredOptionalNamespaces(this.namespaces, approved);\n      this.persist(\"namespaces\", this.namespaces);\n      this.onConnect();\n    }\n    return result;\n  }\n\n  public on(event: any, listener: any): void {\n    this.events.on(event, listener);\n  }\n\n  public once(event: string, listener: any): void {\n    this.events.once(event, listener);\n  }\n\n  public removeListener(event: string, listener: any): void {\n    this.events.removeListener(event, listener);\n  }\n\n  public off(event: string, listener: any): void {\n    this.events.off(event, listener);\n  }\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  public async pair(pairingTopic: string | undefined): Promise<SessionTypes.Struct> {\n    this.shouldAbortPairingAttempt = false;\n    let pairingAttempts = 0;\n    do {\n      if (this.shouldAbortPairingAttempt) {\n        throw new Error(\"Pairing aborted\");\n      }\n\n      if (pairingAttempts >= this.maxPairingAttempts) {\n        throw new Error(\"Max auto pairing attempts reached\");\n      }\n\n      const { uri, approval } = await this.client.connect({\n        pairingTopic,\n        requiredNamespaces: this.namespaces,\n        optionalNamespaces: this.optionalNamespaces,\n        sessionProperties: this.sessionProperties,\n      });\n\n      if (uri) {\n        this.uri = uri;\n        this.events.emit(\"display_uri\", uri);\n      }\n\n      await approval()\n        .then((session) => {\n          this.session = session;\n          // assign namespaces from session if not already defined\n          const approved = populateNamespacesChains(session.namespaces) as NamespaceConfig;\n          this.namespaces = mergeRequiredOptionalNamespaces(this.namespaces, approved);\n          this.persist(\"namespaces\", this.namespaces);\n        })\n        .catch((error) => {\n          if (error.message !== PROPOSAL_EXPIRY_MESSAGE) {\n            throw error;\n          }\n          pairingAttempts++;\n        });\n    } while (!this.session);\n    this.onConnect();\n    return this.session;\n  }\n\n  public setDefaultChain(chain: string, rpcUrl?: string | undefined) {\n    try {\n      // ignore without active session\n      if (!this.session) return;\n      const [namespace, chainId] = this.validateChain(chain);\n      const provider = this.getProvider(namespace);\n      // @ts-expect-error\n      if (provider.name === GENERIC_SUBPROVIDER_NAME) {\n        provider.setDefaultChain(`${namespace}:${chainId}`, rpcUrl);\n      } else {\n        provider.setDefaultChain(chainId, rpcUrl);\n      }\n    } catch (error) {\n      // ignore the error if the fx is used prematurely before namespaces are set\n      if (!/Please call connect/.test((error as Error).message)) throw error;\n    }\n  }\n\n  public async cleanupPendingPairings(opts: PairingsCleanupOpts = {}): Promise<void> {\n    this.logger.info(\"Cleaning up inactive pairings...\");\n    const inactivePairings = this.client.pairing.getAll();\n\n    if (!isValidArray(inactivePairings)) return;\n\n    for (const pairing of inactivePairings) {\n      if (opts.deletePairings) {\n        this.client.core.expirer.set(pairing.topic, 0);\n      } else {\n        await this.client.core.relayer.subscriber.unsubscribe(pairing.topic);\n      }\n    }\n\n    this.logger.info(`Inactive pairings cleared: ${inactivePairings.length}`);\n  }\n\n  public abortPairingAttempt() {\n    this.shouldAbortPairingAttempt = true;\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async checkStorage() {\n    this.namespaces = await this.getFromStore(\"namespaces\");\n    this.optionalNamespaces = (await this.getFromStore(\"optionalNamespaces\")) || {};\n    if (this.client.session.length) {\n      const lastKeyIndex = this.client.session.keys.length - 1;\n      this.session = this.client.session.get(this.client.session.keys[lastKeyIndex]);\n      this.createProviders();\n    }\n  }\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    await this.createClient();\n    await this.checkStorage();\n    this.registerEventListeners();\n  }\n\n  private async createClient() {\n    this.client =\n      this.providerOpts.client ||\n      (await SignClient.init({\n        core: this.providerOpts.core,\n        logger: this.providerOpts.logger || LOGGER,\n        relayUrl: this.providerOpts.relayUrl || RELAY_URL,\n        projectId: this.providerOpts.projectId,\n        metadata: this.providerOpts.metadata,\n        storageOptions: this.providerOpts.storageOptions,\n        storage: this.providerOpts.storage,\n        name: this.providerOpts.name,\n        customStoragePrefix: this.providerOpts.customStoragePrefix,\n        telemetryEnabled: this.providerOpts.telemetryEnabled,\n      }));\n\n    this.logger.trace(`SignClient Initialized`);\n  }\n\n  private createProviders(): void {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n\n    if (!this.session) {\n      throw new Error(\"Session not initialized. Please call connect() before enable()\");\n    }\n\n    const providersToCreate = [\n      ...new Set(\n        Object.keys(this.session.namespaces).map((namespace) => parseNamespaceKey(namespace)),\n      ),\n    ];\n\n    setGlobal(\"client\", this.client);\n    setGlobal(\"events\", this.events);\n    setGlobal(\"disableProviderPing\", this.disableProviderPing);\n\n    providersToCreate.forEach((namespace) => {\n      if (!this.session) return;\n      const accounts = getAccountsFromSession(namespace, this.session);\n      const approvedChains = getChainsFromApprovedSession(accounts);\n      const mergedNamespaces = mergeRequiredOptionalNamespaces(\n        this.namespaces,\n        this.optionalNamespaces,\n      );\n      const combinedNamespace = {\n        ...mergedNamespaces[namespace],\n        accounts,\n        chains: approvedChains,\n      };\n      switch (namespace) {\n        case \"eip155\":\n          this.rpcProviders[namespace] = new Eip155Provider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"algorand\":\n          this.rpcProviders[namespace] = new AlgorandProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"solana\":\n          this.rpcProviders[namespace] = new SolanaProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"cosmos\":\n          this.rpcProviders[namespace] = new CosmosProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"polkadot\":\n          this.rpcProviders[namespace] = new PolkadotProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"cip34\":\n          this.rpcProviders[namespace] = new CardanoProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"elrond\":\n          this.rpcProviders[namespace] = new ElrondProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"multiversx\":\n          this.rpcProviders[namespace] = new MultiversXProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"near\":\n          this.rpcProviders[namespace] = new NearProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"tezos\":\n          this.rpcProviders[namespace] = new TezosProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        default:\n          if (!this.rpcProviders[GENERIC_SUBPROVIDER_NAME]) {\n            this.rpcProviders[GENERIC_SUBPROVIDER_NAME] = new GenericProvider({\n              namespace: combinedNamespace,\n            });\n          } else {\n            this.rpcProviders[GENERIC_SUBPROVIDER_NAME].updateNamespace(combinedNamespace);\n          }\n      }\n    });\n  }\n\n  private registerEventListeners(): void {\n    if (typeof this.client === \"undefined\") {\n      throw new Error(\"Sign Client is not initialized\");\n    }\n\n    this.client.on(\"session_ping\", (args) => {\n      this.events.emit(\"session_ping\", args);\n    });\n\n    this.client.on(\"session_event\", (args) => {\n      const { params } = args;\n      const { event } = params;\n      if (event.name === \"accountsChanged\") {\n        const accounts = event.data;\n        if (accounts && isValidArray(accounts))\n          this.events.emit(\"accountsChanged\", accounts.map(parseCaip10Account));\n      } else if (event.name === \"chainChanged\") {\n        const requestChainId = params.chainId;\n        const payloadChainId = params.event.data as number;\n        const namespace = parseNamespaceKey(requestChainId);\n        // chainIds might differ between the request & payload - request is always in CAIP2 format, while payload might be string, number, CAIP2 or hex\n        // take priority of the payload chainId\n        const chainIdToProcess =\n          convertChainIdToNumber(requestChainId) !== convertChainIdToNumber(payloadChainId)\n            ? `${namespace}:${convertChainIdToNumber(payloadChainId)}`\n            : requestChainId;\n\n        this.onChainChanged(chainIdToProcess);\n      } else {\n        this.events.emit(event.name, event.data);\n      }\n\n      this.events.emit(\"session_event\", args);\n    });\n\n    this.client.on(\"session_update\", ({ topic, params }) => {\n      const { namespaces } = params;\n      const _session = this.client?.session.get(topic);\n      this.session = { ..._session, namespaces } as SessionTypes.Struct;\n      this.onSessionUpdate();\n      this.events.emit(\"session_update\", { topic, params });\n    });\n\n    this.client.on(\"session_delete\", async (payload) => {\n      await this.cleanup();\n      this.events.emit(\"session_delete\", payload);\n      this.events.emit(\"disconnect\", {\n        ...getSdkError(\"USER_DISCONNECTED\"),\n        data: payload.topic,\n      });\n    });\n\n    this.on(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, (caip2ChainId: string) => {\n      this.onChainChanged(caip2ChainId, true);\n    });\n  }\n\n  private getProvider(namespace: string): IProvider {\n    return this.rpcProviders[namespace] || this.rpcProviders[GENERIC_SUBPROVIDER_NAME];\n  }\n\n  private onSessionUpdate(): void {\n    Object.keys(this.rpcProviders).forEach((namespace: string) => {\n      this.getProvider(namespace).updateNamespace(\n        this.session?.namespaces[namespace] as SessionTypes.BaseNamespace,\n      );\n    });\n  }\n\n  private setNamespaces(params: ConnectParams): void {\n    const { namespaces, optionalNamespaces, sessionProperties } = params;\n\n    if (namespaces && Object.keys(namespaces).length) {\n      this.namespaces = namespaces;\n    }\n    if (optionalNamespaces && Object.keys(optionalNamespaces).length) {\n      this.optionalNamespaces = optionalNamespaces;\n    }\n    this.sessionProperties = sessionProperties;\n    this.persist(\"namespaces\", namespaces);\n    this.persist(\"optionalNamespaces\", optionalNamespaces);\n  }\n\n  private validateChain(chain?: string): [string, string] {\n    const [namespace, chainId] = chain?.split(\":\") || [\"\", \"\"];\n    if (!this.namespaces || !Object.keys(this.namespaces).length) return [namespace, chainId];\n    // validate namespace\n    if (namespace) {\n      if (\n        // some namespaces might be defined with inline chainId e.g. eip155:1\n        // and we need to parse them\n        !Object.keys(this.namespaces || {})\n          .map((key) => parseNamespaceKey(key))\n          .includes(namespace)\n      ) {\n        throw new Error(\n          `Namespace '${namespace}' is not configured. Please call connect() first with namespace config.`,\n        );\n      }\n    }\n    if (namespace && chainId) {\n      return [namespace, chainId];\n    }\n    const defaultNamespace = parseNamespaceKey(Object.keys(this.namespaces)[0]);\n    const defaultChain = this.rpcProviders[defaultNamespace].getDefaultChain();\n    return [defaultNamespace, defaultChain];\n  }\n\n  private async requestAccounts(): Promise<string[]> {\n    const [namespace] = this.validateChain();\n    return await this.getProvider(namespace).requestAccounts();\n  }\n\n  private onChainChanged(caip2Chain: string, internal = false): void {\n    if (!this.namespaces) return;\n\n    const [namespace, chainId] = this.validateChain(caip2Chain);\n\n    if (!chainId) return;\n\n    if (!internal) {\n      this.getProvider(namespace).setDefaultChain(chainId);\n    }\n\n    if (this.namespaces[namespace]) {\n      this.namespaces[namespace].defaultChain = chainId;\n    } else if (this.namespaces[`${namespace}:${chainId}`]) {\n      this.namespaces[`${namespace}:${chainId}`].defaultChain = chainId;\n    } else {\n      // @ts-ignore\n      this.namespaces[`${namespace}:${chainId}`] = { defaultChain: chainId };\n    }\n\n    this.persist(\"namespaces\", this.namespaces);\n    this.events.emit(\"chainChanged\", chainId);\n  }\n\n  private onConnect() {\n    this.createProviders();\n    this.events.emit(\"connect\", { session: this.session });\n  }\n\n  private async cleanup() {\n    this.session = undefined;\n    this.namespaces = undefined;\n    this.optionalNamespaces = undefined;\n    this.sessionProperties = undefined;\n    this.persist(\"namespaces\", undefined);\n    this.persist(\"optionalNamespaces\", undefined);\n    this.persist(\"sessionProperties\", undefined);\n    await this.cleanupPendingPairings({ deletePairings: true });\n  }\n\n  private persist(key: string, data: unknown) {\n    this.client.core.storage.setItem(`${STORAGE}/${key}`, data);\n  }\n\n  private async getFromStore(key: string) {\n    return await this.client.core.storage.getItem(`${STORAGE}/${key}`);\n  }\n}\nexport default UniversalProvider;\n","import { UniversalProvider as Provider } from \"./UniversalProvider\";\nexport * from \"./types\";\nexport const UniversalProvider = Provider;\nexport default Provider;\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}