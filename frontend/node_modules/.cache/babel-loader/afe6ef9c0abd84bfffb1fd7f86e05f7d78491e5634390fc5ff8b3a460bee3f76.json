{"ast":null,"code":"import { PrivyClientError as e } from \"../Error.mjs\";\nimport { DEFAULT_SUPPORTED_CHAINS as r } from \"../chains/index.mjs\";\nimport { EmbeddedBitcoinWalletProvider as t } from \"../embedded/EmbeddedBitcoinWalletProvider.mjs\";\nimport { errorIndicatesRecoveryIsNeeded as o } from \"../embedded/errors.mjs\";\nimport { throwIfInvalidRecoveryUpgradePath as i } from \"../embedded/utils/index.mjs\";\nimport { EmbeddedWalletProxy as s } from \"../embedded/EmbeddedWalletProxy.mjs\";\nimport { EmbeddedWalletProvider as d } from \"../embedded/EmbeddedWalletProvider.mjs\";\nimport { EmbeddedSolanaWalletProvider as a } from \"../embedded/EmbeddedSolanaWalletProvider.mjs\";\nimport \"../chains/arbitrum.mjs\";\nimport \"../chains/arbitrumGoerli.mjs\";\nimport \"../chains/arbitrumSepolia.mjs\";\nimport \"../chains/avalanche.mjs\";\nimport \"../chains/avalancheFuji.mjs\";\nimport \"../chains/base.mjs\";\nimport \"../chains/baseGoerli.mjs\";\nimport \"../chains/baseSepolia.mjs\";\nimport \"../chains/berachainArtio.mjs\";\nimport \"../chains/celo.mjs\";\nimport \"../chains/celoAlfajores.mjs\";\nimport \"../chains/filecoin.mjs\";\nimport \"../chains/filecoinCalibration.mjs\";\nimport \"../chains/garnetHolesky.mjs\";\nimport \"../chains/goerli.mjs\";\nimport \"../chains/holesky.mjs\";\nimport \"../chains/linea.mjs\";\nimport \"../chains/lineaTestnet.mjs\";\nimport \"../chains/mainnet.mjs\";\nimport \"../chains/optimism.mjs\";\nimport \"../chains/optimismGoerli.mjs\";\nimport \"../chains/optimismSepolia.mjs\";\nimport \"../chains/polygon.mjs\";\nimport \"../chains/polygonMumbai.mjs\";\nimport \"../chains/redstone.mjs\";\nimport \"../chains/redstoneHolesky.mjs\";\nimport \"../chains/sepolia.mjs\";\nimport \"../chains/zora.mjs\";\nimport \"../chains/zoraSepolia.mjs\";\nimport \"../chains/zoraTestnet.mjs\";\nimport \"../embedded/types.mjs\";\nimport \"@ethersproject/abstract-signer\";\nimport \"@ethersproject/providers\";\nimport \"../embedded/gas/arbitrum.mjs\";\nimport \"@ethersproject/bignumber\";\nimport \"../embedded/utils/ethers.mjs\";\nimport \"../embedded/gas/bsc.mjs\";\nimport \"../embedded/gas/op-stack.mjs\";\nimport \"@ethersproject/contracts\";\nimport \"@ethersproject/transactions\";\nimport \"../embedded/gas/polygon.mjs\";\nimport \"@ethersproject/units\";\nimport \"fetch-retry\";\nimport \"../chains/polygonAmoy.mjs\";\nimport \"../embedded/utils/gas.mjs\";\nimport \"../utils/sleep.mjs\";\nimport \"../embedded/EventCallbackQueue.mjs\";\nimport \"../embedded/withMfa.mjs\";\nimport \"eventemitter3\";\nimport \"../embedded/methods.mjs\";\nimport \"../solana/getWalletPublicKeyFromTransaction.mjs\";\nimport \"../solana/isVersionedTransaction.mjs\";\nclass n {\n  setMessagePoster(e) {\n    this._proxy = new s(e, this._mfaPromises), this._mfa.setProxy(this._proxy);\n  }\n  async add(r) {\n    if (!this._proxy) throw Error(\"Embedded wallet proxy not initialized\");\n    let t = await this._privyInternal.getAccessToken();\n    if (!t) throw new e({\n      error: \"User must be logged in to create an embedded wallet\",\n      code: \"embedded_wallet_creation_error\"\n    });\n    await this._proxy.addWallet({\n      accessToken: t,\n      ...r\n    });\n    let {\n      user: o\n    } = await this._privyInternal.refreshSession();\n    return {\n      user: o\n    };\n  }\n  async getBitcoinProvider({\n    wallet: e,\n    entropyId: r,\n    entropyIdVerifier: o,\n    recoveryPassword: i,\n    recoveryAccessToken: s,\n    recoverySecretOverride: d\n  }) {\n    if (!this._proxy) throw Error(\"Embedded wallet proxy not initialized\");\n    if (!(await this._privyInternal.getAccessToken())) throw Error(\"User must be logged in to create an embedded wallet\");\n    return await this._load({\n      entropyId: r,\n      entropyIdVerifier: o,\n      wallet: e,\n      recoveryPassword: i,\n      recoveryAccessToken: s,\n      recoverySecretOverride: d\n    }), new t({\n      account: e,\n      privyInternal: this._privyInternal,\n      proxy: this._proxy,\n      entropyId: r,\n      entropyIdVerifier: o\n    });\n  }\n  async create({\n    password: e,\n    recoveryMethod: r,\n    recoveryToken: t,\n    recoveryKey: o,\n    recoverySecretOverride: i,\n    iCloudRecordNameOverride: s,\n    solanaAccount: d,\n    skipCallbacks: a\n  }) {\n    let n;\n    if (!this._proxy) throw Error(\"Embedded wallet proxy not initialized\");\n    if (n = r || (e ? \"user-passcode\" : \"privy\"), e && \"string\" != typeof e) throw Error(\"Invalid recovery password, must be a string\");\n    if (\"privy\" === n && this._privyInternal.config?.embedded_wallet_config.require_user_password_on_create) throw Error(\"Password not provided yet is required by App configuration\");\n    let c = await this._privyInternal.getAccessToken();\n    if (!c) throw Error(\"User must be logged in to create an embedded wallet\");\n    let {\n      address: l\n    } = await this._proxy.create({\n      accessToken: c,\n      recoveryMethod: n,\n      recoveryKey: o,\n      recoveryPassword: e,\n      recoveryAccessToken: t,\n      recoverySecretOverride: i,\n      iCloudRecordNameOverride: s,\n      solanaAddress: d?.address\n    });\n    if (!l) throw Error(\"Failed to create wallet\");\n    return await this._privyInternal.refreshSession(a);\n  }\n  async createSolana(r) {\n    if (!this._proxy) throw new e({\n      error: \"Embedded wallet proxy not initialized\",\n      code: \"embedded_wallet_creation_error\"\n    });\n    let t = await this._privyInternal.getAccessToken();\n    if (!t) throw new e({\n      error: \"User must be logged in to create an embedded wallet\",\n      code: \"embedded_wallet_creation_error\"\n    });\n    r?.ethereumAccount && (await this.getProvider(r.ethereumAccount));\n    let {\n      publicKey: o\n    } = await this._proxy.createSolana({\n      accessToken: t,\n      ethereumAddress: r?.ethereumAccount?.address\n    });\n    if (!o) throw new e({\n      error: \"Failed to create wallet\",\n      code: \"embedded_wallet_creation_error\"\n    });\n    return await this._privyInternal.refreshSession();\n  }\n  async delegateWallets({\n    delegatedWallets: r,\n    rootWallet: t\n  }) {\n    if (!this._proxy) throw new e({\n      error: \"Embedded wallet proxy not initialized\",\n      code: \"embedded_wallet_creation_error\"\n    });\n    let o = await this._privyInternal.getAccessToken();\n    if (!o) throw new e({\n      error: \"User must be logged in to create an embedded wallet\",\n      code: \"embedded_wallet_creation_error\"\n    });\n    await this._proxy.delegateWallets({\n      accessToken: o,\n      delegatedWallets: r,\n      rootWallet: t\n    });\n  }\n  async getProvider(e, r, t, o, i) {\n    if (!this._proxy) throw Error(\"Embedded wallet proxy not initialized\");\n    return await this._load({\n      wallet: e,\n      entropyId: e.address,\n      entropyIdVerifier: \"ethereum-address-verifier\",\n      recoveryPassword: r,\n      recoveryKey: i,\n      recoveryAccessToken: t,\n      recoverySecretOverride: o\n    }), new d({\n      account: e,\n      entropyId: e.address,\n      entropyIdVerifier: \"ethereum-address-verifier\",\n      privyInternal: this._privyInternal,\n      chains: this._chains,\n      walletProxy: this._proxy\n    });\n  }\n  async getEthereumProvider({\n    wallet: e,\n    entropyId: r,\n    entropyIdVerifier: t,\n    recoveryPassword: o,\n    recoveryAccessToken: i,\n    recoverySecretOverride: s,\n    recoveryKey: a\n  }) {\n    if (!this._proxy) throw Error(\"Embedded wallet proxy not initialized\");\n    if (!(await this._privyInternal.getAccessToken())) throw Error(\"User must be logged in to create an embedded wallet\");\n    return await this._load({\n      entropyId: r,\n      entropyIdVerifier: t,\n      wallet: e,\n      recoveryPassword: o,\n      recoveryAccessToken: i,\n      recoverySecretOverride: s,\n      recoveryKey: a\n    }), new d({\n      account: e,\n      entropyId: r,\n      entropyIdVerifier: \"ethereum-address-verifier\",\n      privyInternal: this._privyInternal,\n      chains: this._chains,\n      walletProxy: this._proxy\n    });\n  }\n  async getSolanaProvider(r, t, o, i, s, d) {\n    if (!this._proxy) throw new e({\n      error: \"Embedded wallet proxy not initialized\",\n      code: \"embedded_wallet_webview_not_loaded\"\n    });\n    return await this._load({\n      wallet: r,\n      entropyId: t,\n      entropyIdVerifier: o,\n      recoveryPassword: i,\n      recoveryAccessToken: s,\n      recoverySecretOverride: d\n    }), new a({\n      publicKey: r.address,\n      privyInternal: this._privyInternal,\n      proxy: this._proxy,\n      entropyId: t,\n      entropyIdVerifier: o,\n      hdWalletIndex: r.wallet_index\n    });\n  }\n  async setRecovery(e) {\n    let {\n      wallet: r,\n      ...t\n    } = e;\n    if (!this._proxy) throw Error(\"Embedded wallet proxy not initialized\");\n    i({\n      currentRecoveryMethod: r.recovery_method,\n      upgradeToRecoveryMethod: \"icloud-native\" === t.recoveryMethod ? \"icloud\" : t.recoveryMethod\n    }), await this._load(\"solana\" === r.chain_type ? {\n      wallet: r,\n      entropyId: r.address,\n      entropyIdVerifier: \"solana-address-verifier\"\n    } : {\n      wallet: r,\n      entropyId: r.address,\n      entropyIdVerifier: \"ethereum-address-verifier\"\n    });\n    let o = await this._privyInternal.getAccessToken();\n    if (!o) throw Error(\"User must be logged in to interact with embedded wallets\");\n    let s = r.recovery_method;\n    this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_set_recovery_started\", {\n      address: r.address,\n      target_recovery_method: t.recoveryMethod,\n      existing_recovery_method: s\n    });\n    try {\n      let e;\n      if (\"user-passcode\" === t.recoveryMethod) e = {\n        recoveryMethod: \"user-passcode\",\n        recoveryPassword: t.password\n      };else if (\"google-drive\" === t.recoveryMethod) e = {\n        recoveryMethod: \"google-drive\",\n        recoveryAccessToken: t.recoveryAccessToken\n      };else if (\"icloud\" === t.recoveryMethod) e = {\n        recoveryMethod: \"icloud\",\n        recoveryAccessToken: t.recoveryAccessToken\n      };else if (\"icloud-native\" === t.recoveryMethod) e = {\n        recoveryMethod: \"icloud-native\",\n        iCloudRecordNameOverride: t.iCloudRecordNameOverride,\n        recoverySecretOverride: t.recoverySecretOverride\n      };else if (\"recovery-encryption-key\" === t.recoveryMethod) e = {\n        recoveryMethod: \"recovery-encryption-key\",\n        recoveryKey: t.recoveryKey\n      };else {\n        if (\"privy\" !== t.recoveryMethod) throw Error(`Unknown recovery method: ${t.recoveryMethod}`);\n        e = {\n          recoveryMethod: \"privy\"\n        };\n      }\n      await this._proxy.setRecovery({\n        accessToken: o,\n        entropyId: r.address,\n        entropyIdVerifier: \"solana\" === r.chain_type ? \"solana-address-verifier\" : \"ethereum-address-verifier\",\n        ...e\n      }), this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_set_recovery_completed\", {\n        address: r.address,\n        target_recovery_method: t.recoveryMethod,\n        existing_recovery_method: s\n      });\n      let {\n        user: i\n      } = await this._privyInternal.refreshSession();\n      return {\n        user: i,\n        provider: \"ethereum\" !== r.chain_type ? null : new d({\n          account: r,\n          entropyId: r.address,\n          entropyIdVerifier: \"ethereum-address-verifier\",\n          privyInternal: this._privyInternal,\n          chains: this._chains,\n          walletProxy: this._proxy\n        })\n      };\n    } catch (e) {\n      throw this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_set_recovery_failed\", {\n        address: r.address,\n        recovery_method: r.recovery_method,\n        error: e instanceof Error ? e.message : \"Unable to recover wallet\"\n      }), e;\n    }\n  }\n  getURL() {\n    let e = new URL(`${this._privyInternal.baseUrl}/apps/${this._privyInternal.appId}/embedded-wallets`);\n    return this._privyInternal.caid && e.searchParams.append(\"caid\", this._privyInternal.caid), this._privyInternal.appClientId && e.searchParams.append(\"client_id\", this._privyInternal.appClientId), e.href;\n  }\n  get chains() {\n    return this._chains;\n  }\n  onMessage(e) {\n    if (!this._proxy) throw Error(\"Embedded wallet proxy not initialized\");\n    return this._proxy.handleEmbeddedWalletMessages(e);\n  }\n  async ping(e) {\n    try {\n      if (!this._proxy) throw Error(\"Embedded wallet proxy not initialized\");\n      return await this._proxy.ping(e), !0;\n    } catch (e) {\n      return console.error(e), !1;\n    }\n  }\n  async _load({\n    entropyId: e,\n    entropyIdVerifier: r,\n    wallet: t,\n    recoveryPassword: i,\n    recoveryKey: s,\n    recoveryAccessToken: d,\n    recoverySecretOverride: a\n  }) {\n    if (!this._proxy) throw Error(\"Embedded wallet proxy not initialized\");\n    let n = await this._privyInternal.getAccessToken();\n    if (!n) throw Error(\"User must be logged in to interact with embedded wallets\");\n    try {\n      return await this._proxy.connect({\n        accessToken: n,\n        entropyId: e,\n        entropyIdVerifier: r\n      }), e;\n    } catch (c) {\n      if (o(c)) try {\n        if (\"privy\" === t.recovery_method) {\n          this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_started\", {\n            address: t.address,\n            recovery_method: t.recovery_method\n          });\n          let o = await this._proxy.recover({\n            accessToken: n,\n            entropyId: e,\n            entropyIdVerifier: r\n          });\n          return this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_completed\", {\n            address: t.address,\n            recovery_method: t.recovery_method\n          }), o.entropyId;\n        }\n        if (\"user-passcode\" === t.recovery_method && i) {\n          this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_started\", {\n            address: t.address,\n            recovery_method: t.recovery_method\n          });\n          let o = await this._proxy.recover({\n            accessToken: n,\n            recoveryPassword: i,\n            entropyId: e,\n            entropyIdVerifier: r\n          });\n          return this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_completed\", {\n            address: t.address,\n            recovery_method: t.recovery_method\n          }), o.entropyId;\n        }\n        if ([\"google-drive\", \"icloud\"].includes(t.recovery_method) && d) {\n          this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_started\", {\n            address: t.address,\n            recovery_method: t.recovery_method\n          });\n          let o = await this._proxy.recover({\n            accessToken: n,\n            recoveryAccessToken: d,\n            entropyId: e,\n            entropyIdVerifier: r\n          });\n          return this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_completed\", {\n            address: t.address,\n            recovery_method: t.recovery_method\n          }), o.entropyId;\n        }\n        if (\"icloud\" === t.recovery_method && a) {\n          this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_started\", {\n            address: t.address,\n            recovery_method: \"icloud-native\"\n          });\n          let o = await this._proxy.recover({\n            accessToken: n,\n            recoverySecretOverride: a,\n            entropyId: e,\n            entropyIdVerifier: r\n          });\n          return this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_completed\", {\n            address: t.address,\n            recovery_method: \"icloud-native\"\n          }), o.entropyId;\n        }\n        if (\"recovery-encryption-key\" === t.recovery_method && s) {\n          this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_started\", {\n            address: t.address,\n            recovery_method: t.recovery_method\n          });\n          let o = await this._proxy.recover({\n            accessToken: n,\n            recoveryKey: s,\n            entropyId: e,\n            entropyIdVerifier: r\n          });\n          return this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_completed\", {\n            address: t.address,\n            recovery_method: t.recovery_method\n          }), o.entropyId;\n        }\n      } catch (r) {\n        throw this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_failed\", {\n          address: t.address,\n          recovery_method: t.recovery_method,\n          error: r instanceof Error ? r.message : `Unable to recover wallet: ${e}`\n        }), r;\n      }\n      throw c;\n    }\n  }\n  constructor(e, t, o, i, d) {\n    this._chains = Array.from(r), this._privyInternal = e, t && (this._proxy = new s(t, d), i.setProxy(this._proxy)), o && (this._chains = o), this._mfa = i, this._mfaPromises = d;\n  }\n}\nexport { n as default };","map":{"version":3,"names":["PrivyClientError","e","DEFAULT_SUPPORTED_CHAINS","r","EmbeddedBitcoinWalletProvider","t","errorIndicatesRecoveryIsNeeded","o","throwIfInvalidRecoveryUpgradePath","i","EmbeddedWalletProxy","s","EmbeddedWalletProvider","d","EmbeddedSolanaWalletProvider","a","n","setMessagePoster","_proxy","_mfaPromises","_mfa","setProxy","add","Error","_privyInternal","getAccessToken","error","code","addWallet","accessToken","user","refreshSession","getBitcoinProvider","wallet","entropyId","entropyIdVerifier","recoveryPassword","recoveryAccessToken","recoverySecretOverride","_load","account","privyInternal","proxy","create","password","recoveryMethod","recoveryToken","recoveryKey","iCloudRecordNameOverride","solanaAccount","skipCallbacks","config","embedded_wallet_config","require_user_password_on_create","c","address","l","solanaAddress","createSolana","ethereumAccount","getProvider","publicKey","ethereumAddress","delegateWallets","delegatedWallets","rootWallet","chains","_chains","walletProxy","getEthereumProvider","getSolanaProvider","hdWalletIndex","wallet_index","setRecovery","currentRecoveryMethod","recovery_method","upgradeToRecoveryMethod","chain_type","createAnalyticsEvent","target_recovery_method","existing_recovery_method","provider","message","getURL","URL","baseUrl","appId","caid","searchParams","append","appClientId","href","onMessage","handleEmbeddedWalletMessages","ping","console","connect","recover","includes","constructor","Array","from","default"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/react-auth/node_modules/@privy-io/js-sdk-core/dist/esm/client/EmbeddedWalletApi.mjs"],"sourcesContent":["import{PrivyClientError as e}from\"../Error.mjs\";import{DEFAULT_SUPPORTED_CHAINS as r}from\"../chains/index.mjs\";import{EmbeddedBitcoinWalletProvider as t}from\"../embedded/EmbeddedBitcoinWalletProvider.mjs\";import{errorIndicatesRecoveryIsNeeded as o}from\"../embedded/errors.mjs\";import{throwIfInvalidRecoveryUpgradePath as i}from\"../embedded/utils/index.mjs\";import{EmbeddedWalletProxy as s}from\"../embedded/EmbeddedWalletProxy.mjs\";import{EmbeddedWalletProvider as d}from\"../embedded/EmbeddedWalletProvider.mjs\";import{EmbeddedSolanaWalletProvider as a}from\"../embedded/EmbeddedSolanaWalletProvider.mjs\";import\"../chains/arbitrum.mjs\";import\"../chains/arbitrumGoerli.mjs\";import\"../chains/arbitrumSepolia.mjs\";import\"../chains/avalanche.mjs\";import\"../chains/avalancheFuji.mjs\";import\"../chains/base.mjs\";import\"../chains/baseGoerli.mjs\";import\"../chains/baseSepolia.mjs\";import\"../chains/berachainArtio.mjs\";import\"../chains/celo.mjs\";import\"../chains/celoAlfajores.mjs\";import\"../chains/filecoin.mjs\";import\"../chains/filecoinCalibration.mjs\";import\"../chains/garnetHolesky.mjs\";import\"../chains/goerli.mjs\";import\"../chains/holesky.mjs\";import\"../chains/linea.mjs\";import\"../chains/lineaTestnet.mjs\";import\"../chains/mainnet.mjs\";import\"../chains/optimism.mjs\";import\"../chains/optimismGoerli.mjs\";import\"../chains/optimismSepolia.mjs\";import\"../chains/polygon.mjs\";import\"../chains/polygonMumbai.mjs\";import\"../chains/redstone.mjs\";import\"../chains/redstoneHolesky.mjs\";import\"../chains/sepolia.mjs\";import\"../chains/zora.mjs\";import\"../chains/zoraSepolia.mjs\";import\"../chains/zoraTestnet.mjs\";import\"../embedded/types.mjs\";import\"@ethersproject/abstract-signer\";import\"@ethersproject/providers\";import\"../embedded/gas/arbitrum.mjs\";import\"@ethersproject/bignumber\";import\"../embedded/utils/ethers.mjs\";import\"../embedded/gas/bsc.mjs\";import\"../embedded/gas/op-stack.mjs\";import\"@ethersproject/contracts\";import\"@ethersproject/transactions\";import\"../embedded/gas/polygon.mjs\";import\"@ethersproject/units\";import\"fetch-retry\";import\"../chains/polygonAmoy.mjs\";import\"../embedded/utils/gas.mjs\";import\"../utils/sleep.mjs\";import\"../embedded/EventCallbackQueue.mjs\";import\"../embedded/withMfa.mjs\";import\"eventemitter3\";import\"../embedded/methods.mjs\";import\"../solana/getWalletPublicKeyFromTransaction.mjs\";import\"../solana/isVersionedTransaction.mjs\";class n{setMessagePoster(e){this._proxy=new s(e,this._mfaPromises),this._mfa.setProxy(this._proxy)}async add(r){if(!this._proxy)throw Error(\"Embedded wallet proxy not initialized\");let t=await this._privyInternal.getAccessToken();if(!t)throw new e({error:\"User must be logged in to create an embedded wallet\",code:\"embedded_wallet_creation_error\"});await this._proxy.addWallet({accessToken:t,...r});let{user:o}=await this._privyInternal.refreshSession();return{user:o}}async getBitcoinProvider({wallet:e,entropyId:r,entropyIdVerifier:o,recoveryPassword:i,recoveryAccessToken:s,recoverySecretOverride:d}){if(!this._proxy)throw Error(\"Embedded wallet proxy not initialized\");if(!await this._privyInternal.getAccessToken())throw Error(\"User must be logged in to create an embedded wallet\");return await this._load({entropyId:r,entropyIdVerifier:o,wallet:e,recoveryPassword:i,recoveryAccessToken:s,recoverySecretOverride:d}),new t({account:e,privyInternal:this._privyInternal,proxy:this._proxy,entropyId:r,entropyIdVerifier:o})}async create({password:e,recoveryMethod:r,recoveryToken:t,recoveryKey:o,recoverySecretOverride:i,iCloudRecordNameOverride:s,solanaAccount:d,skipCallbacks:a}){let n;if(!this._proxy)throw Error(\"Embedded wallet proxy not initialized\");if(n=r||(e?\"user-passcode\":\"privy\"),e&&\"string\"!=typeof e)throw Error(\"Invalid recovery password, must be a string\");if(\"privy\"===n&&this._privyInternal.config?.embedded_wallet_config.require_user_password_on_create)throw Error(\"Password not provided yet is required by App configuration\");let c=await this._privyInternal.getAccessToken();if(!c)throw Error(\"User must be logged in to create an embedded wallet\");let{address:l}=await this._proxy.create({accessToken:c,recoveryMethod:n,recoveryKey:o,recoveryPassword:e,recoveryAccessToken:t,recoverySecretOverride:i,iCloudRecordNameOverride:s,solanaAddress:d?.address});if(!l)throw Error(\"Failed to create wallet\");return await this._privyInternal.refreshSession(a)}async createSolana(r){if(!this._proxy)throw new e({error:\"Embedded wallet proxy not initialized\",code:\"embedded_wallet_creation_error\"});let t=await this._privyInternal.getAccessToken();if(!t)throw new e({error:\"User must be logged in to create an embedded wallet\",code:\"embedded_wallet_creation_error\"});r?.ethereumAccount&&await this.getProvider(r.ethereumAccount);let{publicKey:o}=await this._proxy.createSolana({accessToken:t,ethereumAddress:r?.ethereumAccount?.address});if(!o)throw new e({error:\"Failed to create wallet\",code:\"embedded_wallet_creation_error\"});return await this._privyInternal.refreshSession()}async delegateWallets({delegatedWallets:r,rootWallet:t}){if(!this._proxy)throw new e({error:\"Embedded wallet proxy not initialized\",code:\"embedded_wallet_creation_error\"});let o=await this._privyInternal.getAccessToken();if(!o)throw new e({error:\"User must be logged in to create an embedded wallet\",code:\"embedded_wallet_creation_error\"});await this._proxy.delegateWallets({accessToken:o,delegatedWallets:r,rootWallet:t})}async getProvider(e,r,t,o,i){if(!this._proxy)throw Error(\"Embedded wallet proxy not initialized\");return await this._load({wallet:e,entropyId:e.address,entropyIdVerifier:\"ethereum-address-verifier\",recoveryPassword:r,recoveryKey:i,recoveryAccessToken:t,recoverySecretOverride:o}),new d({account:e,entropyId:e.address,entropyIdVerifier:\"ethereum-address-verifier\",privyInternal:this._privyInternal,chains:this._chains,walletProxy:this._proxy})}async getEthereumProvider({wallet:e,entropyId:r,entropyIdVerifier:t,recoveryPassword:o,recoveryAccessToken:i,recoverySecretOverride:s,recoveryKey:a}){if(!this._proxy)throw Error(\"Embedded wallet proxy not initialized\");if(!await this._privyInternal.getAccessToken())throw Error(\"User must be logged in to create an embedded wallet\");return await this._load({entropyId:r,entropyIdVerifier:t,wallet:e,recoveryPassword:o,recoveryAccessToken:i,recoverySecretOverride:s,recoveryKey:a}),new d({account:e,entropyId:r,entropyIdVerifier:\"ethereum-address-verifier\",privyInternal:this._privyInternal,chains:this._chains,walletProxy:this._proxy})}async getSolanaProvider(r,t,o,i,s,d){if(!this._proxy)throw new e({error:\"Embedded wallet proxy not initialized\",code:\"embedded_wallet_webview_not_loaded\"});return await this._load({wallet:r,entropyId:t,entropyIdVerifier:o,recoveryPassword:i,recoveryAccessToken:s,recoverySecretOverride:d}),new a({publicKey:r.address,privyInternal:this._privyInternal,proxy:this._proxy,entropyId:t,entropyIdVerifier:o,hdWalletIndex:r.wallet_index})}async setRecovery(e){let{wallet:r,...t}=e;if(!this._proxy)throw Error(\"Embedded wallet proxy not initialized\");i({currentRecoveryMethod:r.recovery_method,upgradeToRecoveryMethod:\"icloud-native\"===t.recoveryMethod?\"icloud\":t.recoveryMethod}),await this._load(\"solana\"===r.chain_type?{wallet:r,entropyId:r.address,entropyIdVerifier:\"solana-address-verifier\"}:{wallet:r,entropyId:r.address,entropyIdVerifier:\"ethereum-address-verifier\"});let o=await this._privyInternal.getAccessToken();if(!o)throw Error(\"User must be logged in to interact with embedded wallets\");let s=r.recovery_method;this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_set_recovery_started\",{address:r.address,target_recovery_method:t.recoveryMethod,existing_recovery_method:s});try{let e;if(\"user-passcode\"===t.recoveryMethod)e={recoveryMethod:\"user-passcode\",recoveryPassword:t.password};else if(\"google-drive\"===t.recoveryMethod)e={recoveryMethod:\"google-drive\",recoveryAccessToken:t.recoveryAccessToken};else if(\"icloud\"===t.recoveryMethod)e={recoveryMethod:\"icloud\",recoveryAccessToken:t.recoveryAccessToken};else if(\"icloud-native\"===t.recoveryMethod)e={recoveryMethod:\"icloud-native\",iCloudRecordNameOverride:t.iCloudRecordNameOverride,recoverySecretOverride:t.recoverySecretOverride};else if(\"recovery-encryption-key\"===t.recoveryMethod)e={recoveryMethod:\"recovery-encryption-key\",recoveryKey:t.recoveryKey};else{if(\"privy\"!==t.recoveryMethod)throw Error(`Unknown recovery method: ${t.recoveryMethod}`);e={recoveryMethod:\"privy\"}}await this._proxy.setRecovery({accessToken:o,entropyId:r.address,entropyIdVerifier:\"solana\"===r.chain_type?\"solana-address-verifier\":\"ethereum-address-verifier\",...e}),this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_set_recovery_completed\",{address:r.address,target_recovery_method:t.recoveryMethod,existing_recovery_method:s});let{user:i}=await this._privyInternal.refreshSession();return{user:i,provider:\"ethereum\"!==r.chain_type?null:new d({account:r,entropyId:r.address,entropyIdVerifier:\"ethereum-address-verifier\",privyInternal:this._privyInternal,chains:this._chains,walletProxy:this._proxy})}}catch(e){throw this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_set_recovery_failed\",{address:r.address,recovery_method:r.recovery_method,error:e instanceof Error?e.message:\"Unable to recover wallet\"}),e}}getURL(){let e=new URL(`${this._privyInternal.baseUrl}/apps/${this._privyInternal.appId}/embedded-wallets`);return this._privyInternal.caid&&e.searchParams.append(\"caid\",this._privyInternal.caid),this._privyInternal.appClientId&&e.searchParams.append(\"client_id\",this._privyInternal.appClientId),e.href}get chains(){return this._chains}onMessage(e){if(!this._proxy)throw Error(\"Embedded wallet proxy not initialized\");return this._proxy.handleEmbeddedWalletMessages(e)}async ping(e){try{if(!this._proxy)throw Error(\"Embedded wallet proxy not initialized\");return await this._proxy.ping(e),!0}catch(e){return console.error(e),!1}}async _load({entropyId:e,entropyIdVerifier:r,wallet:t,recoveryPassword:i,recoveryKey:s,recoveryAccessToken:d,recoverySecretOverride:a}){if(!this._proxy)throw Error(\"Embedded wallet proxy not initialized\");let n=await this._privyInternal.getAccessToken();if(!n)throw Error(\"User must be logged in to interact with embedded wallets\");try{return await this._proxy.connect({accessToken:n,entropyId:e,entropyIdVerifier:r}),e}catch(c){if(o(c))try{if(\"privy\"===t.recovery_method){this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_started\",{address:t.address,recovery_method:t.recovery_method});let o=await this._proxy.recover({accessToken:n,entropyId:e,entropyIdVerifier:r});return this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_completed\",{address:t.address,recovery_method:t.recovery_method}),o.entropyId}if(\"user-passcode\"===t.recovery_method&&i){this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_started\",{address:t.address,recovery_method:t.recovery_method});let o=await this._proxy.recover({accessToken:n,recoveryPassword:i,entropyId:e,entropyIdVerifier:r});return this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_completed\",{address:t.address,recovery_method:t.recovery_method}),o.entropyId}if([\"google-drive\",\"icloud\"].includes(t.recovery_method)&&d){this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_started\",{address:t.address,recovery_method:t.recovery_method});let o=await this._proxy.recover({accessToken:n,recoveryAccessToken:d,entropyId:e,entropyIdVerifier:r});return this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_completed\",{address:t.address,recovery_method:t.recovery_method}),o.entropyId}if(\"icloud\"===t.recovery_method&&a){this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_started\",{address:t.address,recovery_method:\"icloud-native\"});let o=await this._proxy.recover({accessToken:n,recoverySecretOverride:a,entropyId:e,entropyIdVerifier:r});return this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_completed\",{address:t.address,recovery_method:\"icloud-native\"}),o.entropyId}if(\"recovery-encryption-key\"===t.recovery_method&&s){this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_started\",{address:t.address,recovery_method:t.recovery_method});let o=await this._proxy.recover({accessToken:n,recoveryKey:s,entropyId:e,entropyIdVerifier:r});return this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_completed\",{address:t.address,recovery_method:t.recovery_method}),o.entropyId}}catch(r){throw this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_recovery_failed\",{address:t.address,recovery_method:t.recovery_method,error:r instanceof Error?r.message:`Unable to recover wallet: ${e}`}),r}throw c}}constructor(e,t,o,i,d){this._chains=Array.from(r),this._privyInternal=e,t&&(this._proxy=new s(t,d),i.setProxy(this._proxy)),o&&(this._chains=o),this._mfa=i,this._mfaPromises=d}}export{n as default};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}