{"ast":null,"code":"import { BigNumber as e } from \"@ethersproject/bignumber\";\nimport { Contract as r } from \"@ethersproject/contracts\";\nimport { serialize as a } from \"@ethersproject/transactions\";\nimport { base as i } from \"../../chains/base.mjs\";\nimport { baseGoerli as t } from \"../../chains/baseGoerli.mjs\";\nimport { baseSepolia as o } from \"../../chains/baseSepolia.mjs\";\nimport { optimism as s } from \"../../chains/optimism.mjs\";\nimport { optimismGoerli as m } from \"../../chains/optimismGoerli.mjs\";\nimport { optimismSepolia as n } from \"../../chains/optimismSepolia.mjs\";\nimport { zora as c } from \"../../chains/zora.mjs\";\nimport { zoraSepolia as P } from \"../../chains/zoraSepolia.mjs\";\nimport { zoraTestnet as f } from \"../../chains/zoraTestnet.mjs\";\nimport { convertBigNumberish as h, toEthersUnsignedTransaction as l } from \"../utils/ethers.mjs\";\nconst d = \"0x420000000000000000000000000000000000000F\",\n  p = [\"function getL1Fee(bytes memory _data) external view returns (uint256)\"],\n  F = e => [i.id, t.id, o.id, s.id, m.id, n.id, c.id, f.id, P.id, 81457, 168587773].includes(e),\n  x = async (r, a) => {\n    if (!F(r.chainId)) throw Error(\"Invalid chain ID for OP Stack gas estimation.\");\n    if (void 0 === r.type && (r.type = 2), r.gasPrice && (console.warn(\"`gasPrice` is not supported on this chain and will be ignored. Use `maxPriorityFeePerGas` and/or `maxFeePerGas` instead.\"), delete r.gasPrice), r.maxPriorityFeePerGas && r.maxFeePerGas) return r;\n    try {\n      if (!r.maxPriorityFeePerGas) {\n        let e = await a.send(\"eth_maxPriorityFeePerGas\", []);\n        r.maxPriorityFeePerGas = e;\n      }\n      if (r.maxFeePerGas && (console.warn(\"maxFeePerGas is specified without maxPriorityFeePerGas - this can result in hung transactions.\"), r.maxPriorityFeePerGas >= r.maxFeePerGas)) throw Error(\"Overridden maxFeePerGas is less than or equal to the calculated maxPriorityFeePerGas. Please set both values or maxPriorityFeePerGas alone for correct gas estimation.\");\n      if (!r.maxFeePerGas) {\n        let {\n          lastBaseFeePerGas: i\n        } = await a.getFeeData();\n        if (!i) throw Error(\"Unable to fetch baseFee for last block.\");\n        let t = e.from(i).mul(e.from(126)).div(e.from(100)).add(e.from(r.maxPriorityFeePerGas));\n        r.maxFeePerGas = h(t);\n      }\n    } catch (e) {\n      throw Error(`Failed to set gas price for OP stack transaction: ${e}.`);\n    }\n    return r;\n  };\nasync function G(i, t) {\n  if (!i.chainId || i.chainId && !F(i.chainId)) return e.from(0);\n  let o = e.from(0);\n  try {\n    let e = new r(\"0x420000000000000000000000000000000000000F\", p, t),\n      s = l(i),\n      m = a(s);\n    o = await e.getL1Fee(m);\n  } catch (e) {}\n  return o;\n}\nexport { p as OPTIMISM_STACK_GAS_PRICE_ORACLE_ABI, d as OPTIMISM_STACK_GAS_PRICE_ORACLE_ADDRESS, x as defaultGasForOpStack, G as estimateOpStackL1Gas, F as isOpStack };","map":{"version":3,"names":["BigNumber","e","Contract","r","serialize","a","base","i","baseGoerli","t","baseSepolia","o","optimism","s","optimismGoerli","m","optimismSepolia","n","zora","c","zoraSepolia","P","zoraTestnet","f","convertBigNumberish","h","toEthersUnsignedTransaction","l","d","p","F","id","includes","x","chainId","Error","type","gasPrice","console","warn","maxPriorityFeePerGas","maxFeePerGas","send","lastBaseFeePerGas","getFeeData","from","mul","div","add","G","getL1Fee","OPTIMISM_STACK_GAS_PRICE_ORACLE_ABI","OPTIMISM_STACK_GAS_PRICE_ORACLE_ADDRESS","defaultGasForOpStack","estimateOpStackL1Gas","isOpStack"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/react-auth/node_modules/@privy-io/js-sdk-core/dist/esm/embedded/gas/op-stack.mjs"],"sourcesContent":["import{BigNumber as e}from\"@ethersproject/bignumber\";import{Contract as r}from\"@ethersproject/contracts\";import{serialize as a}from\"@ethersproject/transactions\";import{base as i}from\"../../chains/base.mjs\";import{baseGoerli as t}from\"../../chains/baseGoerli.mjs\";import{baseSepolia as o}from\"../../chains/baseSepolia.mjs\";import{optimism as s}from\"../../chains/optimism.mjs\";import{optimismGoerli as m}from\"../../chains/optimismGoerli.mjs\";import{optimismSepolia as n}from\"../../chains/optimismSepolia.mjs\";import{zora as c}from\"../../chains/zora.mjs\";import{zoraSepolia as P}from\"../../chains/zoraSepolia.mjs\";import{zoraTestnet as f}from\"../../chains/zoraTestnet.mjs\";import{convertBigNumberish as h,toEthersUnsignedTransaction as l}from\"../utils/ethers.mjs\";const d=\"0x420000000000000000000000000000000000000F\",p=[\"function getL1Fee(bytes memory _data) external view returns (uint256)\"],F=e=>[i.id,t.id,o.id,s.id,m.id,n.id,c.id,f.id,P.id,81457,168587773].includes(e),x=async(r,a)=>{if(!F(r.chainId))throw Error(\"Invalid chain ID for OP Stack gas estimation.\");if(void 0===r.type&&(r.type=2),r.gasPrice&&(console.warn(\"`gasPrice` is not supported on this chain and will be ignored. Use `maxPriorityFeePerGas` and/or `maxFeePerGas` instead.\"),delete r.gasPrice),r.maxPriorityFeePerGas&&r.maxFeePerGas)return r;try{if(!r.maxPriorityFeePerGas){let e=await a.send(\"eth_maxPriorityFeePerGas\",[]);r.maxPriorityFeePerGas=e}if(r.maxFeePerGas&&(console.warn(\"maxFeePerGas is specified without maxPriorityFeePerGas - this can result in hung transactions.\"),r.maxPriorityFeePerGas>=r.maxFeePerGas))throw Error(\"Overridden maxFeePerGas is less than or equal to the calculated maxPriorityFeePerGas. Please set both values or maxPriorityFeePerGas alone for correct gas estimation.\");if(!r.maxFeePerGas){let{lastBaseFeePerGas:i}=await a.getFeeData();if(!i)throw Error(\"Unable to fetch baseFee for last block.\");let t=e.from(i).mul(e.from(126)).div(e.from(100)).add(e.from(r.maxPriorityFeePerGas));r.maxFeePerGas=h(t)}}catch(e){throw Error(`Failed to set gas price for OP stack transaction: ${e}.`)}return r};async function G(i,t){if(!i.chainId||i.chainId&&!F(i.chainId))return e.from(0);let o=e.from(0);try{let e=new r(\"0x420000000000000000000000000000000000000F\",p,t),s=l(i),m=a(s);o=await e.getL1Fee(m)}catch(e){}return o}export{p as OPTIMISM_STACK_GAS_PRICE_ORACLE_ABI,d as OPTIMISM_STACK_GAS_PRICE_ORACLE_ADDRESS,x as defaultGasForOpStack,G as estimateOpStackL1Gas,F as isOpStack};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}