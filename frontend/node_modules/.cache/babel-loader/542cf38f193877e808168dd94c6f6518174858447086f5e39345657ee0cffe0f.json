{"ast":null,"code":"import { PrivyClientError as e } from \"../Error.mjs\";\nimport { getWalletPublicKeyFromTransaction as r } from \"../solana/getWalletPublicKeyFromTransaction.mjs\";\nimport { isVersionedTransaction as t } from \"../solana/isVersionedTransaction.mjs\";\nclass s {\n  async request(r) {\n    if (!(await this._privyInternal.getAccessToken())) throw new e({\n      error: \"Missing access token\",\n      code: \"attempted_rpc_call_before_logged_in\"\n    });\n    switch (r.method) {\n      case \"signAndSendTransaction\":\n        return await this.handleSignAndSendTransaction(r);\n      case \"signTransaction\":\n        return await this.handleSignTransaction(r);\n      default:\n        return await this.handleIFrameRpc(r);\n    }\n  }\n  async handleIFrameRpc(r) {\n    try {\n      let e = await this._privyInternal.getAccessToken();\n      if (!e) throw Error(\"Missing privy token. User must be logged in\");\n      return this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_rpc_started\", {\n        method: r.method,\n        address: this._publicKey\n      }), (await this._proxy.rpcWallet({\n        accessToken: e,\n        request: r,\n        chainType: \"solana\",\n        hdWalletIndex: this._hdWalletIndex,\n        entropyId: this._entropyId,\n        entropyIdVerifier: this._entropyIdVerifier\n      })).response.data;\n    } catch (t) {\n      console.error(t);\n      let s = t instanceof Error ? t.message : \"Unable to make wallet request\";\n      throw this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_rpc_failed\", {\n        method: r.method,\n        address: this._publicKey,\n        error: s\n      }), new e({\n        code: \"embedded_wallet_request_error\",\n        error: s\n      });\n    }\n  }\n  async handleSignAndSendTransaction(s) {\n    try {\n      let e = await this._privyInternal.getAccessToken();\n      if (!e) throw Error(\"Missing privy token. User must be logged in\");\n      this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_rpc_started\", {\n        method: s.method,\n        address: this._publicKey\n      });\n      let {\n          transaction: a,\n          connection: n,\n          options: i\n        } = s.params,\n        o = r(a, this._publicKey),\n        d = t(a) ? Buffer.from(a.message.serialize()) : a.serializeMessage(),\n        l = (await this._proxy.rpcWallet({\n          accessToken: e,\n          chainType: \"solana\",\n          hdWalletIndex: this._hdWalletIndex,\n          entropyId: this._entropyId,\n          entropyIdVerifier: this._entropyIdVerifier,\n          request: {\n            method: \"signMessage\",\n            params: {\n              message: d.toString(\"base64\")\n            }\n          }\n        })).response.data.signature;\n      return a.addSignature(o, Buffer.from(l, \"base64\")), {\n        signature: await n.sendRawTransaction(a.serialize(), i)\n      };\n    } catch (r) {\n      console.error(r);\n      let t = r instanceof Error ? r.message : \"Unable to make wallet request\";\n      throw this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_rpc_failed\", {\n        method: s.method,\n        address: this._publicKey,\n        error: t\n      }), new e({\n        code: \"embedded_wallet_request_error\",\n        error: t\n      });\n    }\n  }\n  async handleSignTransaction(s) {\n    try {\n      let e = await this._privyInternal.getAccessToken();\n      if (!e) throw Error(\"Missing privy token. User must be logged in\");\n      this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_rpc_started\", {\n        method: s.method,\n        address: this._publicKey\n      });\n      let {\n          transaction: a\n        } = s.params,\n        n = r(a, this._publicKey),\n        i = t(a) ? Buffer.from(a.message.serialize()) : a.serializeMessage(),\n        o = (await this._proxy.rpcWallet({\n          accessToken: e,\n          chainType: \"solana\",\n          hdWalletIndex: this._hdWalletIndex,\n          entropyId: this._entropyId,\n          entropyIdVerifier: this._entropyIdVerifier,\n          request: {\n            method: \"signMessage\",\n            params: {\n              message: i.toString(\"base64\")\n            }\n          }\n        })).response.data.signature;\n      return a.addSignature(n, Buffer.from(o, \"base64\")), {\n        signedTransaction: a\n      };\n    } catch (r) {\n      console.error(r);\n      let t = r instanceof Error ? r.message : \"Unable to make wallet request\";\n      throw this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_rpc_failed\", {\n        method: s.method,\n        address: this._publicKey,\n        error: t\n      }), new e({\n        code: \"embedded_wallet_request_error\",\n        error: t\n      });\n    }\n  }\n  toJSON() {\n    return `PrivyEmbeddedSolanaProvider { address: '${this._publicKey}', request: [Function] }`;\n  }\n  constructor({\n    proxy: e,\n    privyInternal: r,\n    publicKey: t,\n    hdWalletIndex: s,\n    entropyId: a,\n    entropyIdVerifier: n\n  }) {\n    this._proxy = e, this._privyInternal = r, this._publicKey = t, this._hdWalletIndex = s, this._entropyId = a, this._entropyIdVerifier = n;\n  }\n}\nexport { s as EmbeddedSolanaWalletProvider };","map":{"version":3,"names":["PrivyClientError","e","getWalletPublicKeyFromTransaction","r","isVersionedTransaction","t","s","request","_privyInternal","getAccessToken","error","code","method","handleSignAndSendTransaction","handleSignTransaction","handleIFrameRpc","Error","createAnalyticsEvent","address","_publicKey","_proxy","rpcWallet","accessToken","chainType","hdWalletIndex","_hdWalletIndex","entropyId","_entropyId","entropyIdVerifier","_entropyIdVerifier","response","data","console","message","transaction","a","connection","n","options","i","params","o","d","Buffer","from","serialize","serializeMessage","l","toString","signature","addSignature","sendRawTransaction","signedTransaction","toJSON","constructor","proxy","privyInternal","publicKey","EmbeddedSolanaWalletProvider"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/react-auth/node_modules/@privy-io/js-sdk-core/dist/esm/embedded/EmbeddedSolanaWalletProvider.mjs"],"sourcesContent":["import{PrivyClientError as e}from\"../Error.mjs\";import{getWalletPublicKeyFromTransaction as r}from\"../solana/getWalletPublicKeyFromTransaction.mjs\";import{isVersionedTransaction as t}from\"../solana/isVersionedTransaction.mjs\";class s{async request(r){if(!await this._privyInternal.getAccessToken())throw new e({error:\"Missing access token\",code:\"attempted_rpc_call_before_logged_in\"});switch(r.method){case\"signAndSendTransaction\":return await this.handleSignAndSendTransaction(r);case\"signTransaction\":return await this.handleSignTransaction(r);default:return await this.handleIFrameRpc(r)}}async handleIFrameRpc(r){try{let e=await this._privyInternal.getAccessToken();if(!e)throw Error(\"Missing privy token. User must be logged in\");return this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_rpc_started\",{method:r.method,address:this._publicKey}),(await this._proxy.rpcWallet({accessToken:e,request:r,chainType:\"solana\",hdWalletIndex:this._hdWalletIndex,entropyId:this._entropyId,entropyIdVerifier:this._entropyIdVerifier})).response.data}catch(t){console.error(t);let s=t instanceof Error?t.message:\"Unable to make wallet request\";throw this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_rpc_failed\",{method:r.method,address:this._publicKey,error:s}),new e({code:\"embedded_wallet_request_error\",error:s})}}async handleSignAndSendTransaction(s){try{let e=await this._privyInternal.getAccessToken();if(!e)throw Error(\"Missing privy token. User must be logged in\");this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_rpc_started\",{method:s.method,address:this._publicKey});let{transaction:a,connection:n,options:i}=s.params,o=r(a,this._publicKey),d=t(a)?Buffer.from(a.message.serialize()):a.serializeMessage(),l=(await this._proxy.rpcWallet({accessToken:e,chainType:\"solana\",hdWalletIndex:this._hdWalletIndex,entropyId:this._entropyId,entropyIdVerifier:this._entropyIdVerifier,request:{method:\"signMessage\",params:{message:d.toString(\"base64\")}}})).response.data.signature;return a.addSignature(o,Buffer.from(l,\"base64\")),{signature:await n.sendRawTransaction(a.serialize(),i)}}catch(r){console.error(r);let t=r instanceof Error?r.message:\"Unable to make wallet request\";throw this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_rpc_failed\",{method:s.method,address:this._publicKey,error:t}),new e({code:\"embedded_wallet_request_error\",error:t})}}async handleSignTransaction(s){try{let e=await this._privyInternal.getAccessToken();if(!e)throw Error(\"Missing privy token. User must be logged in\");this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_rpc_started\",{method:s.method,address:this._publicKey});let{transaction:a}=s.params,n=r(a,this._publicKey),i=t(a)?Buffer.from(a.message.serialize()):a.serializeMessage(),o=(await this._proxy.rpcWallet({accessToken:e,chainType:\"solana\",hdWalletIndex:this._hdWalletIndex,entropyId:this._entropyId,entropyIdVerifier:this._entropyIdVerifier,request:{method:\"signMessage\",params:{message:i.toString(\"base64\")}}})).response.data.signature;return a.addSignature(n,Buffer.from(o,\"base64\")),{signedTransaction:a}}catch(r){console.error(r);let t=r instanceof Error?r.message:\"Unable to make wallet request\";throw this._privyInternal.createAnalyticsEvent(\"embedded_wallet_sdk_rpc_failed\",{method:s.method,address:this._publicKey,error:t}),new e({code:\"embedded_wallet_request_error\",error:t})}}toJSON(){return`PrivyEmbeddedSolanaProvider { address: '${this._publicKey}', request: [Function] }`}constructor({proxy:e,privyInternal:r,publicKey:t,hdWalletIndex:s,entropyId:a,entropyIdVerifier:n}){this._proxy=e,this._privyInternal=r,this._publicKey=t,this._hdWalletIndex=s,this._entropyId=a,this._entropyIdVerifier=n}}export{s as EmbeddedSolanaWalletProvider};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}