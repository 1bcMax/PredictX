{"ast":null,"code":"import { getImportedPrivySolanaWallet as e, getImportedPrivyEthereumWallet as t } from \"../client/user.mjs\";\nimport { PrivyErrorCode as r, PrivyClientError as i } from \"../errors.mjs\";\nimport \"viem/utils\";\nimport \"ofetch\";\nconst o = async ({\n  emitPrivyEvent: o,\n  getAccessToken: n,\n  initializeWalletProxy: a,\n  refreshSessionAndUser: l,\n  user: s\n}, {\n  privateKey: c,\n  chainType: E\n}) => {\n  if (!s) throw o(\"linkAccount\", \"onError\", r.MUST_BE_AUTHENTICATED, {\n    linkMethod: \"siwe\"\n  }), new i(\"User must be authenticated before linking an account.\");\n  let [m, u] = await Promise.all([n(), a(15e3)]);\n  if (!u || !m) throw o(\"linkAccount\", \"onError\", r.MUST_BE_AUTHENTICATED, {\n    linkMethod: \"siwe\"\n  }), new i(\"User must be authenticated before linking an account.\");\n  await u.importWallet({\n    privateKey: c,\n    accessToken: m,\n    chainType: E\n  });\n  let T = await l(),\n    w = \"solana\" === E ? e(T) : t(T);\n  if (!w) throw o(\"createWallet\", \"onError\", r.UNKNOWN_EMBEDDED_WALLET_ERROR), Error(\"Failed to import wallet\");\n  return o(\"createWallet\", \"onSuccess\", {\n    wallet: w\n  }), w;\n};\nexport { o as importWallet };","map":{"version":3,"names":["getImportedPrivySolanaWallet","e","getImportedPrivyEthereumWallet","t","PrivyErrorCode","r","PrivyClientError","i","o","emitPrivyEvent","getAccessToken","n","initializeWalletProxy","a","refreshSessionAndUser","l","user","s","privateKey","c","chainType","E","MUST_BE_AUTHENTICATED","linkMethod","m","u","Promise","all","importWallet","accessToken","T","w","UNKNOWN_EMBEDDED_WALLET_ERROR","Error","wallet"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/react-auth/dist/esm/actions/importWallet.mjs"],"sourcesContent":["import{getImportedPrivySolanaWallet as e,getImportedPrivyEthereumWallet as t}from\"../client/user.mjs\";import{PrivyErrorCode as r,PrivyClientError as i}from\"../errors.mjs\";import\"viem/utils\";import\"ofetch\";const o=async({emitPrivyEvent:o,getAccessToken:n,initializeWalletProxy:a,refreshSessionAndUser:l,user:s},{privateKey:c,chainType:E})=>{if(!s)throw o(\"linkAccount\",\"onError\",r.MUST_BE_AUTHENTICATED,{linkMethod:\"siwe\"}),new i(\"User must be authenticated before linking an account.\");let[m,u]=await Promise.all([n(),a(15e3)]);if(!u||!m)throw o(\"linkAccount\",\"onError\",r.MUST_BE_AUTHENTICATED,{linkMethod:\"siwe\"}),new i(\"User must be authenticated before linking an account.\");await u.importWallet({privateKey:c,accessToken:m,chainType:E});let T=await l(),w=\"solana\"===E?e(T):t(T);if(!w)throw o(\"createWallet\",\"onError\",r.UNKNOWN_EMBEDDED_WALLET_ERROR),Error(\"Failed to import wallet\");return o(\"createWallet\",\"onSuccess\",{wallet:w}),w};export{o as importWallet};\n"],"mappings":"AAAA,SAAOA,4BAA4B,IAAIC,CAAC,EAACC,8BAA8B,IAAIC,CAAC,QAAK,oBAAoB;AAAC,SAAOC,cAAc,IAAIC,CAAC,EAACC,gBAAgB,IAAIC,CAAC,QAAK,eAAe;AAAC,OAAM,YAAY;AAAC,OAAM,QAAQ;AAAC,MAAMC,CAAC,GAAC,MAAAA,CAAM;EAACC,cAAc,EAACD,CAAC;EAACE,cAAc,EAACC,CAAC;EAACC,qBAAqB,EAACC,CAAC;EAACC,qBAAqB,EAACC,CAAC;EAACC,IAAI,EAACC;AAAC,CAAC,EAAC;EAACC,UAAU,EAACC,CAAC;EAACC,SAAS,EAACC;AAAC,CAAC,KAAG;EAAC,IAAG,CAACJ,CAAC,EAAC,MAAMT,CAAC,CAAC,aAAa,EAAC,SAAS,EAACH,CAAC,CAACiB,qBAAqB,EAAC;IAACC,UAAU,EAAC;EAAM,CAAC,CAAC,EAAC,IAAIhB,CAAC,CAAC,uDAAuD,CAAC;EAAC,IAAG,CAACiB,CAAC,EAACC,CAAC,CAAC,GAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,CAAChB,CAAC,CAAC,CAAC,EAACE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;EAAC,IAAG,CAACY,CAAC,IAAE,CAACD,CAAC,EAAC,MAAMhB,CAAC,CAAC,aAAa,EAAC,SAAS,EAACH,CAAC,CAACiB,qBAAqB,EAAC;IAACC,UAAU,EAAC;EAAM,CAAC,CAAC,EAAC,IAAIhB,CAAC,CAAC,uDAAuD,CAAC;EAAC,MAAMkB,CAAC,CAACG,YAAY,CAAC;IAACV,UAAU,EAACC,CAAC;IAACU,WAAW,EAACL,CAAC;IAACJ,SAAS,EAACC;EAAC,CAAC,CAAC;EAAC,IAAIS,CAAC,GAAC,MAAMf,CAAC,CAAC,CAAC;IAACgB,CAAC,GAAC,QAAQ,KAAGV,CAAC,GAACpB,CAAC,CAAC6B,CAAC,CAAC,GAAC3B,CAAC,CAAC2B,CAAC,CAAC;EAAC,IAAG,CAACC,CAAC,EAAC,MAAMvB,CAAC,CAAC,cAAc,EAAC,SAAS,EAACH,CAAC,CAAC2B,6BAA6B,CAAC,EAACC,KAAK,CAAC,yBAAyB,CAAC;EAAC,OAAOzB,CAAC,CAAC,cAAc,EAAC,WAAW,EAAC;IAAC0B,MAAM,EAACH;EAAC,CAAC,CAAC,EAACA,CAAC;AAAA,CAAC;AAAC,SAAOvB,CAAC,IAAIoB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}