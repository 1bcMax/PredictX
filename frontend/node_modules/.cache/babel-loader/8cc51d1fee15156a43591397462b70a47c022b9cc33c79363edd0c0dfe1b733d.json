{"ast":null,"code":"import { getAddress as e, toHex as t } from \"viem/utils\";\nimport { getPrivyWalletKey as i, DEFAULT_NETWORK as n } from \"../../constants.mjs\";\nimport { PrivyConnectorError as r } from \"../../errors.mjs\";\nimport s from \"../../storage.mjs\";\nimport { formatChainIdToCAIP2 as o, sleep as a, invokeUntilSettled as c } from \"../../utils/index.mjs\";\nimport { areWalletArraysEqual as h } from \"../areWalletArraysEqual.mjs\";\nimport { WalletConnector as l } from \"../base.mjs\";\nimport { getRpcTimeout as d } from \"../getRpcTimeout.mjs\";\nimport \"ofetch\";\nimport \"../get-legacy-injected-providers.mjs\";\nimport \"../is-wallet-installed.mjs\";\nimport \"../../utils/eth/getPublicClient.mjs\";\nimport \"viem\";\nimport \"../isBaseConnectedEthereumWallet.mjs\";\nimport \"eventemitter3\";\nfunction u(e) {\n  return \"ethereum\" === e.chainType;\n}\nclass m extends l {\n  buildConnectedWallet(t, i, n, s) {\n    let c = async () => !!this.wallets.find(i => e(i.address) === e(t));\n    return {\n      type: \"ethereum\",\n      address: e(t),\n      chainId: i,\n      meta: n,\n      imported: s,\n      switchChain: async n => {\n        let s, h;\n        if (!c) throw new r(\"Wallet is not currently connected.\");\n        let l = this.wallets.find(i => e(i.address) === e(t))?.chainId;\n        if (!l) throw new r(\"Unable to determine current chainId.\");\n        if (\"number\" == typeof n ? (s = `0x${n.toString(16)}`, h = n) : (s = n, h = Number(n)), l === o(s)) return;\n        let d = this.chains.find(e => e.id === h);\n        if (!d) throw new r(`Unsupported chainId: ${n}`);\n        let u = async () => {\n          await this.proxyProvider.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{\n              chainId: s\n            }]\n          });\n        };\n        try {\n          return await u();\n        } catch (e) {\n          if (((e, t) => {\n            switch (t) {\n              case \"coinbase_wallet\":\n                return e.message.includes(\"addEthereumChain\");\n              case \"rabby_wallet\":\n                return e.message.includes(\"Unrecognized chain ID\");\n              default:\n                return 4902 === e.code || e.message?.includes(\"4902\");\n            }\n          })(e, this.walletClientType)) return \"rabby_wallet\" === this.walletClientType && (await a(300)), await this.proxyProvider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: s,\n              chainName: d.name,\n              nativeCurrency: d.nativeCurrency,\n              rpcUrls: [d.rpcUrls.default?.http[0] ?? \"\"],\n              blockExplorerUrls: [d.blockExplorers?.default.url ?? \"\"]\n            }]\n          }), u();\n          if (\"rainbow\" === this.walletClientType && e.message?.includes(\"wallet_switchEthereumChain\")) throw new r(`Rainbow does not support the chainId ${i}`);\n          throw e;\n        }\n      },\n      connectedAt: Date.now(),\n      walletClientType: this.walletClientType,\n      connectorType: this.connectorType,\n      isConnected: c,\n      getEthereumProvider: async () => {\n        if (!(await c())) throw new r(\"Wallet is not currently connected.\");\n        return this.proxyProvider;\n      },\n      sign: async e => {\n        if (!(await c())) throw new r(\"Wallet is not currently connected.\");\n        return await this.sign(e);\n      },\n      disconnect: () => {\n        this.disconnect();\n      }\n    };\n  }\n  async syncAccounts(t) {\n    let r,\n      a = t;\n    try {\n      if (void 0 === a) {\n        let e = await c(() => this.proxyProvider.request({\n          method: \"eth_accounts\"\n        }), {\n          maxAttempts: 10,\n          delayMs: 500\n        });\n        console.debug(`eth_accounts for ${this.walletClientType}:`, e), Array.isArray(e) && (a = e);\n      }\n    } catch (e) {\n      console.debug(\"Wallet did not respond to eth_accounts. Defaulting to prefetched accounts.\", e);\n    }\n    if (!a || !Array.isArray(a) || a.length <= 0 || !a[0]) return;\n    let l = a[0],\n      d = e(l),\n      u = [];\n    if (\"privy\" === this.walletClientType) {\n      let e = s.get(i(d));\n      this.chains.find(t => t.id === Number(e)) || (s.del(i(d)), e = null), r = e || `0x${this.defaultChain.id.toString(16)}`;\n      try {\n        await this.proxyProvider.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{\n            chainId: r\n          }]\n        });\n      } catch (e) {\n        console.warn(`Unable to switch embedded wallet to chain ID ${r} on initialization`);\n      }\n    } else try {\n      let e = await c(() => this.proxyProvider.request({\n        method: \"eth_chainId\"\n      }), {\n        maxAttempts: 10,\n        delayMs: 500\n      });\n      if (console.debug(`eth_chainId for ${this.walletClientType}:`, e), \"string\" == typeof e) r = e;else {\n        if (\"number\" != typeof e) throw Error(\"Invalid chainId returned from provider\");\n        r = `0x${e.toString(16)}`;\n      }\n    } catch (e) {\n      console.warn(`Failed to get chainId from provider, defaulting to ${n}`, e), r = n;\n    }\n    let m = o(r);\n    if (!u.find(t => e(t.address) === d)) {\n      let t = {\n        name: this.walletBranding.name,\n        icon: \"string\" == typeof this.walletBranding.icon ? this.walletBranding.icon : void 0,\n        id: this.walletBranding.id\n      };\n      u.push(this.buildConnectedWallet(e(l), m, t, \"embedded_imported\" === this.connectorType));\n    }\n    h(u, this.wallets) || (this.wallets = u, this.emit(\"walletsUpdated\"));\n  }\n  async getConnectedWallet() {\n    let t = await this.proxyProvider.request({\n      method: \"eth_accounts\"\n    });\n    return this.wallets.sort((e, t) => t.connectedAt - e.connectedAt).find(i => t.find(t => e(t) === e(i.address))) || null;\n  }\n  async isConnected() {\n    let e = await this.proxyProvider.request({\n      method: \"eth_accounts\"\n    });\n    return Array.isArray(e) && e.length > 0;\n  }\n  async sign(e) {\n    return await this.connect({\n      showPrompt: !1\n    }), this.proxyProvider.request({\n      method: \"personal_sign\",\n      params: [t(e), this.wallets[0]?.address]\n    });\n  }\n  subscribeListeners() {\n    this.proxyProvider.on(\"accountsChanged\", this.onAccountsChanged), this.proxyProvider.on(\"chainChanged\", this.onChainChanged), this.proxyProvider.on(\"disconnect\", this.onDisconnect), this.proxyProvider.on(\"connect\", this.onConnect);\n  }\n  unsubscribeListeners() {\n    this.proxyProvider.removeListener(\"accountsChanged\", this.onAccountsChanged), this.proxyProvider.removeListener(\"chainChanged\", this.onChainChanged), this.proxyProvider.removeListener(\"disconnect\", this.onDisconnect), this.proxyProvider.removeListener(\"connect\", this.onConnect);\n  }\n  constructor(e, t, n, r) {\n    super(e), this.chainType = \"ethereum\", this.onAccountsChanged = e => {\n      0 === e.length ? this.onDisconnect() : this.syncAccounts(e);\n    }, this.onChainChanged = e => {\n      this.wallets.forEach(t => {\n        t.chainId = o(e), \"privy\" === this.walletClientType && s.put(i(t.address), e);\n      }), this.emit(\"walletsUpdated\");\n    }, this.onDisconnect = () => {\n      this.connected = !1, this.wallets = [], this.emit(\"walletsUpdated\");\n    }, this.onConnect = () => {\n      this.connected = !0, this.syncAccounts();\n    }, this.wallets = [], this.walletClientType = e, this.chains = t, this.defaultChain = n, this.rpcConfig = r, this.rpcTimeoutDuration = d(r, e), this.connected = !1, this.initialized = !1;\n  }\n}\nexport { m as EthereumWalletConnector, u as isEthereumWalletConnector };","map":{"version":3,"names":["getAddress","e","toHex","t","getPrivyWalletKey","i","DEFAULT_NETWORK","n","PrivyConnectorError","r","s","formatChainIdToCAIP2","o","sleep","a","invokeUntilSettled","c","areWalletArraysEqual","h","WalletConnector","l","getRpcTimeout","d","u","chainType","m","buildConnectedWallet","wallets","find","address","type","chainId","meta","imported","switchChain","toString","Number","chains","id","proxyProvider","request","method","params","message","includes","code","walletClientType","chainName","name","nativeCurrency","rpcUrls","default","http","blockExplorerUrls","blockExplorers","url","connectedAt","Date","now","connectorType","isConnected","getEthereumProvider","sign","disconnect","syncAccounts","maxAttempts","delayMs","console","debug","Array","isArray","length","get","del","defaultChain","warn","Error","walletBranding","icon","push","emit","getConnectedWallet","sort","connect","showPrompt","subscribeListeners","on","onAccountsChanged","onChainChanged","onDisconnect","onConnect","unsubscribeListeners","removeListener","constructor","forEach","put","connected","rpcConfig","rpcTimeoutDuration","initialized","EthereumWalletConnector","isEthereumWalletConnector"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/react-auth/dist/esm/connectors/ethereum/index.mjs"],"sourcesContent":["import{getAddress as e,toHex as t}from\"viem/utils\";import{getPrivyWalletKey as i,DEFAULT_NETWORK as n}from\"../../constants.mjs\";import{PrivyConnectorError as r}from\"../../errors.mjs\";import s from\"../../storage.mjs\";import{formatChainIdToCAIP2 as o,sleep as a,invokeUntilSettled as c}from\"../../utils/index.mjs\";import{areWalletArraysEqual as h}from\"../areWalletArraysEqual.mjs\";import{WalletConnector as l}from\"../base.mjs\";import{getRpcTimeout as d}from\"../getRpcTimeout.mjs\";import\"ofetch\";import\"../get-legacy-injected-providers.mjs\";import\"../is-wallet-installed.mjs\";import\"../../utils/eth/getPublicClient.mjs\";import\"viem\";import\"../isBaseConnectedEthereumWallet.mjs\";import\"eventemitter3\";function u(e){return\"ethereum\"===e.chainType}class m extends l{buildConnectedWallet(t,i,n,s){let c=async()=>!!this.wallets.find((i=>e(i.address)===e(t)));return{type:\"ethereum\",address:e(t),chainId:i,meta:n,imported:s,switchChain:async n=>{let s,h;if(!c)throw new r(\"Wallet is not currently connected.\");let l=this.wallets.find((i=>e(i.address)===e(t)))?.chainId;if(!l)throw new r(\"Unable to determine current chainId.\");if(\"number\"==typeof n?(s=`0x${n.toString(16)}`,h=n):(s=n,h=Number(n)),l===o(s))return;let d=this.chains.find((e=>e.id===h));if(!d)throw new r(`Unsupported chainId: ${n}`);let u=async()=>{await this.proxyProvider.request({method:\"wallet_switchEthereumChain\",params:[{chainId:s}]})};try{return await u()}catch(e){if(((e,t)=>{switch(t){case\"coinbase_wallet\":return e.message.includes(\"addEthereumChain\");case\"rabby_wallet\":return e.message.includes(\"Unrecognized chain ID\");default:return 4902===e.code||e.message?.includes(\"4902\")}})(e,this.walletClientType))return\"rabby_wallet\"===this.walletClientType&&await a(300),await this.proxyProvider.request({method:\"wallet_addEthereumChain\",params:[{chainId:s,chainName:d.name,nativeCurrency:d.nativeCurrency,rpcUrls:[d.rpcUrls.default?.http[0]??\"\"],blockExplorerUrls:[d.blockExplorers?.default.url??\"\"]}]}),u();if(\"rainbow\"===this.walletClientType&&e.message?.includes(\"wallet_switchEthereumChain\"))throw new r(`Rainbow does not support the chainId ${i}`);throw e}},connectedAt:Date.now(),walletClientType:this.walletClientType,connectorType:this.connectorType,isConnected:c,getEthereumProvider:async()=>{if(!await c())throw new r(\"Wallet is not currently connected.\");return this.proxyProvider},sign:async e=>{if(!await c())throw new r(\"Wallet is not currently connected.\");return await this.sign(e)},disconnect:()=>{this.disconnect()}}}async syncAccounts(t){let r,a=t;try{if(void 0===a){let e=await c((()=>this.proxyProvider.request({method:\"eth_accounts\"})),{maxAttempts:10,delayMs:500});console.debug(`eth_accounts for ${this.walletClientType}:`,e),Array.isArray(e)&&(a=e)}}catch(e){console.debug(\"Wallet did not respond to eth_accounts. Defaulting to prefetched accounts.\",e)}if(!a||!Array.isArray(a)||a.length<=0||!a[0])return;let l=a[0],d=e(l),u=[];if(\"privy\"===this.walletClientType){let e=s.get(i(d));this.chains.find((t=>t.id===Number(e)))||(s.del(i(d)),e=null),r=e||`0x${this.defaultChain.id.toString(16)}`;try{await this.proxyProvider.request({method:\"wallet_switchEthereumChain\",params:[{chainId:r}]})}catch(e){console.warn(`Unable to switch embedded wallet to chain ID ${r} on initialization`)}}else try{let e=await c((()=>this.proxyProvider.request({method:\"eth_chainId\"})),{maxAttempts:10,delayMs:500});if(console.debug(`eth_chainId for ${this.walletClientType}:`,e),\"string\"==typeof e)r=e;else{if(\"number\"!=typeof e)throw Error(\"Invalid chainId returned from provider\");r=`0x${e.toString(16)}`}}catch(e){console.warn(`Failed to get chainId from provider, defaulting to ${n}`,e),r=n}let m=o(r);if(!u.find((t=>e(t.address)===d))){let t={name:this.walletBranding.name,icon:\"string\"==typeof this.walletBranding.icon?this.walletBranding.icon:void 0,id:this.walletBranding.id};u.push(this.buildConnectedWallet(e(l),m,t,\"embedded_imported\"===this.connectorType))}h(u,this.wallets)||(this.wallets=u,this.emit(\"walletsUpdated\"))}async getConnectedWallet(){let t=await this.proxyProvider.request({method:\"eth_accounts\"});return this.wallets.sort(((e,t)=>t.connectedAt-e.connectedAt)).find((i=>t.find((t=>e(t)===e(i.address)))))||null}async isConnected(){let e=await this.proxyProvider.request({method:\"eth_accounts\"});return Array.isArray(e)&&e.length>0}async sign(e){return await this.connect({showPrompt:!1}),this.proxyProvider.request({method:\"personal_sign\",params:[t(e),this.wallets[0]?.address]})}subscribeListeners(){this.proxyProvider.on(\"accountsChanged\",this.onAccountsChanged),this.proxyProvider.on(\"chainChanged\",this.onChainChanged),this.proxyProvider.on(\"disconnect\",this.onDisconnect),this.proxyProvider.on(\"connect\",this.onConnect)}unsubscribeListeners(){this.proxyProvider.removeListener(\"accountsChanged\",this.onAccountsChanged),this.proxyProvider.removeListener(\"chainChanged\",this.onChainChanged),this.proxyProvider.removeListener(\"disconnect\",this.onDisconnect),this.proxyProvider.removeListener(\"connect\",this.onConnect)}constructor(e,t,n,r){super(e),this.chainType=\"ethereum\",this.onAccountsChanged=e=>{0===e.length?this.onDisconnect():this.syncAccounts(e)},this.onChainChanged=e=>{this.wallets.forEach((t=>{t.chainId=o(e),\"privy\"===this.walletClientType&&s.put(i(t.address),e)})),this.emit(\"walletsUpdated\")},this.onDisconnect=()=>{this.connected=!1,this.wallets=[],this.emit(\"walletsUpdated\")},this.onConnect=()=>{this.connected=!0,this.syncAccounts()},this.wallets=[],this.walletClientType=e,this.chains=t,this.defaultChain=n,this.rpcConfig=r,this.rpcTimeoutDuration=d(r,e),this.connected=!1,this.initialized=!1}}export{m as EthereumWalletConnector,u as isEthereumWalletConnector};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}