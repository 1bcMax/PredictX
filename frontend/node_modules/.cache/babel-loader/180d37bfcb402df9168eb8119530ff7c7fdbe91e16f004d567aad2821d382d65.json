{"ast":null,"code":"import { getWalletPublicKeyFromTransaction as e, isVersionedTransaction as a } from \"../../lib/solana/transaction.mjs\";\nimport \"../../lib/solana/index.mjs\";\nimport \"../../utils/buffer/readBigInt64LE.mjs\";\nimport \"../../lib/attempt.mjs\";\nasync function t({\n  tx: t,\n  accessToken: r,\n  walletProxy: n,\n  entropyId: s,\n  entropyIdVerifier: i,\n  transactingWalletAddress: o,\n  transactingWalletIndex: l\n}) {\n  let c = e(t, o),\n    d = a(t) ? Buffer.from(t.message.serialize()) : t.serializeMessage(),\n    {\n      response: p\n    } = await n.rpc({\n      accessToken: r,\n      entropyId: s,\n      entropyIdVerifier: i,\n      chainType: \"solana\",\n      hdWalletIndex: l,\n      request: {\n        method: \"signMessage\",\n        params: {\n          message: d.toString(\"base64\")\n        }\n      }\n    }),\n    g = p.data.signature,\n    f = Buffer.from(g, \"base64\");\n  t.addSignature(c, f);\n}\nasync function r({\n  tx: e,\n  connection: a,\n  accessToken: r,\n  walletProxy: n,\n  entropyId: s,\n  entropyIdVerifier: i,\n  transactingWalletAddress: o,\n  transactingWalletIndex: l,\n  transactionOptions: c\n}) {\n  let d;\n  try {\n    await t({\n      tx: e,\n      accessToken: r,\n      walletProxy: n,\n      entropyId: s,\n      entropyIdVerifier: i,\n      transactingWalletAddress: o,\n      transactingWalletIndex: l\n    });\n    let p = e.serialize();\n    d = await a.sendRawTransaction(p, c);\n    let g = await a.confirmTransaction(d);\n    if (g.value.err || g.value.err) {\n      let e = g.value.err || g.value.err;\n      if (\"string\" == typeof e) throw Error(e);\n      throw e;\n    }\n    return {\n      signature: d,\n      signedTransaction: e,\n      receipt: await a.getParsedTransaction(d, {\n        maxSupportedTransactionVersion: 0\n      })\n    };\n  } catch (e) {\n    throw e.txSignature = d, e;\n  }\n}\nexport { r as sendSolanaTransaction, t as signSolanaTransaction };","map":{"version":3,"names":["getWalletPublicKeyFromTransaction","e","isVersionedTransaction","a","t","tx","accessToken","r","walletProxy","n","entropyId","s","entropyIdVerifier","i","transactingWalletAddress","o","transactingWalletIndex","l","c","d","Buffer","from","message","serialize","serializeMessage","response","p","rpc","chainType","hdWalletIndex","request","method","params","toString","g","data","signature","f","addSignature","connection","transactionOptions","sendRawTransaction","confirmTransaction","value","err","Error","signedTransaction","receipt","getParsedTransaction","maxSupportedTransactionVersion","txSignature","sendSolanaTransaction","signSolanaTransaction"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/react-auth/dist/esm/embedded-wallets/solana/transaction.mjs"],"sourcesContent":["import{getWalletPublicKeyFromTransaction as e,isVersionedTransaction as a}from\"../../lib/solana/transaction.mjs\";import\"../../lib/solana/index.mjs\";import\"../../utils/buffer/readBigInt64LE.mjs\";import\"../../lib/attempt.mjs\";async function t({tx:t,accessToken:r,walletProxy:n,entropyId:s,entropyIdVerifier:i,transactingWalletAddress:o,transactingWalletIndex:l}){let c=e(t,o),d=a(t)?Buffer.from(t.message.serialize()):t.serializeMessage(),{response:p}=await n.rpc({accessToken:r,entropyId:s,entropyIdVerifier:i,chainType:\"solana\",hdWalletIndex:l,request:{method:\"signMessage\",params:{message:d.toString(\"base64\")}}}),g=p.data.signature,f=Buffer.from(g,\"base64\");t.addSignature(c,f)}async function r({tx:e,connection:a,accessToken:r,walletProxy:n,entropyId:s,entropyIdVerifier:i,transactingWalletAddress:o,transactingWalletIndex:l,transactionOptions:c}){let d;try{await t({tx:e,accessToken:r,walletProxy:n,entropyId:s,entropyIdVerifier:i,transactingWalletAddress:o,transactingWalletIndex:l});let p=e.serialize();d=await a.sendRawTransaction(p,c);let g=await a.confirmTransaction(d);if(g.value.err||g.value.err){let e=g.value.err||g.value.err;if(\"string\"==typeof e)throw Error(e);throw e}return{signature:d,signedTransaction:e,receipt:await a.getParsedTransaction(d,{maxSupportedTransactionVersion:0})}}catch(e){throw e.txSignature=d,e}}export{r as sendSolanaTransaction,t as signSolanaTransaction};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}