{"ast":null,"code":"import { z as r } from \"zod\";\nimport { InvalidInputError as t, PrivyErrorCode as o } from \"@privy-io/api-base\";\nconst e = r.object({\n  test_account_id: r.string({\n    required_error: \"Test account ID must be provided\",\n    invalid_type_error: \"Test account ID is not a valid string\"\n  }).min(1)\n}).catch(({\n  error: r\n}) => {\n  throw new t(r.message, o.INVALID_DATA);\n});\nexport { e as TestAccountIdFromPath };","map":{"version":3,"names":["z","r","InvalidInputError","t","PrivyErrorCode","o","e","object","test_account_id","string","required_error","invalid_type_error","min","catch","error","message","INVALID_DATA","TestAccountIdFromPath"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/public-api/dist/esm/schemas/test-account.mjs"],"sourcesContent":["import{z as r}from\"zod\";import{InvalidInputError as t,PrivyErrorCode as o}from\"@privy-io/api-base\";const e=r.object({test_account_id:r.string({required_error:\"Test account ID must be provided\",invalid_type_error:\"Test account ID is not a valid string\"}).min(1)}).catch((({error:r})=>{throw new t(r.message,o.INVALID_DATA)}));export{e as TestAccountIdFromPath};\n"],"mappings":"AAAA,SAAOA,CAAC,IAAIC,CAAC,QAAK,KAAK;AAAC,SAAOC,iBAAiB,IAAIC,CAAC,EAACC,cAAc,IAAIC,CAAC,QAAK,oBAAoB;AAAC,MAAMC,CAAC,GAACL,CAAC,CAACM,MAAM,CAAC;EAACC,eAAe,EAACP,CAAC,CAACQ,MAAM,CAAC;IAACC,cAAc,EAAC,kCAAkC;IAACC,kBAAkB,EAAC;EAAuC,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC;AAAC,CAAC,CAAC,CAACC,KAAK,CAAE,CAAC;EAACC,KAAK,EAACb;AAAC,CAAC,KAAG;EAAC,MAAM,IAAIE,CAAC,CAACF,CAAC,CAACc,OAAO,EAACV,CAAC,CAACW,YAAY,CAAC;AAAA,CAAE,CAAC;AAAC,SAAOV,CAAC,IAAIW,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}