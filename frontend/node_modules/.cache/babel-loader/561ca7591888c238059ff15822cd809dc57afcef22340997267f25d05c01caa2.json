{"ast":null,"code":"import { z as e } from \"zod\";\nimport { SUPPORTED_SMART_WALLET_TYPES as t } from \"../constants/smart-wallets.mjs\";\nexport { BICONOMY, COINBASE_SMART_WALLET, KERNEL, LIGHT_ACCOUNT, SAFE, THIRDWEB } from \"../constants/smart-wallets.mjs\";\nconst r = e.enum(t, {\n  invalid_type_error: \"Please specify a supported provider.\",\n  required_error: \"Please specify a supported provider.\"\n});\nlet n = e.string().regex(/^eip155:\\d+$/, \"Chain ID must be an eip155 chain ID\");\nconst a = e.object({\n  policy_id: e.string().uuid()\n});\nlet i = e.object({\n  chain_id: n,\n  bundler_url: e.string(),\n  paymaster_url: e.string().optional(),\n  rpc_url: e.string().optional(),\n  chain_name: e.string().optional(),\n  paymaster_context: a.optional()\n});\nconst o = e.object({\n    chain_id: n,\n    bundler_url: e.string().optional(),\n    paymaster_url: e.string().optional(),\n    rpc_url: e.string().optional(),\n    chain_name: e.string().optional(),\n    paymaster_context: a.optional()\n  }),\n  l = e.discriminatedUnion(\"enabled\", [e.object({\n    enabled: e.literal(!1)\n  }), e.object({\n    enabled: e.literal(!0),\n    smart_wallet_type: r,\n    configured_networks: e.array(i).min(1)\n  })]),\n  s = e.discriminatedUnion(\"enabled\", [e.object({\n    enabled: e.literal(!1)\n  }), e.object({\n    enabled: e.literal(!0),\n    smart_wallet_type: r,\n    configured_networks: e.array(o).min(1)\n  })]),\n  p = l;\nexport { a as AlchemyPaymasterContextSchema, t as SUPPORTED_SMART_WALLET_TYPES, s as SmartWalletConfigurationInputSchema, p as SmartWalletConfigurationResponseSchema, l as SmartWalletConfigurationSchema, o as SmartWalletNetworkConfigurationInputSchema, r as SmartWalletProvider };","map":{"version":3,"names":["z","e","SUPPORTED_SMART_WALLET_TYPES","t","BICONOMY","COINBASE_SMART_WALLET","KERNEL","LIGHT_ACCOUNT","SAFE","THIRDWEB","r","enum","invalid_type_error","required_error","n","string","regex","a","object","policy_id","uuid","i","chain_id","bundler_url","paymaster_url","optional","rpc_url","chain_name","paymaster_context","o","l","discriminatedUnion","enabled","literal","smart_wallet_type","configured_networks","array","min","s","p","AlchemyPaymasterContextSchema","SmartWalletConfigurationInputSchema","SmartWalletConfigurationResponseSchema","SmartWalletConfigurationSchema","SmartWalletNetworkConfigurationInputSchema","SmartWalletProvider"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/public-api/dist/esm/schemas/smart-wallet-config.mjs"],"sourcesContent":["import{z as e}from\"zod\";import{SUPPORTED_SMART_WALLET_TYPES as t}from\"../constants/smart-wallets.mjs\";export{BICONOMY,COINBASE_SMART_WALLET,KERNEL,LIGHT_ACCOUNT,SAFE,THIRDWEB}from\"../constants/smart-wallets.mjs\";const r=e.enum(t,{invalid_type_error:\"Please specify a supported provider.\",required_error:\"Please specify a supported provider.\"});let n=e.string().regex(/^eip155:\\d+$/,\"Chain ID must be an eip155 chain ID\");const a=e.object({policy_id:e.string().uuid()});let i=e.object({chain_id:n,bundler_url:e.string(),paymaster_url:e.string().optional(),rpc_url:e.string().optional(),chain_name:e.string().optional(),paymaster_context:a.optional()});const o=e.object({chain_id:n,bundler_url:e.string().optional(),paymaster_url:e.string().optional(),rpc_url:e.string().optional(),chain_name:e.string().optional(),paymaster_context:a.optional()}),l=e.discriminatedUnion(\"enabled\",[e.object({enabled:e.literal(!1)}),e.object({enabled:e.literal(!0),smart_wallet_type:r,configured_networks:e.array(i).min(1)})]),s=e.discriminatedUnion(\"enabled\",[e.object({enabled:e.literal(!1)}),e.object({enabled:e.literal(!0),smart_wallet_type:r,configured_networks:e.array(o).min(1)})]),p=l;export{a as AlchemyPaymasterContextSchema,t as SUPPORTED_SMART_WALLET_TYPES,s as SmartWalletConfigurationInputSchema,p as SmartWalletConfigurationResponseSchema,l as SmartWalletConfigurationSchema,o as SmartWalletNetworkConfigurationInputSchema,r as SmartWalletProvider};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}