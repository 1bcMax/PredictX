{"ast":null,"code":"import { BigNumber as e } from \"@ethersproject/bignumber\";\nimport { PrivyProviderRpcError as t } from \"../errors.mjs\";\nimport { isOpStack as i, estimateOpStackL1Gas as r } from \"../gas/op-stack.mjs\";\nimport { QuantityToBigNumber as a } from \"./ethers.mjs\";\nimport \"../types.mjs\";\nimport \"@ethersproject/contracts\";\nimport \"@ethersproject/transactions\";\nimport \"../../chains/base.mjs\";\nimport \"../../chains/baseGoerli.mjs\";\nimport \"../../chains/baseSepolia.mjs\";\nimport \"../../chains/optimism.mjs\";\nimport \"../../chains/optimismGoerli.mjs\";\nimport \"../../chains/optimismSepolia.mjs\";\nimport \"../../chains/zora.mjs\";\nimport \"../../chains/zoraSepolia.mjs\";\nimport \"../../chains/zoraTestnet.mjs\";\nconst s = async (e, t) => {\n  if (void 0 === e.type && (e.type = 2), 2 === e.type) {\n    if (!e.maxFeePerGas || !e.maxPriorityFeePerGas) {\n      let i = await t.getFeeData();\n      e.maxFeePerGas || (e.maxFeePerGas = i.maxFeePerGas?.toHexString()), e.maxPriorityFeePerGas || (e.maxPriorityFeePerGas = i.maxPriorityFeePerGas?.toHexString());\n    }\n  } else if (!e.gasPrice) {\n    let i = await t.getFeeData();\n    e.gasPrice = i.gasPrice?.toHexString();\n  }\n  return e;\n};\nasync function o(s, o) {\n  if (!s.gasLimit) throw new t(\"gasLimit was not successfully set for transaction.\");\n  let n = a(s.gasLimit),\n    m = e.from(0);\n  if (2 == s.type) {\n    if (!s.maxFeePerGas) throw new t(\"maxFeePerGas was not successfully set for transaction of type 2.\");\n    m = a(s.maxFeePerGas);\n  } else {\n    if (!s.gasPrice) throw new t(\"gasPrice was not successfully set for transaction of type 0 or 1.\");\n    m = a(s.gasPrice);\n  }\n  let c = n.mul(m),\n    l = e.from(0);\n  if (s.chainId && i(s.chainId)) try {\n    l = await r(s, o), c = c.add(l);\n  } catch (e) {}\n  return {\n    totalGasEstimate: c,\n    l1ExecutionFeeEstimate: l\n  };\n}\nasync function n(e, t) {\n  try {\n    return (await t.estimateGas(e)).toHexString();\n  } catch (i) {\n    let r;\n    if (\"message\" in i && i.message.includes(\"insufficient funds\") && (console.warn(`Gas estimation failed with error: ${i}. Retrying gas estimation by omitting the 'value'`), r = await async function ({\n      txRequest: e,\n      provider: t\n    }) {\n      try {\n        let i = {\n          ...e,\n          value: void 0\n        };\n        return (await t.estimateGas(i)).toHexString();\n      } catch (e) {\n        return console.warn(`Gas estimation failed with error: ${e} when omitting the 'value'`), null;\n      }\n    }({\n      txRequest: e,\n      provider: t\n    })), r || (console.warn(`Gas estimation failed with error: ${i}. Retrying gas estimation by omitting the 'from'`), r = await async function ({\n      txRequest: e,\n      provider: t\n    }) {\n      try {\n        let i = {\n          ...e,\n          from: void 0\n        };\n        return (await t.estimateGas(i)).toHexString();\n      } catch (e) {\n        return console.warn(`Gas estimation failed with error: ${e} when omitting the 'from' address`), null;\n      }\n    }({\n      txRequest: e,\n      provider: t\n    })), !r) throw i;\n    return r;\n  }\n}\nexport { o as calculateTotalGasEstimate, s as defaultGasForEvmChain, n as defaultGasLimit };","map":{"version":3,"names":["BigNumber","e","PrivyProviderRpcError","t","isOpStack","i","estimateOpStackL1Gas","r","QuantityToBigNumber","a","s","type","maxFeePerGas","maxPriorityFeePerGas","getFeeData","toHexString","gasPrice","o","gasLimit","n","m","from","c","mul","l","chainId","add","totalGasEstimate","l1ExecutionFeeEstimate","estimateGas","message","includes","console","warn","txRequest","provider","value","calculateTotalGasEstimate","defaultGasForEvmChain","defaultGasLimit"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/react-auth/node_modules/@privy-io/js-sdk-core/dist/esm/embedded/utils/gas.mjs"],"sourcesContent":["import{BigNumber as e}from\"@ethersproject/bignumber\";import{PrivyProviderRpcError as t}from\"../errors.mjs\";import{isOpStack as i,estimateOpStackL1Gas as r}from\"../gas/op-stack.mjs\";import{QuantityToBigNumber as a}from\"./ethers.mjs\";import\"../types.mjs\";import\"@ethersproject/contracts\";import\"@ethersproject/transactions\";import\"../../chains/base.mjs\";import\"../../chains/baseGoerli.mjs\";import\"../../chains/baseSepolia.mjs\";import\"../../chains/optimism.mjs\";import\"../../chains/optimismGoerli.mjs\";import\"../../chains/optimismSepolia.mjs\";import\"../../chains/zora.mjs\";import\"../../chains/zoraSepolia.mjs\";import\"../../chains/zoraTestnet.mjs\";const s=async(e,t)=>{if(void 0===e.type&&(e.type=2),2===e.type){if(!e.maxFeePerGas||!e.maxPriorityFeePerGas){let i=await t.getFeeData();e.maxFeePerGas||(e.maxFeePerGas=i.maxFeePerGas?.toHexString()),e.maxPriorityFeePerGas||(e.maxPriorityFeePerGas=i.maxPriorityFeePerGas?.toHexString())}}else if(!e.gasPrice){let i=await t.getFeeData();e.gasPrice=i.gasPrice?.toHexString()}return e};async function o(s,o){if(!s.gasLimit)throw new t(\"gasLimit was not successfully set for transaction.\");let n=a(s.gasLimit),m=e.from(0);if(2==s.type){if(!s.maxFeePerGas)throw new t(\"maxFeePerGas was not successfully set for transaction of type 2.\");m=a(s.maxFeePerGas)}else{if(!s.gasPrice)throw new t(\"gasPrice was not successfully set for transaction of type 0 or 1.\");m=a(s.gasPrice)}let c=n.mul(m),l=e.from(0);if(s.chainId&&i(s.chainId))try{l=await r(s,o),c=c.add(l)}catch(e){}return{totalGasEstimate:c,l1ExecutionFeeEstimate:l}}async function n(e,t){try{return(await t.estimateGas(e)).toHexString()}catch(i){let r;if(\"message\"in i&&i.message.includes(\"insufficient funds\")&&(console.warn(`Gas estimation failed with error: ${i}. Retrying gas estimation by omitting the 'value'`),r=await async function({txRequest:e,provider:t}){try{let i={...e,value:void 0};return(await t.estimateGas(i)).toHexString()}catch(e){return console.warn(`Gas estimation failed with error: ${e} when omitting the 'value'`),null}}({txRequest:e,provider:t})),r||(console.warn(`Gas estimation failed with error: ${i}. Retrying gas estimation by omitting the 'from'`),r=await async function({txRequest:e,provider:t}){try{let i={...e,from:void 0};return(await t.estimateGas(i)).toHexString()}catch(e){return console.warn(`Gas estimation failed with error: ${e} when omitting the 'from' address`),null}}({txRequest:e,provider:t})),!r)throw i;return r}}export{o as calculateTotalGasEstimate,s as defaultGasForEvmChain,n as defaultGasLimit};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}