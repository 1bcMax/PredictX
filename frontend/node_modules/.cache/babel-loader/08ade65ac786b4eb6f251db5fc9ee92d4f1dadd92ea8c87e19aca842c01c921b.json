{"ast":null,"code":"import { BigNumber as r } from \"@ethersproject/bignumber\";\nimport { arbitrum as i } from \"../../chains/arbitrum.mjs\";\nimport { arbitrumGoerli as t } from \"../../chains/arbitrumGoerli.mjs\";\nimport { arbitrumSepolia as e } from \"../../chains/arbitrumSepolia.mjs\";\nimport { convertBigNumberish as a } from \"../utils/ethers.mjs\";\nconst o = r => [i.id, t.id, e.id].includes(r),\n  m = async (i, t) => {\n    if (!o(i.chainId)) throw Error(\"Invalid chain ID for Arbitrum gas estimation.\");\n    if (void 0 === i.type && (i.type = 2), i.maxFeePerGas) return i;\n    try {\n      let {\n        lastBaseFeePerGas: e\n      } = await t.getFeeData();\n      if (e) {\n        let t = e.mul(r.from(120)).div(r.from(100));\n        i.maxFeePerGas = a(t), i.maxPriorityFeePerGas = a(r.from(0));\n      }\n    } catch (r) {\n      throw Error(`Failed to set gas price for Arbitrum transaction: ${r}.`);\n    }\n    return i;\n  };\nexport { m as defaultGasForArbitrum, o as isArbitrum };","map":{"version":3,"names":["BigNumber","r","arbitrum","i","arbitrumGoerli","t","arbitrumSepolia","e","convertBigNumberish","a","o","id","includes","m","chainId","Error","type","maxFeePerGas","lastBaseFeePerGas","getFeeData","mul","from","div","maxPriorityFeePerGas","defaultGasForArbitrum","isArbitrum"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/react-auth/node_modules/@privy-io/js-sdk-core/dist/esm/embedded/gas/arbitrum.mjs"],"sourcesContent":["import{BigNumber as r}from\"@ethersproject/bignumber\";import{arbitrum as i}from\"../../chains/arbitrum.mjs\";import{arbitrumGoerli as t}from\"../../chains/arbitrumGoerli.mjs\";import{arbitrumSepolia as e}from\"../../chains/arbitrumSepolia.mjs\";import{convertBigNumberish as a}from\"../utils/ethers.mjs\";const o=r=>[i.id,t.id,e.id].includes(r),m=async(i,t)=>{if(!o(i.chainId))throw Error(\"Invalid chain ID for Arbitrum gas estimation.\");if(void 0===i.type&&(i.type=2),i.maxFeePerGas)return i;try{let{lastBaseFeePerGas:e}=await t.getFeeData();if(e){let t=e.mul(r.from(120)).div(r.from(100));i.maxFeePerGas=a(t),i.maxPriorityFeePerGas=a(r.from(0))}}catch(r){throw Error(`Failed to set gas price for Arbitrum transaction: ${r}.`)}return i};export{m as defaultGasForArbitrum,o as isArbitrum};\n"],"mappings":"AAAA,SAAOA,SAAS,IAAIC,CAAC,QAAK,0BAA0B;AAAC,SAAOC,QAAQ,IAAIC,CAAC,QAAK,2BAA2B;AAAC,SAAOC,cAAc,IAAIC,CAAC,QAAK,iCAAiC;AAAC,SAAOC,eAAe,IAAIC,CAAC,QAAK,kCAAkC;AAAC,SAAOC,mBAAmB,IAAIC,CAAC,QAAK,qBAAqB;AAAC,MAAMC,CAAC,GAACT,CAAC,IAAE,CAACE,CAAC,CAACQ,EAAE,EAACN,CAAC,CAACM,EAAE,EAACJ,CAAC,CAACI,EAAE,CAAC,CAACC,QAAQ,CAACX,CAAC,CAAC;EAACY,CAAC,GAAC,MAAAA,CAAMV,CAAC,EAACE,CAAC,KAAG;IAAC,IAAG,CAACK,CAAC,CAACP,CAAC,CAACW,OAAO,CAAC,EAAC,MAAMC,KAAK,CAAC,+CAA+C,CAAC;IAAC,IAAG,KAAK,CAAC,KAAGZ,CAAC,CAACa,IAAI,KAAGb,CAAC,CAACa,IAAI,GAAC,CAAC,CAAC,EAACb,CAAC,CAACc,YAAY,EAAC,OAAOd,CAAC;IAAC,IAAG;MAAC,IAAG;QAACe,iBAAiB,EAACX;MAAC,CAAC,GAAC,MAAMF,CAAC,CAACc,UAAU,CAAC,CAAC;MAAC,IAAGZ,CAAC,EAAC;QAAC,IAAIF,CAAC,GAACE,CAAC,CAACa,GAAG,CAACnB,CAAC,CAACoB,IAAI,CAAC,GAAG,CAAC,CAAC,CAACC,GAAG,CAACrB,CAAC,CAACoB,IAAI,CAAC,GAAG,CAAC,CAAC;QAAClB,CAAC,CAACc,YAAY,GAACR,CAAC,CAACJ,CAAC,CAAC,EAACF,CAAC,CAACoB,oBAAoB,GAACd,CAAC,CAACR,CAAC,CAACoB,IAAI,CAAC,CAAC,CAAC,CAAC;MAAA;IAAC,CAAC,QAAMpB,CAAC,EAAC;MAAC,MAAMc,KAAK,CAAC,qDAAqDd,CAAC,GAAG,CAAC;IAAA;IAAC,OAAOE,CAAC;EAAA,CAAC;AAAC,SAAOU,CAAC,IAAIW,qBAAqB,EAACd,CAAC,IAAIe,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}