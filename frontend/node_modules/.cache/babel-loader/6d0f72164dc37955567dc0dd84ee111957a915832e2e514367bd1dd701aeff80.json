{"ast":null,"code":"import { parseUnits as e } from \"@ethersproject/units\";\nimport t from \"fetch-retry\";\nimport { polygon as o } from \"../../chains/polygon.mjs\";\nimport { polygonAmoy as r } from \"../../chains/polygonAmoy.mjs\";\nimport { polygonMumbai as a } from \"../../chains/polygonMumbai.mjs\";\nlet i = t(fetch, {\n  retries: 3,\n  retryDelay: 500\n});\nconst s = e => [o.id, a.id, r.id].includes(e);\nlet n = t => ({\n    maxPriorityFee: e(t.maxPriorityFee.toFixed(9), \"gwei\").toHexString(),\n    maxFee: e(t.maxFee.toFixed(9), \"gwei\").toHexString()\n  }),\n  m = e => ({\n    safeLow: n(e.safeLow),\n    standard: n(e.standard),\n    fast: n(e.fast)\n  });\nconst c = async e => {\n  let t = \"\";\n  switch (e) {\n    case o.id:\n      t = \"https://gasstation.polygon.technology/v2\";\n      break;\n    case a.id:\n      t = \"https://gasstation-testnet.polygon.technology/v2\";\n      break;\n    case r.id:\n      t = \"https://gasstation.polygon.technology/amoy\";\n      break;\n    default:\n      throw Error(`chainId ${e} does not support polygon gas stations`);\n  }\n  let s = await i(t),\n    n = await s.json();\n  if (s.status > 399) throw n;\n  return m(n);\n};\nasync function d(e) {\n  if (!s(e.chainId)) throw Error(\"Invalid chain ID for Polygon gas estimation.\");\n  if (void 0 === e.type && (e.type = 2), e.maxPriorityFeePerGas && e.maxFeePerGas) return e;\n  try {\n    let {\n      standard: t\n    } = await c(e.chainId);\n    e.maxPriorityFeePerGas || (e.maxPriorityFeePerGas = t.maxPriorityFee), e.maxFeePerGas || (e.maxFeePerGas = t.maxFee), e.gasPrice && (console.warn(\"`gasPrice` is not supported on this chain and will be ignored. Use `maxPriorityFeePerGas` and/or `maxFeePerGas` instead.\"), delete e.gasPrice);\n  } catch (e) {\n    throw Error(`Failed to set gas prices from Polygon gas station with error: ${e}.`);\n  }\n  return e;\n}\nexport { d as defaultGasForPolygon, c as getPolygonGasStationFees, s as isPolygon };","map":{"version":3,"names":["parseUnits","e","t","polygon","o","polygonAmoy","r","polygonMumbai","a","i","fetch","retries","retryDelay","s","id","includes","n","maxPriorityFee","toFixed","toHexString","maxFee","m","safeLow","standard","fast","c","Error","json","status","d","chainId","type","maxPriorityFeePerGas","maxFeePerGas","gasPrice","console","warn","defaultGasForPolygon","getPolygonGasStationFees","isPolygon"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/react-auth/node_modules/@privy-io/js-sdk-core/dist/esm/embedded/gas/polygon.mjs"],"sourcesContent":["import{parseUnits as e}from\"@ethersproject/units\";import t from\"fetch-retry\";import{polygon as o}from\"../../chains/polygon.mjs\";import{polygonAmoy as r}from\"../../chains/polygonAmoy.mjs\";import{polygonMumbai as a}from\"../../chains/polygonMumbai.mjs\";let i=t(fetch,{retries:3,retryDelay:500});const s=e=>[o.id,a.id,r.id].includes(e);let n=t=>({maxPriorityFee:e(t.maxPriorityFee.toFixed(9),\"gwei\").toHexString(),maxFee:e(t.maxFee.toFixed(9),\"gwei\").toHexString()}),m=e=>({safeLow:n(e.safeLow),standard:n(e.standard),fast:n(e.fast)});const c=async e=>{let t=\"\";switch(e){case o.id:t=\"https://gasstation.polygon.technology/v2\";break;case a.id:t=\"https://gasstation-testnet.polygon.technology/v2\";break;case r.id:t=\"https://gasstation.polygon.technology/amoy\";break;default:throw Error(`chainId ${e} does not support polygon gas stations`)}let s=await i(t),n=await s.json();if(s.status>399)throw n;return m(n)};async function d(e){if(!s(e.chainId))throw Error(\"Invalid chain ID for Polygon gas estimation.\");if(void 0===e.type&&(e.type=2),e.maxPriorityFeePerGas&&e.maxFeePerGas)return e;try{let{standard:t}=await c(e.chainId);e.maxPriorityFeePerGas||(e.maxPriorityFeePerGas=t.maxPriorityFee),e.maxFeePerGas||(e.maxFeePerGas=t.maxFee),e.gasPrice&&(console.warn(\"`gasPrice` is not supported on this chain and will be ignored. Use `maxPriorityFeePerGas` and/or `maxFeePerGas` instead.\"),delete e.gasPrice)}catch(e){throw Error(`Failed to set gas prices from Polygon gas station with error: ${e}.`)}return e}export{d as defaultGasForPolygon,c as getPolygonGasStationFees,s as isPolygon};\n"],"mappings":"AAAA,SAAOA,UAAU,IAAIC,CAAC,QAAK,sBAAsB;AAAC,OAAOC,CAAC,MAAK,aAAa;AAAC,SAAOC,OAAO,IAAIC,CAAC,QAAK,0BAA0B;AAAC,SAAOC,WAAW,IAAIC,CAAC,QAAK,8BAA8B;AAAC,SAAOC,aAAa,IAAIC,CAAC,QAAK,gCAAgC;AAAC,IAAIC,CAAC,GAACP,CAAC,CAACQ,KAAK,EAAC;EAACC,OAAO,EAAC,CAAC;EAACC,UAAU,EAAC;AAAG,CAAC,CAAC;AAAC,MAAMC,CAAC,GAACZ,CAAC,IAAE,CAACG,CAAC,CAACU,EAAE,EAACN,CAAC,CAACM,EAAE,EAACR,CAAC,CAACQ,EAAE,CAAC,CAACC,QAAQ,CAACd,CAAC,CAAC;AAAC,IAAIe,CAAC,GAACd,CAAC,KAAG;IAACe,cAAc,EAAChB,CAAC,CAACC,CAAC,CAACe,cAAc,CAACC,OAAO,CAAC,CAAC,CAAC,EAAC,MAAM,CAAC,CAACC,WAAW,CAAC,CAAC;IAACC,MAAM,EAACnB,CAAC,CAACC,CAAC,CAACkB,MAAM,CAACF,OAAO,CAAC,CAAC,CAAC,EAAC,MAAM,CAAC,CAACC,WAAW,CAAC;EAAC,CAAC,CAAC;EAACE,CAAC,GAACpB,CAAC,KAAG;IAACqB,OAAO,EAACN,CAAC,CAACf,CAAC,CAACqB,OAAO,CAAC;IAACC,QAAQ,EAACP,CAAC,CAACf,CAAC,CAACsB,QAAQ,CAAC;IAACC,IAAI,EAACR,CAAC,CAACf,CAAC,CAACuB,IAAI;EAAC,CAAC,CAAC;AAAC,MAAMC,CAAC,GAAC,MAAMxB,CAAC,IAAE;EAAC,IAAIC,CAAC,GAAC,EAAE;EAAC,QAAOD,CAAC;IAAE,KAAKG,CAAC,CAACU,EAAE;MAACZ,CAAC,GAAC,0CAA0C;MAAC;IAAM,KAAKM,CAAC,CAACM,EAAE;MAACZ,CAAC,GAAC,kDAAkD;MAAC;IAAM,KAAKI,CAAC,CAACQ,EAAE;MAACZ,CAAC,GAAC,4CAA4C;MAAC;IAAM;MAAQ,MAAMwB,KAAK,CAAC,WAAWzB,CAAC,wCAAwC,CAAC;EAAA;EAAC,IAAIY,CAAC,GAAC,MAAMJ,CAAC,CAACP,CAAC,CAAC;IAACc,CAAC,GAAC,MAAMH,CAAC,CAACc,IAAI,CAAC,CAAC;EAAC,IAAGd,CAAC,CAACe,MAAM,GAAC,GAAG,EAAC,MAAMZ,CAAC;EAAC,OAAOK,CAAC,CAACL,CAAC,CAAC;AAAA,CAAC;AAAC,eAAea,CAACA,CAAC5B,CAAC,EAAC;EAAC,IAAG,CAACY,CAAC,CAACZ,CAAC,CAAC6B,OAAO,CAAC,EAAC,MAAMJ,KAAK,CAAC,8CAA8C,CAAC;EAAC,IAAG,KAAK,CAAC,KAAGzB,CAAC,CAAC8B,IAAI,KAAG9B,CAAC,CAAC8B,IAAI,GAAC,CAAC,CAAC,EAAC9B,CAAC,CAAC+B,oBAAoB,IAAE/B,CAAC,CAACgC,YAAY,EAAC,OAAOhC,CAAC;EAAC,IAAG;IAAC,IAAG;MAACsB,QAAQ,EAACrB;IAAC,CAAC,GAAC,MAAMuB,CAAC,CAACxB,CAAC,CAAC6B,OAAO,CAAC;IAAC7B,CAAC,CAAC+B,oBAAoB,KAAG/B,CAAC,CAAC+B,oBAAoB,GAAC9B,CAAC,CAACe,cAAc,CAAC,EAAChB,CAAC,CAACgC,YAAY,KAAGhC,CAAC,CAACgC,YAAY,GAAC/B,CAAC,CAACkB,MAAM,CAAC,EAACnB,CAAC,CAACiC,QAAQ,KAAGC,OAAO,CAACC,IAAI,CAAC,0HAA0H,CAAC,EAAC,OAAOnC,CAAC,CAACiC,QAAQ,CAAC;EAAA,CAAC,QAAMjC,CAAC,EAAC;IAAC,MAAMyB,KAAK,CAAC,iEAAiEzB,CAAC,GAAG,CAAC;EAAA;EAAC,OAAOA,CAAC;AAAA;AAAC,SAAO4B,CAAC,IAAIQ,oBAAoB,EAACZ,CAAC,IAAIa,wBAAwB,EAACzB,CAAC,IAAI0B,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}