{"ast":null,"code":"import { z as e } from \"zod\";\nimport { InvalidInputError as t, PrivyErrorCode as r } from \"@privy-io/api-base\";\nconst a = e.enum([\"ALLOW\", \"DENY\"]);\nlet i = e.union([e.string(), e.number(), e.boolean(), e.null()]),\n  n = e.lazy(() => e.union([i, e.array(n), e.record(n)]));\nconst o = e.object({\n    field_source: e.enum([\"ethereum_transaction\", \"ethereum_calldata\"]),\n    field: e.union([e.literal(\"to\"), e.literal(\"value\"), e.string()]),\n    operator: e.union([e.literal(\"eq\"), e.literal(\"gt\"), e.literal(\"gte\"), e.literal(\"lt\"), e.literal(\"lte\"), e.literal(\"in\")]),\n    value: e.union([e.string(), e.array(e.string())]),\n    abi: n.optional()\n  }).strict(),\n  l = e.object({\n    name: e.string().max(50, \"Rule name must be fewer than 50 characters\"),\n    conditions: e.array(o),\n    action: a\n  }).strict();\nlet s = e.union([e.literal(\"eth_sendTransaction\"), e.literal(\"eth_signTransaction\")]),\n  c = e.object({\n    method: s,\n    rules: e.array(l)\n  }).strict();\nconst m = e.object({\n    version: e.literal(\"1.0\"),\n    name: e.string().max(50, \"Policy name must be fewer than 50 characters\"),\n    chain_type: e.literal(\"ethereum\"),\n    method_rules: e.array(c),\n    default_action: a\n  }).strict(),\n  u = m.extend({\n    id: e.string(),\n    created_at: e.number()\n  }),\n  d = e.object({\n    policy_id: e.string({\n      required_error: \"Policy ID must be provided\",\n      invalid_type_error: \"Policy ID is not a valid string\"\n    }).min(1)\n  }).catch(({\n    error: e\n  }) => {\n    throw new t(e.message, r.INVALID_DATA);\n  }),\n  b = e.object({\n    name: e.string().trim().min(1, \"Name is required\").max(50, \"Policy name must be fewer than 50 characters\").optional(),\n    method_rules: e.array(c).optional()\n  }).strict().superRefine((e, t) => {\n    Object.values(e).every(e => null == e) && t.addIssue({\n      code: \"custom\",\n      message: \"At least one field must be provided\"\n    });\n  });\nexport { o as Condition, a as PolicyAction, d as PolicyIdFromPath, u as PolicyResponse, m as PolicyWithoutValidation, l as Rule, b as UpdatePolicyInput };","map":{"version":3,"names":["z","e","InvalidInputError","t","PrivyErrorCode","r","a","enum","i","union","string","number","boolean","null","n","lazy","array","record","o","object","field_source","field","literal","operator","value","abi","optional","strict","l","name","max","conditions","action","s","c","method","rules","m","version","chain_type","method_rules","default_action","u","extend","id","created_at","d","policy_id","required_error","invalid_type_error","min","catch","error","message","INVALID_DATA","b","trim","superRefine","Object","values","every","addIssue","code","Condition","PolicyAction","PolicyIdFromPath","PolicyResponse","PolicyWithoutValidation","Rule","UpdatePolicyInput"],"sources":["/Users/vickyfu/Documents/PredictX/frontend/node_modules/@privy-io/public-api/dist/esm/schemas/policy.mjs"],"sourcesContent":["import{z as e}from\"zod\";import{InvalidInputError as t,PrivyErrorCode as r}from\"@privy-io/api-base\";const a=e.enum([\"ALLOW\",\"DENY\"]);let i=e.union([e.string(),e.number(),e.boolean(),e.null()]),n=e.lazy((()=>e.union([i,e.array(n),e.record(n)])));const o=e.object({field_source:e.enum([\"ethereum_transaction\",\"ethereum_calldata\"]),field:e.union([e.literal(\"to\"),e.literal(\"value\"),e.string()]),operator:e.union([e.literal(\"eq\"),e.literal(\"gt\"),e.literal(\"gte\"),e.literal(\"lt\"),e.literal(\"lte\"),e.literal(\"in\")]),value:e.union([e.string(),e.array(e.string())]),abi:n.optional()}).strict(),l=e.object({name:e.string().max(50,\"Rule name must be fewer than 50 characters\"),conditions:e.array(o),action:a}).strict();let s=e.union([e.literal(\"eth_sendTransaction\"),e.literal(\"eth_signTransaction\")]),c=e.object({method:s,rules:e.array(l)}).strict();const m=e.object({version:e.literal(\"1.0\"),name:e.string().max(50,\"Policy name must be fewer than 50 characters\"),chain_type:e.literal(\"ethereum\"),method_rules:e.array(c),default_action:a}).strict(),u=m.extend({id:e.string(),created_at:e.number()}),d=e.object({policy_id:e.string({required_error:\"Policy ID must be provided\",invalid_type_error:\"Policy ID is not a valid string\"}).min(1)}).catch((({error:e})=>{throw new t(e.message,r.INVALID_DATA)})),b=e.object({name:e.string().trim().min(1,\"Name is required\").max(50,\"Policy name must be fewer than 50 characters\").optional(),method_rules:e.array(c).optional()}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>null==e))&&t.addIssue({code:\"custom\",message:\"At least one field must be provided\"})}));export{o as Condition,a as PolicyAction,d as PolicyIdFromPath,u as PolicyResponse,m as PolicyWithoutValidation,l as Rule,b as UpdatePolicyInput};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}